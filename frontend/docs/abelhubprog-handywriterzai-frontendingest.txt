Directory structure:
└── frontend/
    ├── ALPHA.txt
    ├── Dockerfile
    ├── Dockerfile.railway
    ├── next-env.d.ts
    ├── next.config.mjs
    ├── package.json
    ├── playwright.config.ts
    ├── postcss.config.mjs
    ├── railway.json
    ├── tailwind.config.ts
    ├── tsconfig.json
    ├── tsconfig.tsbuildinfo
    ├── .env.example
    ├── src/
    │   ├── app/
    │   │   ├── globals.css
    │   │   ├── layout.tsx
    │   │   ├── page.tsx
    │   │   ├── api/
    │   │   │   ├── billing/
    │   │   │   │   ├── buy-credits/
    │   │   │   │   │   └── route.ts
    │   │   │   │   ├── summary/
    │   │   │   │   │   └── route.ts
    │   │   │   │   └── upgrade/
    │   │   │   │       └── route.ts
    │   │   │   ├── chat/
    │   │   │   │   ├── route.ts
    │   │   │   │   ├── send/
    │   │   │   │   │   └── route.ts
    │   │   │   │   └── stream/
    │   │   │   │       └── [traceId]/
    │   │   │   │           └── route.ts
    │   │   │   ├── process-files/
    │   │   │   │   └── route.ts
    │   │   │   ├── upload/
    │   │   │   │   └── route.ts
    │   │   │   └── writing-types/
    │   │   │       └── route.ts
    │   │   ├── chat/
    │   │   │   └── page.tsx
    │   │   ├── dashboard/
    │   │   │   └── page.tsx
    │   │   ├── library/
    │   │   │   └── page.tsx
    │   │   ├── originality/
    │   │   │   └── [traceId]/
    │   │   │       └── page.tsx
    │   │   ├── payment/
    │   │   │   ├── cancel/
    │   │   │   │   └── page.tsx
    │   │   │   └── success/
    │   │   │       └── page.tsx
    │   │   ├── performance/
    │   │   │   └── page.tsx
    │   │   ├── pricing/
    │   │   │   └── page.tsx
    │   │   ├── profile/
    │   │   │   └── page.tsx
    │   │   ├── routing/
    │   │   │   └── page.tsx
    │   │   ├── settings/
    │   │   │   ├── page.tsx
    │   │   │   ├── billing/
    │   │   │   │   └── page.tsx
    │   │   │   ├── general/
    │   │   │   │   └── page.tsx
    │   │   │   ├── security/
    │   │   │   │   └── page.tsx
    │   │   │   └── usage/
    │   │   │       └── page.tsx
    │   │   └── test/
    │   │       └── page.tsx
    │   ├── components/
    │   │   ├── ActivityTimeline.tsx
    │   │   ├── AgentActivityStream.tsx
    │   │   ├── BillingPanel.tsx
    │   │   ├── ChatHeader.tsx
    │   │   ├── ChatHistory.tsx
    │   │   ├── ChatMessagesView.tsx
    │   │   ├── ChatPane.tsx
    │   │   ├── ChatSidebar.tsx
    │   │   ├── CollapsedSidebar.tsx
    │   │   ├── CTA.tsx
    │   │   ├── DownloadMenu.tsx
    │   │   ├── EnhancedChatView.tsx
    │   │   ├── ErrorBoundary.tsx
    │   │   ├── ExpandedSidebar.tsx
    │   │   ├── FeatureCard.tsx
    │   │   ├── FeatureGrid.tsx
    │   │   ├── Footer.tsx
    │   │   ├── Header.tsx
    │   │   ├── Hero.tsx
    │   │   ├── HowItWorks.tsx
    │   │   ├── ImprovedInputForm.tsx
    │   │   ├── ImprovedSidebar.tsx
    │   │   ├── InputForm.tsx
    │   │   ├── LayoutManager.tsx
    │   │   ├── LocaleSelect.tsx
    │   │   ├── MessageBubble.tsx
    │   │   ├── MessageInputBar.tsx
    │   │   ├── PaymentDialog.tsx
    │   │   ├── PaymentSuccess.tsx
    │   │   ├── providers.tsx
    │   │   ├── ResponseActions.tsx
    │   │   ├── SettingsModal.tsx
    │   │   ├── Sidebar.tsx
    │   │   ├── StreamingStatus.tsx
    │   │   ├── ThemeSelector.tsx
    │   │   ├── ThemeSwitcher.tsx
    │   │   ├── ThemeToggle.tsx
    │   │   ├── WelcomeScreen.tsx
    │   │   ├── admin/
    │   │   │   └── ModelConfigPanel.tsx
    │   │   ├── agent/
    │   │   │   └── AgentOrchestrationDashboard.tsx
    │   │   ├── chat/
    │   │   │   ├── ContextUploadMenu.tsx
    │   │   │   ├── CostMeter.tsx
    │   │   │   ├── DemoReadyChatInterface.tsx
    │   │   │   ├── DownloadMenu.tsx
    │   │   │   ├── MicButton.tsx
    │   │   │   ├── OptimizedFileUpload.tsx
    │   │   │   └── PromptEditor.tsx
    │   │   ├── Composer/
    │   │   │   ├── AttachButton.tsx
    │   │   │   ├── Composer.tsx
    │   │   │   ├── MicButton.tsx
    │   │   │   ├── SendButton.tsx
    │   │   │   └── WriteupSelect.tsx
    │   │   ├── nav/
    │   │   │   ├── Sidebar.tsx
    │   │   │   └── UserPopover.tsx
    │   │   ├── ui/
    │   │   │   ├── AgentActivityDisplay.tsx
    │   │   │   ├── avatar.tsx
    │   │   │   ├── badge.tsx
    │   │   │   ├── button.tsx
    │   │   │   ├── card.tsx
    │   │   │   ├── context-menu.tsx
    │   │   │   ├── ContextUploader.tsx
    │   │   │   ├── dialog.tsx
    │   │   │   ├── dropdown-menu.tsx
    │   │   │   ├── FileTile.tsx
    │   │   │   ├── FileUploadZone.tsx
    │   │   │   ├── input.tsx
    │   │   │   ├── label.tsx
    │   │   │   ├── popover.tsx
    │   │   │   ├── progress.tsx
    │   │   │   ├── radio-group.tsx
    │   │   │   ├── scroll-area.tsx
    │   │   │   ├── select.tsx
    │   │   │   ├── separator.tsx
    │   │   │   ├── skeleton.tsx
    │   │   │   ├── switch.tsx
    │   │   │   ├── table.tsx
    │   │   │   ├── tabs.tsx
    │   │   │   ├── textarea.tsx
    │   │   │   ├── toast.tsx
    │   │   │   ├── toaster.tsx
    │   │   │   ├── tooltip.tsx
    │   │   │   └── use-toast.ts
    │   │   └── upload/
    │   │       └── RevolutionaryFileUploader.tsx
    │   ├── contexts/
    │   │   └── ThemeContext.tsx
    │   ├── hooks/
    │   │   ├── useAdvancedApi.ts
    │   │   ├── useAdvancedChat.ts
    │   │   ├── useFileUpload.ts
    │   │   ├── useSidebar.ts
    │   │   ├── useStream.ts
    │   │   └── useWallet.ts
    │   ├── lib/
    │   │   ├── agentic-doc-client.ts
    │   │   ├── api-client.ts
    │   │   ├── api.ts
    │   │   ├── conversationStore.ts
    │   │   ├── useChatStream.ts
    │   │   ├── utils.ts
    │   │   └── walletProvider.ts
    │   ├── services/
    │   │   ├── advancedApiClient.ts
    │   │   └── multimodal-processor.ts
    │   ├── store/
    │   │   └── usePrefs.ts
    │   └── types/
    │       ├── api.ts
    │       ├── components.ts
    │       ├── hooks.ts
    │       ├── index.ts
    │       └── multimodal.ts
    └── tests/
        └── e2e/
            ├── chat.spec.ts
            └── user-journey.spec.ts

================================================
FILE: frontend/ALPHA.txt
================================================
Analysis complete and production-readiness plan prepared.

1) Current backend agentic nodes and flow
- Entry and minimal server: [backend.run_server.py:55](backend/run_server.py:55) builds a fallback FastAPI app with endpoints /api/chat, /api/upload, /api/providers/status and now includes Turnitin router registration near [backend.run_server.py:88](backend/run_server.py:88).
- Multi-provider factory: [backend.src.models.factory.ProviderFactory()](backend/src/models/factory.py:29) initializes providers (Gemini, OpenAI, Anthropic, OpenRouter, Perplexity), configures default role mappings in [_setup_default_role_mappings()](backend/src/models/factory.py:89), and exposes [get_provider()](backend/src/models/factory.py:119).
- Roles: [backend.src.models.base.ModelRole](backend/src/models/factory.py:9) used to route. Current map gives Gemini as a general fallback in several roles; this requires constraining.
- Turnitin agent: Orchestrator drives [ensure_session()](backend/src/turnitin/orchestrator.py:40) -> [submit_and_collect()](backend/src/turnitin/orchestrator.py:46) -> [deliver()](backend/src/turnitin/orchestrator.py:65), and builds [Manifest](backend/src/turnitin/orchestrator.py:53). Data classes are defined in [backend.src.turnitin.models](backend/src/turnitin/models.py:7).
- Turnitin API: A POST /api/turnitin/start route (file not in read set but created earlier) calls orchestrator.

2) Issues and constraints identified
- “Simple Gemini” path: Currently present in default role mappings as a candidate for many roles ([factory._setup_default_role_mappings](backend/src/models/factory.py:99)). This must be limited strictly to General Chat, per your instruction.
- Role routing is static and provider-centric. Production requires a policy layer with task/use-case awareness, model candidates, health/latency fallback, guardrails, and pluggable model selection at runtime.
- Missing system prompt registry and context window policy. No unified prompt templates for different use cases. No strategy for context files or retrieval injection.
- No tool/browsing guardrails toggles by use-case. Perplexity is routed for research but not explicitly constrained by capability flags.
- No dynamic model portfolio mapping per use case (e.g., OpenRouter with Kimi, Qwen, GLM for Reviewer/Writer; Perplexity for Research; Anthropic for Judge).
- Pylance/editor warnings in run_server due to missing environment; acceptable but will be addressed by dependency install and type hints where practical.

3) Production-ready architecture enhancements
A) Policy-driven Task Router
- Introduce a Task enum and router replacing ad-hoc roles with use-case tasks:
  - Tasks: GENERAL_CHAT, RESEARCH, DRAFTING, CODE_ASSIST, ACADEMIC_TOOLS, DATA_QA, REVIEWER, SUMMARIZER.
- TaskPolicy registry:
  - For each task: system prompt template, context policy (max tokens, chunking), allowed tools (web browsing, citations), safety constraints, pluggable model candidates list with priorities.
- Model portfolio mapping:
  - GENERAL_CHAT: Gemini allowed as “simple” fast path only; candidates [gemini, openrouter(Kimi Lite), openai(gpt-4o-mini)].
  - RESEARCH: Perplexity primary; fallback openrouter(Qwen 2.5/3 research-tuned), openai with browsing tool if integrated.
  - DRAFTING: openrouter(Kimi K2, GLM-4.5), anthropic(sonnet) optional, openai for style polish.
  - CODE_ASSIST: openrouter(Qwen Code), groq (optional future), openai GPT-4.1 for reasoning.
  - ACADEMIC_TOOLS: orchestrators like Turnitin; summarizer openai; citations mode with appropriate prompt/template.
  - DATA_QA: openai/gpt-4o-mini or Qwen for structured extraction, JSON mode; validator pass with Anthropic.
  - REVIEWER/JUDGE: anthropic primary; fallback openrouter strong reasoning models; temperature/prompt tuned for critique.
- Health and latency-aware selection:
  - Each task has candidate providers with weights, latency SLOs, cost bias. Router probes health via [factory.health_check_all()](backend/src/models/factory.py:181) and historical latency; selects best viable candidate.

B) System prompt registry and prompt assembly
- Create PromptRegistry with templates keyed by Task. Each entry:
  - system: task-specific instruction, policy constraints (tone, format, citations policy).
  - prelude: dataset/context assembly (files, metadata, user preferences).
  - guardrails: refusal policy, privacy redaction rules, reasoning visibility.
- Implement PromptAssembler that merges system prompt + user content + context snippets. It measures token budget and trims context respecting a ContextPolicy: max model context, reserved tokens for output, chunk ranking (BM25/embedding), and format (JSON mode for structured tasks).
- Provide pluggable model adapters to handle tokenization estimates per provider for accurate budgeting.

C) Context window and context files
- ContextPolicy per task:
  - max_context_tokens, reserved_output_tokens, chunk_size, overlap, ranking mode.
  - Allowed file types and per-file limits.
- Context pipeline:
  - Accept uploaded files via /api/upload. Store URIs and run a preprocessor to create chunks and metadata (sha256, mime, source).
  - For a given chat turn, fetch relevant chunks using semantic or keyword retrieval (initially keyword and simple embeddings if available), then prompt assembler includes top-K within budget.

D) Pluggable model selection at any point
- RouteConfig supports model override hints supplied by frontend or internal planner. The Chat endpoint accepts optional task and model hints.
- Planner layer (lightweight) can decide to switch model mid-conversation for specialized steps (e.g., RESEARCH fetch with Perplexity then DRAFTING with Kimi).
- Persist conversation state with task metadata so follow-up turns inherit task policies or can switch tasks explicitly.

E) Restrict “simple Gemini”
- Modify default mapping so Gemini is only in GENERAL_CHAT candidate list. Remove Gemini from other role/task defaults. If legacy role parameter is used, translate roles to tasks and apply constraints so Gemini doesn’t get selected outside GENERAL_CHAT.

F) Guardrails and safety
- Add response schema modes for structured outputs (JSON schema for DATA_QA).
- Redaction filter for PII if required by policy.
- Refusal patterns for disallowed queries based on task.
- Logging/audit for high-risk tasks.

G) Observability
- Provider metrics (latency, error rates) aggregated per task/model to improve selection.
- Trace ids on each request, include provider/model and chosen policy.

4) Implementation plan (incremental)
Step 1: Introduce task router and policy scaffolding
- Add Task enum and TaskPolicy registry with initial templates for the primary use cases.
- Implement a ChatOrchestrator that:
  - Maps incoming request to Task (from frontend parameter or heuristic defaults).
  - Resolves a candidate model via Policy + Health.
  - Builds prompt via PromptAssembler and calls provider.

Step 2: Constrain Gemini
- Update [factory._setup_default_role_mappings()](backend/src/models/factory.py:89) to remove Gemini from all roles except GENERAL.
- Add a translation layer from legacy role to Task. If not provided, default to GENERAL_CHAT. Enforce Gemini-only in GENERAL.

Step 3: Prompt registry and context pipeline
- Add a prompts/ directory with templates and code to load/register templates. Provide initial templates:
  - general_chat, research_browsing, drafting_writer, code_assist, academic_tools, data_qa, reviewer_judge, summarizer.
- Add ContextPolicy and a simple chunker; wire /api/upload to register file metadata for context retrieval.

Step 4: Provider selection improvements
- Add selection logic that checks [get_provider_stats()](backend/src/models/factory.py:201) and [health_check_all()](backend/src/models/factory.py:181), with latency/cost metadata per provider/model (static config initially).

Step 5: API contract updates
- Expand /api/chat to accept:
  - task: string enum
  - context_ids or include_uploaded: boolean
  - model_hint: optional provider/model
- Maintain backward compatibility for existing role/provider paths by mapping to tasks.

Step 6: Testing and validation
- Unit tests for task routing, prompt assembly, and fallback behavior.
- E2E tests for primary use cases with context injection.
- Load tests for latency SLOs per task.

5) Concrete code modifications to


================================================
FILE: frontend/Dockerfile
================================================
# Frontend Dockerfile for HandyWriterz  
FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Enable pnpm
RUN corepack enable && corepack prepare pnpm@9 --activate

# Copy workspace configuration from parent directory context
COPY pnpm-workspace.yaml pnpm-lock.yaml ./
COPY frontend/package.json ./frontend/

# Install dependencies using pnpm workspace
RUN pnpm install --frozen-lockfile

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app

# Enable pnpm
RUN corepack enable && corepack prepare pnpm@9 --activate

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/frontend/node_modules ./frontend/node_modules

# Copy workspace files
COPY pnpm-workspace.yaml pnpm-lock.yaml ./
COPY frontend ./frontend

# Set environment variables for build
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Build the application
WORKDIR /app/frontend
RUN pnpm build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/frontend/public ./public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/frontend/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/frontend/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

CMD ["node", "server.js"]


================================================
FILE: frontend/Dockerfile.railway
================================================
# Alternative Railway-optimized Dockerfile
FROM node:20-alpine

# Set working directory  
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache libc6-compat curl

# Enable pnpm with specific version
RUN corepack enable && corepack prepare pnpm@9 --activate

# Copy workspace files from parent context
COPY pnpm-workspace.yaml pnpm-lock.yaml ./
COPY frontend/package.json ./frontend/

# Install dependencies  
RUN pnpm install --frozen-lockfile

# Copy source code
COPY frontend ./frontend

# Set build environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Build application
WORKDIR /app/frontend
RUN pnpm build

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Set permissions
RUN chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Start application
CMD ["pnpm", "start"]


================================================
FILE: frontend/next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.



================================================
FILE: frontend/next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: false,
  transpilePackages: ['@dynamic-labs/sdk-react-core'],
  experimental: {
    optimizePackageImports: ['@radix-ui/react-icons'],
  },
  async rewrites() {
    return [{
      source: '/api/:path*',
      destination: 'http://localhost:8000/api/:path*',
    }]
  },
};

export default nextConfig;



================================================
FILE: frontend/package.json
================================================
{
  "name": "handywriterz",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "jest",
    "test:e2e": "playwright test",
    "test:e2e:headed": "playwright test --headed"
  },
  "dependencies": {
    "@dynamic-labs/sdk-react-core": "3.9.13",
    "@hookform/resolvers": "3.10.0",
    "@radix-ui/react-avatar": "1.1.10",
    "@radix-ui/react-context-menu": "2.2.15",
    "@radix-ui/react-dialog": "1.1.14",
    "@radix-ui/react-dropdown-menu": "2.1.15",
    "@radix-ui/react-label": "2.1.7",
    "@radix-ui/react-popover": "1.1.14",
    "@radix-ui/react-progress": "1.1.7",
    "@radix-ui/react-scroll-area": "1.2.9",
    "@radix-ui/react-select": "2.2.5",
    "@radix-ui/react-separator": "1.1.7",
    "@radix-ui/react-slot": "1.2.3",
    "@radix-ui/react-tabs": "1.1.12",
    "@radix-ui/react-toast": "1.2.14",
    "@radix-ui/react-tooltip": "1.2.7",
    "@types/uuid": "^10.0.0",
    "class-variance-authority": "0.7.1",
    "clsx": "2.1.1",
    "framer-motion": "10.18.0",
    "immer": "10.1.1",
    "lucide-react": "0.475.0",
    "next": "15.4.2",
    "next-themes": "0.4.6",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-dropzone": "14.3.8",
    "react-error-boundary": "6.0.0",
    "react-hook-form": "7.60.0",
    "react-textarea-autosize": "8.5.9",
    "sonner": "1.7.4",
    "tailwind-merge": "2.6.0",
    "tailwindcss": "3.4.17",
    "tus-js-client": "4.3.1",
    "usehooks-ts": "2.16.0",
    "uuid": "^11.1.0",
    "zod": "3.25.76",
    "zustand": "5.0.6"
  },
  "devDependencies": {
    "@types/node": "20.19.9",
    "@types/react": "18.3.23",
    "@types/react-dom": "18.3.7",
    "assert": "2.1.0",
    "autoprefixer": "10.4.21",
    "browserify-zlib": "0.2.0",
    "crypto-browserify": "3.12.1",
    "eslint": "8.57.1",
    "eslint-config-next": "15.4.2",
    "https-browserify": "1.0.0",
    "os-browserify": "0.3.0",
    "path-browserify": "1.0.1",
    "pino-pretty": "13.0.0",
    "postcss": "8.5.6",
    "stream-browserify": "3.0.0",
    "stream-http": "3.2.0",
    "typescript": "5.8.3",
    "url": "0.11.4"
  }
}



================================================
FILE: frontend/playwright.config.ts
================================================
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  testDir: './tests/e2e',
  timeout: 90_000,
  expect: { timeout: 10_000 },
  fullyParallel: true,
  retries: process.env.CI ? 2 : 0,
  reporter: [['list'], ['html', { open: 'never' }]],
  use: {
    baseURL: process.env.PLAYWRIGHT_BASE_URL || 'http://localhost:3000',
    trace: 'retain-on-failure',
    video: 'retain-on-failure',
    screenshot: 'only-on-failure',
    bypassCSP: true,
  },
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },
    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },
  ],
  webServer: process.env.PLAYWRIGHT_NO_WEB_SERVER
    ? undefined
    : [
        // If you want Playwright to auto-start dev server, set a script here.
        // Leaving undefined because you likely run `npm run dev` separately.
      ],
});



================================================
FILE: frontend/postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

export default config


================================================
FILE: frontend/railway.json
================================================
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "NIXPACKS",
    "buildCommand": "pnpm install --frozen-lockfile && pnpm build"
  },
  "deploy": {
    "numReplicas": 1,
    "sleepApplication": true,
    "restartPolicyType": "ON_FAILURE",
    "healthcheckPath": "/",
    "healthcheckTimeout": 300
  }
}


================================================
FILE: frontend/tailwind.config.ts
================================================
import type { Config } from 'tailwindcss'

const config: Config = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
    './src/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))'
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))'
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))'
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))'
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))'
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))'
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))'
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))'
        }
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)'
      }
    }
  },
  plugins: [],
}

export default config


================================================
FILE: frontend/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "es2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": ["node_modules"]
}



================================================
FILE: frontend/tsconfig.tsbuildinfo
================================================
{"fileNames":["../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es5.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2016.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2017.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2018.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2019.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2021.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2023.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2024.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.dom.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.dom.iterable.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.core.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.collection.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.generator.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.iterable.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.promise.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.proxy.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.reflect.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.symbol.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2016.array.include.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2016.intl.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2017.arraybuffer.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2017.date.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2017.object.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2017.string.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2017.intl.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2018.intl.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2018.promise.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2018.regexp.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2019.array.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2019.object.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2019.string.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2019.symbol.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2019.intl.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.bigint.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.date.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.promise.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.string.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.intl.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.number.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2021.promise.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2021.string.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2021.weakref.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2021.intl.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.array.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.error.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.intl.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.object.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.string.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.regexp.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2023.array.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2023.collection.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2023.intl.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2024.arraybuffer.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2024.collection.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2024.object.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2024.promise.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2024.regexp.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2024.sharedmemory.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2024.string.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.array.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.collection.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.intl.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.disposable.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.promise.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.decorators.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.iterator.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.float16.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.decorators.d.ts","../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.decorators.legacy.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+react@18.3.23/node_modules/@types/react/global.d.ts","../../HandyWriterzAi/node_modules/.pnpm/csstype@3.1.3/node_modules/csstype/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+prop-types@15.7.15/node_modules/@types/prop-types/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+react@18.3.23/node_modules/@types/react/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/styled-jsx/types/css.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/styled-jsx/types/macro.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/styled-jsx/types/style.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/styled-jsx/types/global.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/styled-jsx/types/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/amp.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/amp.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/get-page-files.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/compatibility/disposable.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/compatibility/indexable.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/compatibility/iterators.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/compatibility/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/globals.typedarray.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/buffer.buffer.d.ts","../../HandyWriterzAi/node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/header.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/readable.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/file.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/fetch.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/formdata.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/connector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/client.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/errors.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/dispatcher.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/global-dispatcher.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/global-origin.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/pool-stats.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/pool.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/handlers.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/balanced-pool.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/agent.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/mock-interceptor.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/mock-agent.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/mock-client.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/mock-pool.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/mock-errors.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/proxy-agent.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/env-http-proxy-agent.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/retry-handler.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/retry-agent.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/api.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/interceptors.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/util.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/cookies.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/patch.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/websocket.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/eventsource.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/filereader.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/diagnostics-channel.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/content-type.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/cache.d.ts","../../HandyWriterzAi/node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/globals.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/assert.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/assert/strict.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/async_hooks.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/buffer.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/child_process.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/cluster.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/console.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/constants.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/crypto.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/dgram.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/diagnostics_channel.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/dns.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/dns/promises.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/domain.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/dom-events.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/events.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/fs.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/fs/promises.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/http.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/http2.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/https.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/inspector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/module.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/net.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/os.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/path.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/perf_hooks.d.ts","../../HandyWriterzAi/node_modules/.pnpm/querystring@0.2.1/node_modules/querystring/decode.d.ts","../../HandyWriterzAi/node_modules/.pnpm/querystring@0.2.1/node_modules/querystring/encode.d.ts","../../HandyWriterzAi/node_modules/.pnpm/querystring@0.2.1/node_modules/querystring/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/process.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/punycode.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/querystring.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/readline.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/readline/promises.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/repl.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/sea.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/stream.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/stream/promises.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/stream/consumers.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/stream/web.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/string_decoder.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/test.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/timers.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/timers/promises.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/tls.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/trace_events.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/tty.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/url.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/util.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/v8.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/vm.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/wasi.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/worker_threads.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/zlib.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+node@20.19.9/node_modules/@types/node/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+react@18.3.23/node_modules/@types/react/canary.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+react@18.3.23/node_modules/@types/react/experimental.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+react-dom@18.3.7_@types+react@18.3.23/node_modules/@types/react-dom/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+react-dom@18.3.7_@types+react@18.3.23/node_modules/@types/react-dom/canary.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+react-dom@18.3.7_@types+react@18.3.23/node_modules/@types/react-dom/experimental.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/fallback.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/compiled/webpack/webpack.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/config.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/load-custom-routes.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/image-config.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/webpack/plugins/subresource-integrity-plugin.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/body-streams.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/cache-control.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/setup-exception-listeners.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/worker.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/constants.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/app-router-headers.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/rendering-mode.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/router-utils/build-prefetch-segment-data-route.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/require-hook.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/experimental/ppr.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/webpack/plugins/app-build-manifest-plugin.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/page-types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/segment-config/app/app-segment-config.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/segment-config/pages/pages-segment-config.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/analysis/get-page-static-info.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/webpack/loaders/get-module-build-info.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/webpack/plugins/middleware-plugin.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/node-polyfill-crypto.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/node-environment-baseline.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/node-environment-extensions/error-inspect.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/node-environment-extensions/random.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/node-environment-extensions/date.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/node-environment-extensions/web-crypto.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/node-environment-extensions/node-crypto.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/node-environment.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/page-extensions-type.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/webpack/plugins/flight-manifest-plugin.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/instrumentation/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/coalesced-function.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/router/utils/middleware-route-matcher.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/router-utils/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/modern-browserslist-target.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/constants.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/trace/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/trace/trace.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/trace/shared.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/trace/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/load-jsconfig.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@next+env@15.4.2/node_modules/@next/env/dist/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/webpack/plugins/telemetry-plugin/use-cache-tracker-utils.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/webpack/plugins/telemetry-plugin/telemetry-plugin.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/telemetry/storage.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/build-context.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/bloom-filter.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/webpack-config.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-kind.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-definitions/route-definition.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/swc/generated-native.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/swc/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/dev/parse-version-info.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/next-devtools/shared/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/dev/dev-indicator-server-state.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/dev/hot-reloader-types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/cache-handlers/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/response-cache/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/resume-data-cache/cache-store.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/resume-data-cache/resume-data-cache.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/render-result.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/i18n-provider.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/web/next-url.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/compiled/@edge-runtime/cookies/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/web/spec-extension/cookies.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/web/spec-extension/request.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/after/builtin-request-context.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/web/spec-extension/fetch-event.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/web/spec-extension/response.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/segment-config/middleware/middleware-config.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/web/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/webpack/plugins/pages-manifest-plugin.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/router/utils/parse-url.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/base-http/node.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/webpack/plugins/next-font-manifest-plugin.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-definitions/locale-route-definition.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-definitions/pages-route-definition.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/mitt.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/with-router.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/router.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/route-loader.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/page-loader.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/router/router.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/router-context.shared-runtime.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/loadable-context.shared-runtime.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/loadable.shared-runtime.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/image-config-context.shared-runtime.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/hooks-client-context.shared-runtime.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/head-manager-context.shared-runtime.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-definitions/app-page-route-definition.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/webpack/loaders/metadata/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/app-dir-module.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/async-storage/draft-mode-provider.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/web/spec-extension/adapters/headers.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/app-render/cache-signal.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/app-render/dynamic-rendering.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/app-render/work-unit-async-storage-instance.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/response-cache/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/request/fallback-params.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/lazy-result.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/implicit-tags.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/app-render/work-unit-async-storage.external.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/deep-readonly.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/router/utils/parse-relative-url.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/app-render/app-render.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/server-inserted-html.shared-runtime.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/amp-context.shared-runtime.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-modules/app-page/vendored/contexts/entrypoints.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-modules/app-page/module.compiled.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/error-boundary.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/layout-router.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/render-from-template-context.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/app-render/action-async-storage-instance.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/app-render/action-async-storage.external.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+react@18.3.23/node_modules/@types/react/jsx-runtime.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/client-page.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/client-segment.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/request/search-params.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/hooks-server-context.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/http-access-fallback/error-boundary.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/metadata/types/alternative-urls-types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/metadata/types/extra-types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/metadata/types/metadata-types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/metadata/types/manifest-types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/metadata/types/opengraph-types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/metadata/types/twitter-types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/metadata/types/metadata-interface.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/metadata/types/resolvers.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/metadata/types/icons.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/metadata/resolve-metadata.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/lib/metadata/metadata.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/metadata/metadata-boundary.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/app-render/rsc/preloads.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/app-render/rsc/postpone.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/app-render/rsc/taint.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/app-render/collect-segment-data.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/next-devtools/userspace/app/segment-explorer-node.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/app-render/entry-base.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/templates/app-page.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+react@18.3.23/node_modules/@types/react/jsx-dev-runtime.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/entrypoints.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+react-dom@18.3.7_@types+react@18.3.23/node_modules/@types/react-dom/client.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+react-dom@18.3.7_@types+react@18.3.23/node_modules/@types/react-dom/server.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/entrypoints.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-modules/app-page/module.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/web/adapter.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/use-cache/cache-life.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/app-render/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/router-reducer/router-reducer-types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/flight-data-helpers.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/router-reducer/fetch-server-response.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/app-router-context.shared-runtime.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-modules/pages/vendored/contexts/entrypoints.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-modules/pages/module.compiled.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/templates/pages.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-modules/pages/module.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/next-devtools/userspace/pages/pages-dev-overlay-setup.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/render.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-definitions/pages-api-route-definition.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-matches/pages-api-route-match.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-matchers/route-matcher.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-matcher-providers/route-matcher-provider.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-matcher-managers/route-matcher-manager.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/normalizers/normalizer.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/normalizers/locale-route-normalizer.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/normalizers/request/pathname-normalizer.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/normalizers/request/suffix.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/normalizers/request/rsc.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/normalizers/request/prefetch-rsc.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/normalizers/request/next-data.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/normalizers/request/segment-prefix-rsc.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/base-server.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/async-callback-set.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/router/utils/route-regex.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/router/utils/route-matcher.d.ts","../../HandyWriterzAi/node_modules/.pnpm/sharp@0.34.3/node_modules/sharp/lib/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/image-optimizer.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/next-server.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/lru-cache.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/dev-bundler-service.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/static-paths/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/dev/static-paths-worker.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/dev/next-dev-server.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/next.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/render-server.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/router-server.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/router/utils/path-match.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/router-utils/filesystem.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/router-utils/setup-dev-bundler.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/router-utils/router-server-context.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-modules/route-module.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/load-components.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-definitions/app-route-route-definition.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/async-storage/work-store.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/web/http.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-modules/app-route/shared-modules.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/redirect-status-code.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/redirect-error.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/templates/app-route.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-modules/app-route/module.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-modules/app-route/module.compiled.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/segment-config/app/app-segments.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/utils.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/turborepo-access-trace/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/turborepo-access-trace/result.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/turborepo-access-trace/helpers.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/turborepo-access-trace/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/export/routes/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/export/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/export/worker.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/worker.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/build/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/lib/incremental-cache/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/after/after.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/after/after-context.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/app-render/work-async-storage-instance.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/app-render/work-async-storage.external.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/request/params.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/route-matches/route-match.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/request-meta.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/cli/next-test.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/config-shared.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/base-http/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/api-utils/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/html-context.shared-runtime.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/utils.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/pages/_app.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/app.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/web/spec-extension/unstable-cache.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/web/spec-extension/revalidate.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/web/spec-extension/unstable-no-store.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/use-cache/cache-tag.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/cache.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/runtime-config.external.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/config.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/pages/_document.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/document.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/dynamic.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dynamic.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/pages/_error.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/error.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/head.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/head.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/request/cookies.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/request/headers.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/request/draft-mode.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/headers.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/get-img-props.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/image-component.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/shared/lib/image-external.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/image.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/link.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/link.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/redirect.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/not-found.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/forbidden.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/unauthorized.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/unstable-rethrow.server.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/unstable-rethrow.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/navigation.react-server.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/components/navigation.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/navigation.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/router.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/client/script.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/script.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/web/spec-extension/user-agent.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/compiled/@edge-runtime/primitives/url.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/web/spec-extension/image-response.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/compiled/@vercel/og/satori/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/compiled/@vercel/og/emoji/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/compiled/@vercel/og/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/after/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/request/root-params.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/server/request/connection.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/server.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/types/global.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/types/compiled.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/image-types/global.d.ts","./next-env.d.ts","../../HandyWriterzAi/node_modules/.pnpm/source-map-js@1.2.1/node_modules/source-map-js/source-map.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/previous-map.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/input.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/css-syntax-error.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/declaration.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/root.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/warning.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/lazy-result.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/no-work-result.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/processor.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/result.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/document.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/rule.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/node.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/comment.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/container.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/at-rule.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/list.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/postcss.d.ts","../../HandyWriterzAi/node_modules/.pnpm/postcss@8.5.6/node_modules/postcss/lib/postcss.d.mts","../../HandyWriterzAi/node_modules/.pnpm/tailwindcss@3.4.17/node_modules/tailwindcss/types/generated/corePluginList.d.ts","../../HandyWriterzAi/node_modules/.pnpm/tailwindcss@3.4.17/node_modules/tailwindcss/types/generated/colors.d.ts","../../HandyWriterzAi/node_modules/.pnpm/tailwindcss@3.4.17/node_modules/tailwindcss/types/config.d.ts","../../HandyWriterzAi/node_modules/.pnpm/tailwindcss@3.4.17/node_modules/tailwindcss/types/index.d.ts","./tailwind.config.ts","./src/app/api/billing/buy-credits/route.ts","./src/app/api/billing/summary/route.ts","./src/app/api/billing/upgrade/route.ts","./src/app/api/chat/route.ts","./src/app/api/chat/stream/[traceId]/route.ts","./src/lib/agentic-doc-client.ts","./src/app/api/process-files/route.ts","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-context@1.1_76d388bc9b59462d990d0dffb9f0fdd3/node_modules/@radix-ui/react-context/dist/index.d.mts","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-primitive@2_db0ee435667e42f4b05fd5a9bb21abc3/node_modules/@radix-ui/react-primitive/dist/index.d.mts","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-dismissable_dbf8386523191e50867cd199de52aa0e/node_modules/@radix-ui/react-dismissable-layer/dist/index.d.mts","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-toast@1.2.1_f2d63fe9a772cc94531d3b740a819e3d/node_modules/@radix-ui/react-toast/dist/index.d.mts","../../HandyWriterzAi/node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/clsx.d.mts","../../HandyWriterzAi/node_modules/.pnpm/class-variance-authority@0.7.1/node_modules/class-variance-authority/dist/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/class-variance-authority@0.7.1/node_modules/class-variance-authority/dist/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/lucide-react@0.475.0_react@18.3.1/node_modules/lucide-react/dist/lucide-react.d.ts","../../HandyWriterzAi/node_modules/.pnpm/tailwind-merge@2.6.0/node_modules/tailwind-merge/dist/types.d.ts","./src/lib/utils.ts","./src/components/ui/toast.tsx","./src/components/ui/use-toast.ts","./src/types/api.ts","./src/lib/api-client.ts","./src/types/hooks.ts","./src/hooks/useAdvancedApi.ts","../../HandyWriterzAi/node_modules/.pnpm/zustand@5.0.6_@types+react@_1f85a288ccc428358582928657b02c63/node_modules/zustand/esm/vanilla.d.mts","../../HandyWriterzAi/node_modules/.pnpm/zustand@5.0.6_@types+react@_1f85a288ccc428358582928657b02c63/node_modules/zustand/esm/react.d.mts","../../HandyWriterzAi/node_modules/.pnpm/zustand@5.0.6_@types+react@_1f85a288ccc428358582928657b02c63/node_modules/zustand/esm/index.d.mts","./src/hooks/useStream.ts","../../HandyWriterzAi/node_modules/.pnpm/tus-js-client@4.3.1/node_modules/tus-js-client/lib/index.d.ts","./src/hooks/useFileUpload.ts","./src/hooks/useAdvancedChat.ts","./src/hooks/useDynamicAuth.ts","./src/hooks/useSidebar.ts","./src/lib/walletProvider.ts","./src/hooks/useWallet.ts","./src/lib/api.ts","./src/lib/conversationStore.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/polyfills.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/getInitialUrl/getInitialUrl.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/getInitialUrl/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/version.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/runtime.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/Asset.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/AssetTransfer.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/AssetDiff.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/AttestationConveyancePreference.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/AuthModeEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/AuthStorageEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/AuthSettings.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/AuthenticationExtensionsClientInputs.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/AuthenticationExtensionsClientOutputs.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/AuthenticatorAssertionResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/AuthenticatorAttachment.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/AuthenticatorAttestationResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ResidentKeyRequirement.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/UserVerificationRequirement.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/AuthenticatorSelectionCriteria.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/AuthenticatorTransportProtocol.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/BadRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/JwtVerifiedCredentialFormatEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/NameServiceData.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProviderEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/WalletAddressType.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/WalletAdditionalAddress.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/EcdsaValidatorOptions.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/EmbeddedWalletVersionEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/HardwareWalletEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/PasswordSourceTypeEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProviderEntryPointVersionEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProviderKernelVersionEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/WalletProperties.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/WalletProviderEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/JwtVerifiedCredential.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MfaBackupCodeAcknowledgement.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/CustomFieldType.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/CustomFieldValidValue.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/CustomFieldValidationRules.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/KycFieldType.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProjectSettingsKyc.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/BaseUser.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ChainConfiguration.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ChainEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/CoinbaseMpcWalletProperties.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/PasskeyRegistrationCredential.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/CompletePasskeyRecoveryRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ConnectRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/CreateTurnkeyEmbeddedWalletSpecificOpts.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/CreateEmbeddedWalletSpecificOpts.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/EmbeddedWalletChainEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/EmbeddedWalletProviderEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/CreateEmbeddedWalletParams.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/CreateEmbeddedWalletsRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/CreateMfaToken.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/CreateUserEmbeddedWalletsFromFarcasterRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SmsCountryCode.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/UserIdentifierTypeEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/CreateUserEmbeddedWalletsRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/TurnkeyStamp.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/TurnkeySignedRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/CreateWalletAccountRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/CurrencyType.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/Currency.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/DeleteEmbeddedWalletsRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/TimeUnitEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/Duration.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/JwtBlockchainAccount.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/JwtPayloadDeprecatedInfo.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/JwtVerifiedCredentialHashes.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/DynamicJwt.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/EmailProviderResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/EmailVerificationCreateRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/EmailVerificationCreateResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/EmailVerificationRetryRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/EmailVerificationVerifyRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/EmbeddedWalletAuthToken.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/EmbeddedWalletAuthType.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/EmbeddedWalletPasscodeClaimRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/EmbeddedWalletSecret.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SdkUser.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/EmbeddedWalletSecretWithUpdatedJwt.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/EmbeddedWalletSecretWithUpdatedJwtAllOf.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/EmbeddedWalletSecurityMethod.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/EnvironmentEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ErrorMessageWithCode.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ExportEmbeddedWalletResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ExternalAuth.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ExternalAuthSigninRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ExternalWalletFundingDefaultChain.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ExternalWalletFundingDefaultCurrency.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/FarcasterSignInRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/FeatureFlags.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/Forbidden.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ForbiddenErrorPayload.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ForbiddenWithErrorAndPayload.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/NextJsSettings.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ReactSettings.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/FrameworkSettings.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/FundingExternalWalletsMinAmount.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/FundingExternalWallets.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/OnrampProviders.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/Funding.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/PasskeyStorage.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/UserPasskey.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/GetUserPasskeysResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/HCaptchaSettings.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/HardwareWalletProperties.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/HealthcheckStatus.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/HealthcheckResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/InitEmailAuthRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/InitEmailAuthResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/InitPasskeyRecoveryRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/InitPasskeyRecoveryResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/IntegrationSetting.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/InternalServerError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/JwksKey.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/JwksResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/PublicKeyCredentialType.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/PublicKeyCredentialDescriptor.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MFAAuthPasskeyDeviceGetResponseAssertion.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MFADeviceType.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MFAAuthPasskeyDeviceGetResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/PasskeyAuthRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MFAAuthPasskeyDevicePostRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MFAAuthRecoveryDevicePostRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MFAAuthTotpDevicePostRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MFADevice.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MFAGetRecoveryCodesResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MFAListDevicesResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MFARegenRecoveryCodesResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/PublicKeyCredentialParameters.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/PublicKeyCredentialRpEntity.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/PublicKeyCredentialUserEntity.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MFARegisterPasskeyDeviceGetResponseRegistration.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MFARegisterPasskeyDeviceGetResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/PasskeyRegisterVerifyRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MFARegisterPasskeyDevicePostRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MFARegisterTotpDeviceGetResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MFARegisterTotpDevicePostRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MFASettings.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MFAUpdateDeviceRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MergeUser.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MergeUserConflict.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MergeConflicts.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MergeUserConflictResolution.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MergeUserConflictResolutions.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MethodNotAllowed.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MinifiedDynamicJwt.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/MobileSettings.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/NameService.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/NameServiceSdkSettingsEvm.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/NameServiceSdkSettings.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/NativeCurrency.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/Network.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/NetworkConfiguration.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/NetworkConfigurationResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/NextViewEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/NonceResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/NotFound.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/OAuthAccount.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/OauthInitAuthRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/OauthProviderLoginUrl.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/OauthProviderRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/OauthRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/OauthResultRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/OauthResultStatus.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/OauthResultResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/OnrampConfiguration.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/PrefetchRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/PriceData.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProjectSettingsChains.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProjectSettingsDesignButton.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProjectSettingsDesignModal.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProjectSettingsDesignWidget.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProjectSettingsDesign.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProjectSettingsGeneral.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProjectSettingsPrivacy.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProjectSettingsSdkAccountAbstraction.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SignInProviderEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProjectSettingsSdkEmailSignIn.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SupportedSecurityMethod.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SupportedSecurityMethods.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProjectSettingsSdkEmbeddedWallets.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SocialSignInProviderEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SocialSignInProvider.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProjectSettingsSdkSocialSignIn.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProjectSettingsSdkWalletConnect.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SdkViewSectionAlignment.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SdkViewSectionType.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SdkViewSection.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SdkViewType.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SdkView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProjectSettingsSdk.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProjectSettingsSecurity.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProviderAgreement.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProviderMultichainAccountAbstractionProviders.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/Provider.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ProjectSettings.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/PublishEventsEvents.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/PublishEvents.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/RegisterEmbeddedWalletSessionKeyResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/RegisterSessionKeyRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ScanWebsiteUrlRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/ScanWebsiteUrlResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SdkSettingsRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SdkViewUpdateRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SdkViewsResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SimulateEVMTransactionRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SolanaChainType.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SimulateSVMTransactionRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SimulateTransactionResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SimulateUserOpRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SmartWalletProperties.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SmsVerificationCreateRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SmsVerificationCreateResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SmsVerificationRetryRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SmsVerificationVerifyRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SolanaTransactionOptimizationRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SolanaTransactionOptimizationResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/SupportedOnrampsResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/TelegramUser.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/TelegramPostRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/TokenBalance.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/TooManyRequests.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/TurnkeyWalletAccount.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/TurnkeyCreateWalletAccountsRequestBodyParameters.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/TurnkeyCreateWalletAccountsRequestBody.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/TurnkeyDeleteEmbeddedWalletsRequestBodyParameters.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/TurnkeyDeleteEmbeddedWalletsRequestBody.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/TurnkeyWalletProperties.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/Unauthorized.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/UnprocessableEntityErrorCode.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/UnprocessableEntityErrorPayload.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/UnprocessableEntity.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/UpdateRecoveryEmailRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/UpdateSelfResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/UpdateSelfResponseAllOf.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/UpdateUserPasskeyRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/UpgradeEmbeddedWalletToV2Request.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/UserFields.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/UserFieldsCheckEnum.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/UserFieldsCheckParams.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/UserFieldsCheckResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/UserOauthAccessTokenResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/UserWalletSelectionRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/V6UserOp.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/V7UserOp.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/VerifyRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/VerifyResponse.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/VerifyUnlinkRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/models/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/apis/SDKApi.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/apis/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-api-core@0.0.586/node_modules/@dynamic-labs/sdk-api-core/src/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/eventemitter3@5.0.1/node_modules/eventemitter3/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/zod@3.22.4/node_modules/zod/lib/helpers/typeAliases.d.ts","../../HandyWriterzAi/node_modules/.pnpm/zod@3.22.4/node_modules/zod/lib/helpers/util.d.ts","../../HandyWriterzAi/node_modules/.pnpm/zod@3.22.4/node_modules/zod/lib/ZodError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/zod@3.22.4/node_modules/zod/lib/locales/en.d.ts","../../HandyWriterzAi/node_modules/.pnpm/zod@3.22.4/node_modules/zod/lib/errors.d.ts","../../HandyWriterzAi/node_modules/.pnpm/zod@3.22.4/node_modules/zod/lib/helpers/parseUtil.d.ts","../../HandyWriterzAi/node_modules/.pnpm/zod@3.22.4/node_modules/zod/lib/helpers/enumUtil.d.ts","../../HandyWriterzAi/node_modules/.pnpm/zod@3.22.4/node_modules/zod/lib/helpers/errorUtil.d.ts","../../HandyWriterzAi/node_modules/.pnpm/zod@3.22.4/node_modules/zod/lib/helpers/partialUtil.d.ts","../../HandyWriterzAi/node_modules/.pnpm/zod@3.22.4/node_modules/zod/lib/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/zod@3.22.4/node_modules/zod/lib/external.d.ts","../../HandyWriterzAi/node_modules/.pnpm/zod@3.22.4/node_modules/zod/lib/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/zod@3.22.4/node_modules/zod/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/schemas/walletBookSchema.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/schemas/walletSchema.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/schemas/walletConnectSourceSchema.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/schemas/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/helpers/getWalletIconUrl.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/helpers/getWalletBookWallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/helpers/getWalletLinks.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/helpers/getWalletPrimaryColor.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/helpers/renderTemplate.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/helpers/findWalletBookWallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+logger@3.9.13/node_modules/@dynamic-labs/logger/src/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+logger@3.9.13/node_modules/@dynamic-labs/logger/src/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/helpers/logger.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/schemas/walletGroup.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/helpers/getWalletGroup.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/helpers/findWalletGroup.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/helpers/getWalletBookCdnUrl.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/helpers/getBrandIconUrl.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/helpers/findWalletGroupOverride.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/helpers/isWalletMethodSupported.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/helpers/isWalletEventSupported.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/helpers/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/context/WalletBookContext.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/hooks/useWalletBookCdn.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/hooks/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/components/WalletIcon.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/components/WalletBookContextProvider.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/components/BrandIcon.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/components/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-book@3_3d35f9960718a47eee7cb29ff55f9cba/node_modules/@dynamic-labs/wallet-book/src/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+types@3.9.13/node_modules/@dynamic-labs/types/src/otp.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+types@3.9.13/node_modules/@dynamic-labs/types/src/auth.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+types@3.9.13/node_modules/@dynamic-labs/types/src/coinbase.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+types@3.9.13/node_modules/@dynamic-labs/types/src/networks.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+types@3.9.13/node_modules/@dynamic-labs/types/src/oauth/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+types@3.9.13/node_modules/@dynamic-labs/types/src/transaction/transaction.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+types@3.9.13/node_modules/@dynamic-labs/types/src/transaction/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+types@3.9.13/node_modules/@dynamic-labs/types/src/user.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+types@3.9.13/node_modules/@dynamic-labs/types/src/wallets/wallets.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+types@3.9.13/node_modules/@dynamic-labs/types/src/wallets/BaseWallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+types@3.9.13/node_modules/@dynamic-labs/types/src/wallets/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+types@3.9.13/node_modules/@dynamic-labs/types/src/settings.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+types@3.9.13/node_modules/@dynamic-labs/types/src/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+rpc-providers@3.9.13/node_modules/@dynamic-labs/rpc-providers/src/RpcProviders.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+rpc-providers@3.9.13/node_modules/@dynamic-labs/rpc-providers/src/ChainRpcProviders.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+rpc-providers@3.9.13/node_modules/@dynamic-labs/rpc-providers/src/IChainRpcProviders.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+rpc-providers@3.9.13/node_modules/@dynamic-labs/rpc-providers/src/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/WalletBookSingleton.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/WalletConnectorExtension.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/wallets/Wallet/Wallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/wallets/Wallet/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/wallets/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/events/walletConnectorEvents.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/events/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/WalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/IEmailWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/IEmailOTPWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/IPasskeyWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/ITurnkeyWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/ITurnkeyWalletConnectorStamper.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/IAccountAbstractionWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/IBitcoinWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/IHardwareWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/IPhantomRedirectConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/ICoinbaseMPCWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/IWalletConnectConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/ISendBalanceWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/ISessionKeyCompatibleWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/ISMSWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/lib/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/logger.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/ProviderLookup/ProviderLookup.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/ProviderLookup/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/getChainInfo/getChainInfo.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/getChainInfo/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isEmailOTPWalletConnector/isEmailOTPWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isEmailOTPWalletConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isEmailWalletConnector/isEmailWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isEmailWalletConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isTurnkeyWalletConnector/isTurnkeyWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isTurnkeyWalletConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isSameAddress/isSameAddress.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isSameAddress/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isSocialWalletConnector/isSocialWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isSocialWalletConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/encoding.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/getWalletConnectorByKey.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/shouldLowercaseAddress.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/walletConnectDeepLinks/walletConnectDeepLinks.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/walletConnectDeepLinks/performPlatformSpecificConnectionMethod.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/walletConnectDeepLinks/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isEmbeddedConnector/isEmbeddedConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isEmbeddedConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isMagicConnector/isMagicConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isMagicConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isBloctoConnector/isBloctoConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isBloctoConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isPasskeyWalletConnector/isPasskeyWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isPasskeyWalletConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isAccountAbstractionConnector/isAccountAbstractionConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isAccountAbstractionConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isBitcoinConnector/isBitcoinConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isBitcoinConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isHardwareWalletConnector/isHardwareWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isHardwareWalletConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/eventListenerHandlers.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isHex/isHex.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isHex/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isPhantomRedirectConnector/isPhantomRedirectConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isPhantomRedirectConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/getRpcUrlForChain/getRpcUrlForChain.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/getRpcUrlForChain/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isCoinbaseMpcWalletConnector/isCoinbaseMpcWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isCoinbaseMpcWalletConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isWalletConnectConnector/isWalletConnectConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isWalletConnectConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isSendBalanceWalletConnector/isSendBalanceWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isSendBalanceWalletConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isSessionKeyCompatible/isSessionKeyCompatibleWallet/isSessionKeyCompatibleWallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isSessionKeyCompatible/isSessionKeyCompatibleWallet/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isSessionKeyCompatible/isSessionKeyCompatibleWalletConnector/isSessionKeyCompatibleWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isSessionKeyCompatible/isSessionKeyCompatibleWalletConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/isSessionKeyCompatible/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/getMobileExperience/getMobileExperience.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/getMobileExperience/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/utils/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+wallet-connec_7e86d05e717e38148f67023811a4e3a3/node_modules/@dynamic-labs/wallet-connector-core/src/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+multi-wallet@_5657caf822ad3086910988745264b371/node_modules/@dynamic-labs/multi-wallet/src/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+multi-wallet@_5657caf822ad3086910988745264b371/node_modules/@dynamic-labs/multi-wallet/src/utils/message/message.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+multi-wallet@_5657caf822ad3086910988745264b371/node_modules/@dynamic-labs/multi-wallet/src/utils/message/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+multi-wallet@_5657caf822ad3086910988745264b371/node_modules/@dynamic-labs/multi-wallet/src/utils/getEnabledProviders/getEnabledProviders.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+multi-wallet@_5657caf822ad3086910988745264b371/node_modules/@dynamic-labs/multi-wallet/src/utils/getEnabledProviders/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+multi-wallet@_5657caf822ad3086910988745264b371/node_modules/@dynamic-labs/multi-wallet/src/utils/getEnabledWallets/getEnabledWallets.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+multi-wallet@_5657caf822ad3086910988745264b371/node_modules/@dynamic-labs/multi-wallet/src/utils/getEnabledWallets/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+multi-wallet@_5657caf822ad3086910988745264b371/node_modules/@dynamic-labs/multi-wallet/src/utils/getSupportedWallets/getSupportedWallets.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+multi-wallet@_5657caf822ad3086910988745264b371/node_modules/@dynamic-labs/multi-wallet/src/utils/getSupportedWallets/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+multi-wallet@_5657caf822ad3086910988745264b371/node_modules/@dynamic-labs/multi-wallet/src/utils/getSupportedChainsForWalletConnector/getSupportedChainsForWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+multi-wallet@_5657caf822ad3086910988745264b371/node_modules/@dynamic-labs/multi-wallet/src/utils/getSupportedChainsForWalletConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+multi-wallet@_5657caf822ad3086910988745264b371/node_modules/@dynamic-labs/multi-wallet/src/utils/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+multi-wallet@_5657caf822ad3086910988745264b371/node_modules/@dynamic-labs/multi-wallet/src/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/decodeJwt/decodeJwt.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/decodeJwt/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/decodeMinJwt/decodeMinJwt.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/decodeMinJwt/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/types/connectionAndSignature.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/events/auth.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/types/wallets.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/types/dynamicEventsCallbacks.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/types/dynamicHandlers.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/types/embeddedWallets.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/types/general.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/types/localStorage.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/types/ui.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/types/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/chain/getChainIcon.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/chain/getChainDisplayName.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/chain/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/wallet/createWallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/wallet/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/getValueByKey/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/detectBrowser/detectBrowser.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/detectBrowser/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/shortenWalletAddress/shortenWalletAddress.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/shortenWalletAddress/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/debounce/debounce.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/debounce/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/isSSR/isSSR.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/isSSR/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/isDisplayOrderPriorityForWeb3/isDisplayOrderPriorityForWeb3.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/isDisplayOrderPriorityForWeb3/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/isDisplayOrderPriorityForWeb2/isDisplayOrderPriorityForWeb2.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/isDisplayOrderPriorityForWeb2/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/getWalletListItemLabel/getWalletListItemLabel.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/getWalletListItemLabel/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/providerLabel/providerLabel.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/providerLabel/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/validatePassword/validatePassword.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/validatePassword/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/generateRandomPassword/generateRandomPassword.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/generateRandomPassword/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/usingSessionKeys/usingSessionKeys.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/usingSessionKeys/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/hasPendingMfaAction/hasPendingMfaAction.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/hasPendingMfaAction/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/hasPendingRequirements/hasPendingRequirements.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/hasPendingRequirements/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useEffectOnce/useEffectOnce.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useEffectOnce/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useForwardedRef/useForwardedRef.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useForwardedRef/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useDisplayOrderState/useDisplayOrderState.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useDisplayOrderState/useDisplayOrderState.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useDisplayOrderState/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useEmailLoginState/useEmailLoginState.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useEmailLoginState/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/multiWallet/useMultiWalletWidgetState/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/multiWallet/useMultiWalletWidgetState/useMultiWalletWidgetState.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/multiWallet/useMultiWalletWidgetState/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/multiWallet/useVerifyOnAwaitingSignature/useVerifyOnAwaitingSignature.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/multiWallet/useVerifyOnAwaitingSignature/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/multiWallet/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/components/CountrySelector/CountrySelectorDropdown.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/components/CountrySelector/CountrySelector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/components/DialCodePreview/DialCodePreview.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/components/FlagImage/FlagImage.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/hooks/usePhoneInput.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/components/PhoneInput/PhoneInput.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/data/countryData.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/common/applyMask.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/common/isNumeric.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/common/removeNonDigits.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/common/scrollToChild.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/common/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/countryUtils/buildCountryData.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/countryUtils/getActiveFormattingMask.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/countryUtils/getCountry.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/countryUtils/guessCountryByPartialNumber.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/countryUtils/parseCountry.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/countryUtils/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/phoneUtils/addDialCode.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/phoneUtils/formatPhone.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/phoneUtils/getCursorPosition.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/phoneUtils/removeDialCode.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/phoneUtils/toE164.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/phoneUtils/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/utils/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-international-phone@4.2.5_react@18.3.1/node_modules/react-international-phone/dist/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/i18next@23.4.6/node_modules/i18next/typescript/helpers.d.ts","../../HandyWriterzAi/node_modules/.pnpm/i18next@23.4.6/node_modules/i18next/typescript/options.d.ts","../../HandyWriterzAi/node_modules/.pnpm/i18next@23.4.6/node_modules/i18next/typescript/t.d.ts","../../HandyWriterzAi/node_modules/.pnpm/i18next@23.4.6/node_modules/i18next/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/locale/en/translation.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/locale/type.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/locale/locale.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/locale/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+iconic@3.9.13_1e7baec559218b66b77b95b531626832/node_modules/@dynamic-labs/iconic/src/Iconic.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+iconic@3.9.13_1e7baec559218b66b77b95b531626832/node_modules/@dynamic-labs/iconic/src/icons/browsers/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+iconic@3.9.13_1e7baec559218b66b77b95b531626832/node_modules/@dynamic-labs/iconic/src/icons/chains/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+iconic@3.9.13_1e7baec559218b66b77b95b531626832/node_modules/@dynamic-labs/iconic/src/icons/wallets/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+iconic@3.9.13_1e7baec559218b66b77b95b531626832/node_modules/@dynamic-labs/iconic/src/icons/mobile/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+iconic@3.9.13_1e7baec559218b66b77b95b531626832/node_modules/@dynamic-labs/iconic/src/icons/social/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+iconic@3.9.13_1e7baec559218b66b77b95b531626832/node_modules/@dynamic-labs/iconic/src/icons/misc/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+iconic@3.9.13_1e7baec559218b66b77b95b531626832/node_modules/@dynamic-labs/iconic/src/icons/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+iconic@3.9.13_1e7baec559218b66b77b95b531626832/node_modules/@dynamic-labs/iconic/src/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+iconic@3.9.13_1e7baec559218b66b77b95b531626832/node_modules/@dynamic-labs/iconic/src/components/SocialIcon.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+iconic@3.9.13_1e7baec559218b66b77b95b531626832/node_modules/@dynamic-labs/iconic/src/components/getSocialIcon.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+iconic@3.9.13_1e7baec559218b66b77b95b531626832/node_modules/@dynamic-labs/iconic/src/components/findSocialIcon.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+iconic@3.9.13_1e7baec559218b66b77b95b531626832/node_modules/@dynamic-labs/iconic/src/components/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+iconic@3.9.13_1e7baec559218b66b77b95b531626832/node_modules/@dynamic-labs/iconic/src/helpers/getIconicSpriteUrl.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+iconic@3.9.13_1e7baec559218b66b77b95b531626832/node_modules/@dynamic-labs/iconic/src/helpers/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+iconic@3.9.13_1e7baec559218b66b77b95b531626832/node_modules/@dynamic-labs/iconic/src/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getSocialNetworkIcon/getSocialNetworkIcon.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getSocialNetworkIcon/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ThemeContext/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ThemeContext/ThemeContext.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ThemeContext/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/useCustomerCallbacks/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/useCustomerCallbacks/useCustomerCallbacks.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/useCustomerCallbacks/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/types/WalletListViewTabItem.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/types/SettingsOverrides.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/types/SocialSettings.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/types/IDynamicContext.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/types/DynamicContextProps.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/types/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useShowAuthFlow/useShowAuthFlow.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useShowAuthFlow/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useHandleLogout/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useHandleLogout/useHandleLogout.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useHandleLogout/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useNameService/useNameService.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useNameService/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useSelectedWalletConnector/useSelectedWalletConnector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useSelectedWalletConnector/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/usePasskeySuccessPopup/usePasskeySuccessPopup.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/usePasskeySuccessPopup/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useTieCallbacksToEvents/useTieCallbacksToEvents.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useTieCallbacksToEvents/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useMultiWallet/useMultiWallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useMultiWallet/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useConnectWallet/useConnectWallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useGlobalLoading/useGlobalLoading.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useGlobalLoading/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useLocalStorage/useLocalStorage.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useLocalStorage/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useMediaQuery/useMediaQuery.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useMediaQuery/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useOnClickOutside/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/usePreventPageScroll/usePreventPageScroll.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/usePreventPageScroll/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useThrottle/useThrottle.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useThrottle/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/usePrefetch/usePrefetch.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/usePrefetch/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useEffectOnceCondition/useEffectOnceCondition.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useEffectOnceCondition/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/wallets/PhantomLedgerIcon/PhantomLedgerIcon.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/consts/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/logger.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/data.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getAuthToken/getAuthToken.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getAuthToken/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/DynamicContext.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ErrorBoundary/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ErrorBoundary/ErrorBoundary.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ErrorBoundary/ErrorBoundaryContext.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ErrorBoundary/ErrorBoundaryBase.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ErrorBoundary/ErrorBoundaryExclude.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ErrorBoundary/ErrorBoundaryInclude.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ErrorBoundary/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/useDynamicContext/useDynamicContext.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/useDynamicContext/useInternalDynamicContext.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/useDynamicContext/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useDynamicScopes/useDynamicScopes.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useDynamicScopes/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/UserWalletsContext/UserWalletsContext.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/UserWalletsContext/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/types/ClassStyleProps.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/types/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Accordion/components/VerticalAccordion/VerticalAccordion.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Accordion/components/VerticalAccordion/VerticalAccordion.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Accordion/components/VerticalAccordion/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Accordion/components/AccordionItem/AccordionItem.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Accordion/components/AccordionItem/AccordionItem.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Accordion/components/AccordionItem/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Accordion/components/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Accordion/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Alert/Alert.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Alert/Alert.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Alert/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Transition/transition.type.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/AnimatePresence/AnimatePresence.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/AnimatePresence/AnimatePresence.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/AnimatePresence/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/AppOriginTile/AppOriginTile.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/AppOriginTile/AppOriginTile.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/AppOriginTile/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Badge/Badge.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Badge/Badge.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Badge/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Button/Button.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Button/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ChainIcon/ChainIcon.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ChainIcon/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Checkbox/Checkbox.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Checkbox/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Chip/Chip.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Chip/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/CopyButton/CopyButton.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/CopyButton/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Divider/Divider.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Divider/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/DynamicConnectButton/DynamicConnectButton.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/DynamicConnectButton/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/EmailIcon/EmailIcon.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/EmailIcon/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/MfaRecoveryIcon/MfaRecoveryIcon.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/MfaRecoveryIcon/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/EnterTileAnimation/EnterTileAnimation.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/EnterTileAnimation/EnterTileAnimation.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/EnterTileAnimation/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ErrorContainer/ErrorContainer.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ErrorContainer/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/FormFieldLabel/FormFieldLabel.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/FormFieldLabel/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Icon/Icon.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Icon/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IconButton/IconButton.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IconButton/IconButton.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IconButton/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ListTile/ListTile.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ListTile/ListTile.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ListTile/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IconListTile/IconListTile.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IconListTile/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IconWithSpinner/IconWithSpinner.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IconWithSpinner/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IconWithStatus/IconWithStatus.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IconWithStatus/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/InfoItem/InfoItem.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/InfoItem/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/InlineSubmitButton/InlineSubmitButton.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/InlineSubmitButton/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/InlineWidget/components/InlineWidgetButton/InlineWidgetButton.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/InlineWidget/components/InlineWidgetButton/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/InlineWidget/components/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/InlineWidget/InlineWidget.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/InlineWidget/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Input/Input.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Input/Input.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Input/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IsBrowser/IsBrowser.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IsBrowser/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/LogoutButton/LogoutButton.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/LogoutButton/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Popper/Popper.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Popper/Popper/Popper.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/MenuList/Dropdown/Dropdown.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/MenuList/Dropdown/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/MenuList/MenuList/MenuList.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/MenuList/MenuList/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/MenuList/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Modal/Modal.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Modal/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ModalCard/ModalCard.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ModalCard/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ModalHeader/ModalHeader.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ModalHeader/ModalHeader.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ModalHeader/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ModalHeaderBanner/ModalHeaderBanner.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ModalHeaderBanner/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NeedHelpSection/NeedHelpSection.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NeedHelpSection/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/OTPVerificationView/OTPVerificationView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/OTPVerificationView/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PasskeyCreatedSuccessBanner/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PhoneNumberField/usePhoneInputLogic/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PhoneNumberField/PhoneNumberField.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PhoneNumberField/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PinInput/PinInput.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PinField/PinField.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PinField/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Popper/Popper/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Popper/PopperContext/PopperContext.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Popper/PopperContext/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Popper/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useTransition/useTransition.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useTransition/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Portal/Portal.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Portal/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PoweredByDynamic/PoweredByDynamic.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PoweredByDynamic/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/QRCode/QRCode.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/QRCode/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/QrCodeWrapper/QrCodeWrapper.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/QrCodeWrapper/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/RadioButton/RadioButton.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/RadioButton/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/RenderView/RenderView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/RenderView/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SandboxIndicatorWrapper/SandboxIndicatorWrapper.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SandboxIndicatorWrapper/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SecureEmbeddedWalletCard/SecureEmbeddedWalletCard.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SecureEmbeddedWalletCard/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Select/Select.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Select/Select.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Select/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SendBalancePageLayout/SendBalancePageLayout.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SendBalancePageLayout/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Separator/Separator.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Separator/Separator.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Separator/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ShadowDOM/ShadowDOM.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ShadowDOM/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SignMessagePreview/SignMessagePreview.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SignMessagePreview/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Skeleton/Skeleton.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Skeleton/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/LoginWidget.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/EmailSignInSection/LoginEmailForm.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/EmailSignInSection/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/PhoneNumberSignInSection/PhoneNumberSignInSection.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/PhoneNumberSignInSection/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/SocialSignInSection/SocialSignInSection.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/SocialSignInSection/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/ToggleableSection/ToggleableSection.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/ToggleableSection/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/WalletSignInSection/WalletSignInSection.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/WalletSignInSection/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SocialSignIn/SocialSignIn.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SocialSignIn/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Spinner/Spinner.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Spinner/spinner.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Spinner/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Step/Step.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Step/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Stepper/Stepper.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Stepper/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Switch/Switch.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Switch/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SyncAuthFlow/SyncAuthFlow.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SyncAuthFlow/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TextButton/TextButton.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TextButton/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ToggleVisibilityButton/ToggleVisibilityButton.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ToggleVisibilityButton/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Toolkit/Toolkit.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Toolkit/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Tooltip/Tooltip.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Tooltip/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TosAndPp/TosAndPp.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TosAndPp/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TransactionConfirmationPageLayout/TransactionConfirmationPageLayout.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TransactionConfirmationPageLayout/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Transition/ZoomTransition/ZoomTransition.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Transition/SlideInUpTransition/SlideInUpTransition.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Transition/OpacityTransition/OpacityTransition.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Transition/OpacityTransition/OpacityTransition.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Transition/VerticalDrawerTransition/VerticalDrawerTransition.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Transition/VerticalDrawerTransition/VerticalDrawerTransition.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Transition/VerticalDrawerTransition/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Transition/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Typography/Typography.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Typography/Typography.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Typography/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TypographyButton/TypographyButton.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TypographyButton/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/WalletInformationCard/WalletInformationCard.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/WalletInformationCard/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/EmailForm/EmailForm.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/EmailForm/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/StatusDot/StatusDot.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/StatusDot/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/OptionsSwitcher/OptionsSwitcher.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/OptionsSwitcher/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TelegramAutoLogin/TelegramAutoLogin.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TelegramAutoLogin/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/WalletConnectorEvents/WalletConnectorEvents.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/WalletConnectorEvents/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/components/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/DynamicBridgeWidget.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicEmbeddedWidget/EmbedProps.type.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicEmbeddedWidget/DynamicEmbeddedAuthFlow/DynamicEmbeddedAuthFlow.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicEmbeddedWidget/DynamicEmbeddedAuthFlow/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicEmbeddedWidget/DynamicEmbeddedUserProfile/DynamicEmbeddedUserProfile.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicEmbeddedWidget/DynamicEmbeddedUserProfile/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicEmbeddedWidget/DynamicEmbeddedWidget.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicEmbeddedWidget/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/DynamicWidget.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicNav/DynamicNav.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicUserProfile/DynamicUserProfile.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicUserProfile/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/FundingWidget/FundingWidget.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/FundingWidget/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicMultiWalletPromptsWidget/DynamicMultiWalletPromptsWidget.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicMultiWalletPromptsWidget/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/hooks/useMultiWalletPromptState/useMultiWalletPromptState.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/hooks/useMultiWalletPromptState/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/NoQrNotInstalledView/NoQrNotInstalledView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/NoQrNotInstalledView/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/CollectUserDataView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/EmailConfirmationWaitingView/EmailConfirmationWaitingView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/EmailConfirmationWaitingView/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/NoAccess/NoAccess.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/NoAccess/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/PendingSignatureView/PendingSignatureView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/PendingSignatureView/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/QrCodeView/QrCodeView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/QrCodeView/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/WalletList.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/FarcasterConnectView/FarcasterConnectView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/FarcasterConnectView/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/NetworkNotSupportedSwitchManual/NetworkNotSupportedSwitchManual.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/NetworkNotSupportedSwitchManual/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CreatePasswordView/CreatePasswordView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/EmbeddedReveal/EmbeddedRevealView/EmbeddedRevealView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/EmbeddedAuthChoice/EmbeddedAuthChoice.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/GlobalWalletConfirmView/GlobalWalletConfirmView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/GlobalWalletConfirmView/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/GlobalWalletMaliciousView/GlobalWalletMaliciousView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/EmailVerification/EmailVerification.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/parseChainId.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/parseNetworks.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/CustomError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/DynamicError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/AccountExistsError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/ChainalysisError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/SandboxMaximumThresholdReachedError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/EmailAlreadyExistsError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/EmailProviderError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/EmailVerificationError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/GateBlockedError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/InsufficientFundsError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/MissingEnvironmentIdError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/MissingPublicAddressError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/NoAccessError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/NotSupportedError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/PasskeyError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/SmsVerificationError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/SocialAccountAlreadyExistsError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/TransactionGasCannotBeSponsoredError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/UserHasAccountWithEmailError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/UsernameAlreadyExistsError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/WalletNotDeployedError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/WalletUsedError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/UserRejectedTransactionError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/TooManyEmailVerificationsError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/VerificationDataCollectionError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/InvalidPhoneNumberError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/MergeAccountsConfirmationError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/CustomFieldNotUniqueError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/CookieInvalidError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/AccessBlockedError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/EmbeddedWalletException.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/MfaInvalidOtpError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/MfaRateLimitedError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/ExternalAuthError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/WalletAddressMismatchError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/UserRejectedRequestError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/EmbeddedWalletExistsError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/errors/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/CancellablePromise/CancellablePromise.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/CancellablePromise/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/isFunction/isFunction.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/isFunction/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/isMobile.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/localStorageAsync.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/bufferPolyfill.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/bufferToBase64.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/last.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/getProvidersFromWindow.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/sleep/sleep.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/sleep/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/retryableFn.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/wrapMethodWithCallback/wrapMethodWithCallback.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/wrapMethodWithCallback/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/DeferredPromise/DeferredPromise.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/DeferredPromise/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/handleMobileWalletRedirect/handleMobileWalletRedirect.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/handleMobileWalletRedirect/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/uniq/uniq.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/uniq/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/getTLD/getTLD.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/getTLD/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/pipe/pipe.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/pipe/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/formatNumberText/formatNumberText.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/formatNumberText/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/ceil/ceil.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/ceil/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/trimEnd/trimEnd.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/trimEnd/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/isLedgerAddressViaVerifiedCredentials.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/nativeMobileOauthStateParam.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/eip6963/eip6963Provider.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/eip6963/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/runSafe/runSafe.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/runSafe/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/services/PlatformService/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/services/PlatformService/PlatformService.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/services/PlatformService/createBrowserPlatformService/createBrowserPlatformService.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/services/PlatformService/createBrowserPlatformService/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/services/PlatformService/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/services/FetchService/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/services/FetchService/FetchService.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/services/FetchService/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/services/Oauth2Service/Oauth2Service.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/services/Oauth2Service/createWindowOauth2Service/createWindowOauth2Service.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/services/Oauth2Service/createWindowOauth2Service/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/services/Oauth2Service/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/template/template.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/template/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/get/get.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/get/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/hexToString/hexToString.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/hexToString/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/isHex/isHex.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/isHex/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/services/StorageService/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/services/StorageService/StorageService.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/services/StorageService/createStorageService/createStorageService.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/services/StorageService/createStorageService/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/services/StorageService/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/cloneObjectWithOverrides/cloneObjectWithOverrides.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/cloneObjectWithOverrides/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/isInIframe/isInIframe.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/isInIframe/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+utils@3.9.13/node_modules/@dynamic-labs/utils/src/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MergeUserAccountsView/MergeUserAccountsView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MergeUserAccountsConflictsView/MergeUserAccountsConflictsView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ViewContext/types/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ViewContext/ViewContext.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ViewContext/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MergeUserAccountsWithSameEmailView/MergeUserAccountsWithSameEmailView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaChooseDeviceView/MfaChooseDeviceView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaChooseDeviceView/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaSecureDeviceView/MfaSecureDeviceView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaSecureDeviceView/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaVerificationView/MfaVerificationView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaVerificationView/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyRecovery/AddRecoveryEmail/AddRecoveryEmail.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyRecovery/BundleValidation/PasskeyBundleRecovery.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyRecovery/CompleteRecovery/PasskeyCompleteRecovery.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyRecovery/InitRecovery/PasskeyInitRecovery.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/viewToComponentMap.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/views/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/MockContext/MockContext.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/MockContext/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ThemeContext/themesData.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/events/embeddedWallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/events/otp.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/events/passkey.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/events/social.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/events/ui.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/events/wallets.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/events/multiWallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/events/tokenBalances.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/events/dynamicEvents.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/events/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/mergeNetworks/mergeNetworks.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/mergeNetworks/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/classNames/classNames.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/classNames/classNames.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/classNames/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getNetwork/getNetwork.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getNetwork/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/walletFilters/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/ConnectedAppsView/ConnectedAppsView.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/context/DynamicWidgetContext.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/context/DynamicWidgetContext.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/context/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/events/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/events/useDynamicEvents/useDynamicEvents.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/events/useDynamicEvents/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/events/useWalletConnectorEvent/useWalletConnectorEvent.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/events/useWalletConnectorEvent/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/events/useWindowEvent/useWindowEvent.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/events/useWindowEvent/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/events/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useAuthenticateConnectedUser/useAuthenticateConnectedUser.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useAuthenticateConnectedUser/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useColorSchemePreference/useColorSchemePreference.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useColorSchemePreference/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useConfirmationModal/useConfirmationModal.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useConfirmationModal/useConfirmationModal.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useConfirmationModal/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useCountdown/useCountdown.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useCreateDynamicEmbeddedWalletMutation/useCreateDynamicEmbeddedWalletMutation.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useCreateDynamicEmbeddedWalletMutation/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useElementById/useElementById.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useElementById/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useFetchNonce/useFetchNonce.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useFetchNonce/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useFindSocialIcon/useFindSocialIcon.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useFindSocialIcon/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useForceUpdate/useForceUpdate.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useForceUpdate/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useIconThemeVariant/useIconThemeVariant.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useIconThemeVariant/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useInterval/useInterval.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useIsFirstRender/useIsFirstRender.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useIsFirstRender/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useIsLoggedIn/useIsLoggedIn.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useIsLoggedIn/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/email/email.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/email/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/embeddedWallets/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/embeddedWallets/embeddedWallets.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/embeddedWallets/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/externalAuth/externalAuth.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/externalAuth/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/mfa/mfa.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/mfa/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/oauth/oauth.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/oauth/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/onramp/onramp.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/onramp/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/session/session.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/session/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/settings/settings.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/settings/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/sms/sms.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/sms/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/user/user.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/user/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/utils.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/wallets/wallets.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/wallets/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserUpdateRequest/useUpdateUser/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useHandleVerificationRequired/useHandleVerificationRequired.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useHandleVerificationRequired/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useIsomorphicLayoutEffect/useIsomorphicLayoutEffect.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useKYCFlag/useKYCFlag.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useKYCFlag/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useKeyboardHeight/useKeyboardHeight.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useKeyboardHeight/useKeyboardHeight.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useKeyboardHeight/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useMutation/useMutation.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useMutation/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useOnUnmount/useOnUnmount.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useOnUnmount/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/usePasskeyRecovery/usePasskeyRecovery.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/usePasskeyRecovery/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/usePrevious/usePrevious.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/usePrevious/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/usePromise/usePromise.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/usePromise/usePromise.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/usePromise/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useResizeObserver/useResizeObserver.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useResizeObserver/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSetWalletConnectorVerifiedCredentials/useSetWalletConnectorVerifiedCredentials.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSetWalletConnectorVerifiedCredentials/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSocialAccounts/useSocialAccounts.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSocialAccounts/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useTimeout/useTimeout.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUpdateEffect/useUpdateEffect.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUpdateEffect/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/Reference.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/Condition.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/ValidationError.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/util/createValidation.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/util/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/util/ReferenceSet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/schema.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/Lazy.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/locale.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/mixed.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/boolean.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/string.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/number.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/date.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/object.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/array.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/util/reach.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/util/isSchema.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/setLocale.d.ts","../../HandyWriterzAi/node_modules/.pnpm/yup@0.32.11/node_modules/yup/lib/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/formik@2.2.9_react@18.3.1/node_modules/formik/dist/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/formik@2.2.9_react@18.3.1/node_modules/formik/dist/Formik.d.ts","../../HandyWriterzAi/node_modules/.pnpm/formik@2.2.9_react@18.3.1/node_modules/formik/dist/Field.d.ts","../../HandyWriterzAi/node_modules/.pnpm/formik@2.2.9_react@18.3.1/node_modules/formik/dist/Form.d.ts","../../HandyWriterzAi/node_modules/.pnpm/formik@2.2.9_react@18.3.1/node_modules/formik/dist/withFormik.d.ts","../../HandyWriterzAi/node_modules/.pnpm/formik@2.2.9_react@18.3.1/node_modules/formik/dist/FieldArray.d.ts","../../HandyWriterzAi/node_modules/.pnpm/formik@2.2.9_react@18.3.1/node_modules/formik/dist/utils.d.ts","../../HandyWriterzAi/node_modules/.pnpm/formik@2.2.9_react@18.3.1/node_modules/formik/dist/connect.d.ts","../../HandyWriterzAi/node_modules/.pnpm/formik@2.2.9_react@18.3.1/node_modules/formik/dist/ErrorMessage.d.ts","../../HandyWriterzAi/node_modules/.pnpm/formik@2.2.9_react@18.3.1/node_modules/formik/dist/FormikContext.d.ts","../../HandyWriterzAi/node_modules/.pnpm/formik@2.2.9_react@18.3.1/node_modules/formik/dist/FastField.d.ts","../../HandyWriterzAi/node_modules/.pnpm/formik@2.2.9_react@18.3.1/node_modules/formik/dist/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserDataForm/useUserDataForm.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserDataForm/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserUpdateRequest/useUpdateUserWithModal/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserUpdateRequest/useUpdateUserWithModal/useUpdateUserWithModal.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserUpdateRequest/useUpdateUserWithModal/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserUpdateRequest/useUserUpdateRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserUpdateRequest/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useRpcProviders/useRpcProviders.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useRpcProviders/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useValidateSession/useValidateSession.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useValidateSession/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useVerifyWallet/useVerifyWallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useVerifyWallet/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useCreateWalletConnectorOptions/useCreateWalletConnectorOptions.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useCreateWalletConnectorOptions/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectors/useWalletConnectors.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectors/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletItemActions/useWalletItemActions.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletItemActions/useWalletItemActions.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletItemActions/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletUiUtils/useWalletUiUtils.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletUiUtils/useWalletUiUtils.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletUiUtils/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedReveal/useEmbeddedReveal.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedReveal/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectorNetwork/useWalletConnectorNetwork.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectorNetwork/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useInitEmbeddedWalletAuthMethod/useInitEmbeddedWalletAuthMethod.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useInitEmbeddedWalletAuthMethod/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWalletAuthenticator/useEmbeddedWalletAuthenticator.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWalletAuthenticator/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useViewSettings/useViewSettings.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useViewSettings/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWalletPassword/useEmbeddedWalletPassword.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWalletPassword/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSetWalletConnectorFetchers/useSetWalletConnectorFetchers.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSetWalletConnectorFetchers/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useNetworkDataFromWallet/useNetworkDataFromWallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useNetworkDataFromWallet/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useDynamicModals/useDynamicModals.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useDynamicModals/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSendDynamicProps/useSendDynamicProps.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSendDynamicProps/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useNetworkNotSupported/useNetworkNotSupported.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useNetworkNotSupported/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useHandleAuthenticatedUser/useHandleAuthenticatedUser.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useHandleAuthenticatedUser/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useMfa/useMfa.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useMfa/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useMergeUserAccounts/useMergeUserAccounts.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useMergeUserAccounts/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useTokenBalances/useTokenBalances.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useTokenBalances/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserAuth/useUserAuth.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserAuth/useUserAuth.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserAuth/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSwitchWallet/useSwitchWallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSwitchWallet/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSyncEmbeddedWalletFlow/useSyncEmbeddedWalletFlow.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSyncEmbeddedWalletFlow/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSyncOnboardingFlow/useSyncOnboardingFlow.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSyncOnboardingFlow/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useExternalAuth/useExternalAuth.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useExternalAuth/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useRefreshUser/useRefreshUser.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useRefreshUser/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletOptions/useWalletOptions.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletOptions/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSyncMfaFlow/useSyncMfaFlow.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSyncMfaFlow/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSmartWallets/useSmartWallets.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSmartWallets/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWalletSessionKeys/useEmbeddedWalletSessionKeys.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWalletSessionKeys/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useTelegramLogin/useTelegramLogin.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useTelegramLogin/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useDebounce/useDebounce.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useDebounce/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useEmbeddedWallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/useSecureEnclaveEmbeddedWallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/useTurnkey/useTurnkey.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/useTurnkey/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useMPCEmbeddedWallet/useMPCEmbeddedWallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useMPCEmbeddedWallet/useCoinbaseMPC/useCoinbaseMPC.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useMPCEmbeddedWallet/useCoinbaseMPC/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useMPCEmbeddedWallet/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUpgradeEmbeddedWallet/useUpgradeEmbeddedWallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUpgradeEmbeddedWallet/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useAggregateWalletEvents/useAggregateWalletEvents.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useAggregateWalletEvents/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useRefreshUserState/useRefreshUserState.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useRefreshUserState/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/authenticationHooks/useConnectAndSign/useConnectAndSign.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/authenticationHooks/useConnectAndSign/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/authenticationHooks/useSignConnectOnlyUser/useSignConnectOnlyUser.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/authenticationHooks/useSignConnectOnlyUser/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/authenticationHooks/useConnectAndSignSplitSteps/useConnectAndSignSplitSteps.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/authenticationHooks/useConnectAndSignSplitSteps/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/authenticationHooks/useOtpVerificationRequest/useOtpVerificationRequest.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/authenticationHooks/useOtpVerificationRequest/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/authenticationHooks/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/SendBalanceContext/SendBalanceContext.types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/SendBalanceContext/SendBalanceContext.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/SendBalanceContext/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/FundingContext/FundingContext.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/FundingContext/useFunding/useFunding.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/FundingContext/useFunding/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/FundingContext/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ConnectWithOtpContext/ConnectWithOtpProvider.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ConnectWithOtpContext/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ConnectWithOtpContext/useConnectWithOtp.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ConnectWithOtpContext/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSwitchNetwork/useSwitchNetwork.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSwitchNetwork/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ReinitializeContext/ReinitializeContextProvider.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ReinitializeContext/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/api.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isAuthenticatedWithAWallet/isAuthenticatedWithAWallet.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isAuthenticatedWithAWallet/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@dynamic-labs+sdk-react-cor_e543ff02e7e768f6e2ce7408555dbfac/node_modules/@dynamic-labs/sdk-react-core/src/index.d.ts","./src/lib/dynamic.ts","./src/services/advancedApiClient.ts","./src/types/multimodal.ts","./src/services/multimodal-processor.ts","../../HandyWriterzAi/node_modules/.pnpm/zustand@5.0.6_@types+react@_1f85a288ccc428358582928657b02c63/node_modules/zustand/esm/middleware/redux.d.mts","../../HandyWriterzAi/node_modules/.pnpm/zustand@5.0.6_@types+react@_1f85a288ccc428358582928657b02c63/node_modules/zustand/esm/middleware/devtools.d.mts","../../HandyWriterzAi/node_modules/.pnpm/zustand@5.0.6_@types+react@_1f85a288ccc428358582928657b02c63/node_modules/zustand/esm/middleware/subscribeWithSelector.d.mts","../../HandyWriterzAi/node_modules/.pnpm/zustand@5.0.6_@types+react@_1f85a288ccc428358582928657b02c63/node_modules/zustand/esm/middleware/combine.d.mts","../../HandyWriterzAi/node_modules/.pnpm/zustand@5.0.6_@types+react@_1f85a288ccc428358582928657b02c63/node_modules/zustand/esm/middleware/persist.d.mts","../../HandyWriterzAi/node_modules/.pnpm/zustand@5.0.6_@types+react@_1f85a288ccc428358582928657b02c63/node_modules/zustand/esm/middleware.d.mts","../../HandyWriterzAi/node_modules/.pnpm/immer@10.1.1/node_modules/immer/dist/immer.d.ts","../../HandyWriterzAi/node_modules/.pnpm/zustand@5.0.6_@types+react@_1f85a288ccc428358582928657b02c63/node_modules/zustand/esm/middleware/immer.d.mts","./src/store/usePrefs.ts","./src/types/components.ts","./src/types/index.ts","./tests/e2e/user-journey.spec.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/compiled/@next/font/dist/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/dist/compiled/@next/font/dist/google/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/next@15.4.2_@babel+core@7.2_e72179016449a0ac16e31606eb8e30be/node_modules/next/font/google/index.d.ts","./src/contexts/ThemeContext.tsx","./src/components/ui/toaster.tsx","./src/app/layout.tsx","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-slot@1.2.3_@types+react@18.3.23_react@18.3.1/node_modules/@radix-ui/react-slot/dist/index.d.mts","./src/components/ui/button.tsx","./src/components/ui/card.tsx","./src/components/ui/badge.tsx","./src/app/page.tsx","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-separator@1_a935beed276764a445ba167cf5230d34/node_modules/@radix-ui/react-separator/dist/index.d.mts","./src/components/ui/separator.tsx","./src/app/auth/page.tsx","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-scroll-area_cc6fbe91ffbba1c09a091d92635630aa/node_modules/@radix-ui/react-scroll-area/dist/index.d.mts","./src/components/ui/scroll-area.tsx","./src/components/ActivityTimeline.tsx","./src/components/WelcomeScreen.tsx","./src/components/StreamingStatus.tsx","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-focus-scope_f761c2ff2dd8a5cebf4e03dd795af57f/node_modules/@radix-ui/react-focus-scope/dist/index.d.mts","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-arrow@1.1.7_e9e31f839ccc03b965a9c76fb12e37fb/node_modules/@radix-ui/react-arrow/dist/index.d.mts","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+rect@1.1.1/node_modules/@radix-ui/rect/dist/index.d.mts","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-popper@1.2._ffa2341e59ce9c78f0d0d849ccd75e57/node_modules/@radix-ui/react-popper/dist/index.d.mts","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-portal@1.1._6c1cd0a6f7cc4779efee75f9fbbe7053/node_modules/@radix-ui/react-portal/dist/index.d.mts","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-roving-focu_6f0d671e87aca0440bc028a3a4162dc7/node_modules/@radix-ui/react-roving-focus/dist/index.d.mts","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-menu@2.1.15_fdc5c6ad9588e9f7f12c779229676662/node_modules/@radix-ui/react-menu/dist/index.d.mts","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-dropdown-me_8ec93851da28661231dcc925c4c21d7f/node_modules/@radix-ui/react-dropdown-menu/dist/index.d.mts","./src/components/ui/dropdown-menu.tsx","./src/components/DownloadMenu.tsx","./src/components/ResponseActions.tsx","./src/components/MessageBubble.tsx","./src/components/EnhancedChatView.tsx","./src/components/ui/tooltip.tsx","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-dialog@1.1._979338a14129bfbd4b93c15b369f3450/node_modules/@radix-ui/react-dialog/dist/index.d.mts","./src/components/ui/dialog.tsx","./src/components/ThemeSelector.tsx","./src/components/ui/input.tsx","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-progress@1._953a9c17bf8fafcb57fcdd391d84f7ef/node_modules/@radix-ui/react-progress/dist/index.d.mts","./src/components/ui/progress.tsx","./src/components/SettingsModal.tsx","./src/components/CollapsedSidebar.tsx","./src/components/ExpandedSidebar.tsx","./src/components/Sidebar.tsx","./src/components/ChatHeader.tsx","./src/components/ui/textarea.tsx","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-popover@1.1_58d720829f82e8d062ec070fb7840cdf/node_modules/@radix-ui/react-popover/dist/index.d.mts","./src/components/ui/popover.tsx","./src/components/MessageInputBar.tsx","./src/app/chat/page.tsx","./src/components/ui/AgentActivityDisplay.tsx","./src/app/dashboard/page.tsx","./src/components/ui/table.tsx","./src/app/library/page.tsx","./src/app/originality/[traceId]/page.tsx","./src/app/payment/cancel/page.tsx","./src/components/PaymentSuccess.tsx","./src/app/payment/success/page.tsx","./src/app/performance/page.tsx","./src/app/pricing/page.tsx","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-label@2.1.7_69050205ca3d2aecc0d76a03e1b44443/node_modules/@radix-ui/react-label/dist/index.d.mts","./src/components/ui/label.tsx","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-tabs@1.1.12_039f4c9042ddc46bc6b9dbdec180c93a/node_modules/@radix-ui/react-tabs/dist/index.d.mts","./src/components/ui/tabs.tsx","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-avatar@1.1._bda864f04f6839bc5ab9cf2fb31ea21d/node_modules/@radix-ui/react-avatar/dist/index.d.mts","./src/components/ui/avatar.tsx","./src/app/profile/page.tsx","./src/app/routing/page.tsx","./src/app/settings/page.tsx","./src/components/PaymentDialog.tsx","./src/components/BillingPanel.tsx","./src/app/settings/billing/page.tsx","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-select@2.2._74ff1e179f6928d61bde19586f0439bf/node_modules/@radix-ui/react-select/dist/index.d.mts","./src/components/ui/select.tsx","./src/components/LocaleSelect.tsx","./src/app/settings/general/page.tsx","./src/app/settings/security/page.tsx","./src/app/settings/usage/page.tsx","./src/app/test/page.tsx","./src/components/AgentActivityStream.tsx","./src/components/CTA.tsx","./src/components/ChatHistory.tsx","../../HandyWriterzAi/node_modules/.pnpm/react-error-boundary@6.0.0_react@18.3.1/node_modules/react-error-boundary/dist/declarations/src/types.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-error-boundary@6.0.0_react@18.3.1/node_modules/react-error-boundary/dist/declarations/src/ErrorBoundaryContext.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-error-boundary@6.0.0_react@18.3.1/node_modules/react-error-boundary/dist/declarations/src/ErrorBoundary.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-error-boundary@6.0.0_react@18.3.1/node_modules/react-error-boundary/dist/declarations/src/useErrorBoundary.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-error-boundary@6.0.0_react@18.3.1/node_modules/react-error-boundary/dist/declarations/src/withErrorBoundary.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-error-boundary@6.0.0_react@18.3.1/node_modules/react-error-boundary/dist/declarations/src/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-error-boundary@6.0.0_react@18.3.1/node_modules/react-error-boundary/dist/react-error-boundary.d.ts","../../HandyWriterzAi/node_modules/.pnpm/file-selector@2.1.2/node_modules/file-selector/dist/file.d.ts","../../HandyWriterzAi/node_modules/.pnpm/file-selector@2.1.2/node_modules/file-selector/dist/file-selector.d.ts","../../HandyWriterzAi/node_modules/.pnpm/file-selector@2.1.2/node_modules/file-selector/dist/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-dropzone@14.3.8_react@18.3.1/node_modules/react-dropzone/typings/react-dropzone.d.ts","./src/components/ui/FileTile.tsx","./src/components/ui/ContextUploader.tsx","./src/components/chat/MicButton.tsx","./src/components/InputForm.tsx","./src/components/ChatMessagesView.tsx","./src/components/ChatSidebar.tsx","./src/components/ErrorBoundary.tsx","./src/components/FeatureCard.tsx","./src/components/FeatureGrid.tsx","./src/components/Footer.tsx","./src/components/Header.tsx","./src/components/Hero.tsx","./src/components/HowItWorks.tsx","./src/components/ImprovedInputForm.tsx","./src/components/ImprovedSidebar.tsx","./src/components/nav/Sidebar.tsx","./src/components/LayoutManager.tsx","../../HandyWriterzAi/node_modules/.pnpm/next-themes@0.4.6_react-dom_ea2b9ae5ba4104b1d67ca3475ba7dfc2/node_modules/next-themes/dist/index.d.ts","./src/components/ThemeToggle.tsx","./src/components/providers.tsx","./src/components/admin/ModelConfigPanel.tsx","./src/components/agent/AgentOrchestrationDashboard.tsx","./src/components/chat/ContextUploadMenu.tsx","./src/components/chat/CostMeter.tsx","./src/components/upload/RevolutionaryFileUploader.tsx","./src/components/chat/DemoReadyChatInterface.tsx","./src/components/chat/DownloadMenu.tsx","./src/components/chat/OptimizedFileUpload.tsx","../../HandyWriterzAi/node_modules/.pnpm/react-textarea-autosize@8.5_66c9cec4bc73c43bdf4a356162795b22/node_modules/react-textarea-autosize/dist/declarations/src/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-textarea-autosize@8.5_66c9cec4bc73c43bdf4a356162795b22/node_modules/react-textarea-autosize/dist/react-textarea-autosize.cjs.default.d.ts","../../HandyWriterzAi/node_modules/.pnpm/react-textarea-autosize@8.5_66c9cec4bc73c43bdf4a356162795b22/node_modules/react-textarea-autosize/dist/react-textarea-autosize.cjs.d.mts","./src/components/chat/PromptEditor.tsx","./src/components/ui/skeleton.tsx","./src/components/nav/UserPopover.tsx","./src/components/ui/FileUploadZone.tsx","../../HandyWriterzAi/node_modules/.pnpm/@radix-ui+react-context-men_a1bb43af3286f708f03fc30a44125e47/node_modules/@radix-ui/react-context-menu/dist/index.d.mts","./src/components/ui/context-menu.tsx","./src/contexts/UserContext.tsx","../../HandyWriterzAi/node_modules/.pnpm/@types+dom-speech-recognition@0.0.6/node_modules/@types/dom-speech-recognition/index.d.ts","../../HandyWriterzAi/node_modules/.pnpm/@types+react-speech-recognition@3.9.6/node_modules/@types/react-speech-recognition/index.d.ts"],"fileIdsList":[[84,98,141],[84,98,141,1065],[98,141,1057,1065],[98,141,1066,1067,1068],[98,141],[98,141,1070],[98,141,1057],[98,141,1058,1059,1060,1061,1062,1063],[98,141,1057,1064,1069,1071],[98,141,804,828],[98,141,947,958],[98,141,803,847,860,864,946],[98,141,803],[98,141,950],[98,141,946,947],[98,141,952],[98,141,847,946],[98,141,956],[98,141,947],[98,141,954],[98,141,949,951,953,955,957],[98,141,948],[98,141,946],[98,141,860,861,864],[98,141,862],[98,141,860],[98,141,861,862,863],[98,141,552,800],[98,141,801],[98,141,552,800,802],[98,141,553,554],[98,141,558],[98,141,563,565,566],[98,141,583,584,589],[98,141,578],[98,141,594],[98,141,557,582,592],[98,141,598,599,600],[98,141,597],[98,141,601],[98,141,599],[98,141,572,599,605,606],[98,141,609],[98,141,611],[98,141,586],[98,141,614],[98,141,583,589,616,617,618],[98,141,572],[98,141,578,629],[98,141,634,643],[98,141,645,646],[98,141,649,650],[98,141,638,639,648],[98,141,653],[98,141,577],[98,141,657],[98,141,665],[98,141,571,582],[98,141,571,592],[98,141,570,571,572,574,581,582],[98,141,669,670],[98,141,560,566,668],[98,141,672],[98,141,603],[98,141,670],[98,141,676],[98,141,670,683],[98,141,556,560,567,668,680,681,682],[98,141,685],[98,141,629,692],[98,141,589,691],[98,141,588],[98,141,694],[98,141,618],[98,141,700],[98,141,699,702],[98,141,704],[98,141,715],[98,141,561,562,563,667],[98,141,561,563,564,667],[98,141,568],[98,141,592],[98,141,589,633,705,720,724,725,726,742,743,746],[98,141,703],[98,141,721,722,723],[98,141,585,587,588],[98,141,632,641,651,698,701,727,729,732,735,736,741],[98,141,728],[98,141,576,591,615,731],[98,141,728,734],[98,141,559,615,636,655,689],[98,141,572,575,579,580,605,744,745],[98,141,667],[98,141,748],[98,141,647],[98,141,739,740],[98,141,737,738],[98,141,739],[98,141,741],[98,141,758],[98,141,555,719],[98,141,575,579,580],[98,141,733],[98,141,717],[98,141,730],[98,141,770],[98,141,775],[98,141,774],[98,141,777],[98,141,608],[98,141,576],[98,141,781,782],[98,141,572,693],[98,141,622,629,706,764],[98,141,622,706,764],[98,141,584],[98,141,790],[98,141,652],[98,141,574,578,582,592,712],[98,141,629],[98,141,573],[98,141,575,576,577,578,579,580],[98,141,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799],[98,141,548,550,551,803,860,946,1056,1075,1126,1127,1129,1131,1138,1141,1143,1145,1350,1369,1371,1503,1508,1521,1523,1524,1533,1534,1536,1539,1541,1542,1546,1549,1732,1738,1764,1773,1776,1780,1784,1786,1788,1789,1791],[84,98,141,1151],[98,141,1152],[98,141,1148],[84,98,141,1147],[98,141,1149],[98,141,1150,1153],[98,141,1154],[98,141,1156],[84,98,141,1126],[98,141,1157],[98,141,1160],[84,98,141,1159],[98,141,1160,1161],[98,141,1163],[98,141,1164],[84,98,141,1126,1166],[98,141,1167],[98,141,1169],[84,98,141,946],[98,141,1171],[98,141,1173],[98,141,1175],[84,98,141,1126,1169],[98,141,1177],[98,141,1179],[98,141,1181],[98,141,1340],[98,141,1183],[98,141,1187],[98,141,1188],[98,141,1190],[98,141,1192],[98,141,1194],[84,98,141,1196],[98,141,1196,1197],[98,141,1201],[98,141,1202],[84,98,141,1072,1126],[98,141,1204],[98,141,1206],[98,141,1208],[98,141,1210],[98,141,1212],[98,141,1213],[98,141,1214,1215],[84,98,141,1126,1217],[98,141,1218],[98,141,1220],[98,141,1199],[98,141,1199,1200],[98,141,1222],[84,98,141,1225],[98,141,1226],[98,141,1228],[98,141,1227,1229],[98,141,1185],[98,141,1231],[98,141,1233],[98,141,1235],[98,141,1236],[98,141,1238],[98,141,1240],[98,141,1242],[98,141,1344],[98,141,1078],[84,98,141,1048,1246],[98,141,1247],[98,141,1245],[84,98,141,1048],[84,98,141,1249],[98,141,1250],[84,98,141,1224],[98,141,1225],[98,141,1253],[98,141,1252,1254],[84,98,141,1257],[98,141,1258],[98,141,1260],[98,141,1262],[98,141,1264],[98,141,1266],[98,141,1268],[98,141,1270],[98,141,1272],[98,141,1274],[98,141,1274,1275],[84,98,141,803,860],[98,141,1277],[98,141,1279],[98,141,1280],[98,141,1282],[98,141,1284],[98,141,1286],[84,98,141,803,1299],[98,141,1300],[98,141,1303],[98,141,1302],[98,141,1342],[98,141,1305],[98,141,1307],[98,141,1309],[98,141,1311],[98,141,1346],[98,141,1313],[98,141,1315],[98,141,1317],[98,141,1319],[98,141,1321],[84,98,141,803,860,946,1126],[98,141,1323],[84,98,141,1327],[98,141,1329],[98,141,1330],[98,141,1325,1326,1328,1331],[98,141,1333],[84,98,141,1126,1147],[98,141,1334],[84,98,141,1126,1169,1333],[98,141,1336],[98,141,1348],[98,141,1338],[98,141,1155,1158,1162,1165,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,1189,1191,1193,1195,1198,1201,1203,1205,1207,1209,1211,1216,1219,1221,1223,1230,1232,1234,1237,1239,1241,1243,1244,1248,1251,1255,1259,1261,1263,1265,1267,1269,1271,1273,1276,1278,1281,1283,1285,1287,1301,1304,1306,1308,1310,1312,1314,1316,1318,1320,1322,1324,1332,1335,1337,1339,1341,1343,1345,1347,1349],[98,141,1781,1783],[98,141,1782],[84,98,141,1087],[98,141,1013,1015,1089,1092,1094,1096,1098,1100,1102],[98,141,1011,1012],[98,141,803,1011],[98,141,1014],[98,141,1091],[84,98,141,860,946,1021,1087,1089,1126],[98,141,1090],[98,141,1101],[98,141,1093],[98,141,803,1126,1792],[98,141,1097],[98,141,1095],[98,141,1088],[98,141,1099],[98,141,860,1126],[98,141,1087,1130],[84,98,141,829,860,946,968,1048,1056,1074,1077,1083,1084,1085,1126],[84,98,141,803,860,946,968,1021,1048,1052,1074,1077,1078,1081,1082,1083,1084,1103,1104,1126],[98,141,803,860,946,1082],[84,98,141,966],[98,141,1082,1083,1084,1085,1086],[98,141,1079,1080],[98,141,803,860,973],[98,141,1079],[98,141,1139,1140],[98,141,1131],[84,98,141,1132],[84,98,141,1132,1134],[98,141,1135],[98,141,1133,1136,1137],[98,141,1777,1779],[98,141,1778],[84,98,141,1077,1126,1508],[98,141,1522],[98,141,1787],[84,98,141,1774],[98,141,1775],[84,98,141,803,1075],[98,141,1075,1076],[98,141,803,1075],[98,141,1144],[84,98,141,1506],[98,141,1506,1507],[84,98,141,1520],[98,141,1580],[98,141,803,1582,1792],[98,141,1582,1583],[98,141,803,946],[98,141,1792],[98,141,1585],[98,141,1581,1584,1586,1588,1590,1592,1594,1596,1598,1600,1601,1603],[98,141,1587],[98,141,1589],[98,141,803,1792],[98,141,1591],[98,141,1593],[98,141,803,973],[98,141,1595],[98,141,1597],[98,141,1599],[98,141,1602],[98,141,803,973,1792],[98,141,1604],[98,141,804,965,1525,1526,1527,1528,1529,1530,1531,1532],[98,141,803,966,1792],[98,141,1530,1533],[98,141,966],[98,141,946,966],[98,141,1053,1054,1055],[98,141,1052,1054],[98,141,1053],[98,141,485,1122],[98,141,973],[98,141,973,1121,1123,1124,1125],[98,141,829],[98,141,803,860,965,966],[98,141,860,966],[98,141,964,966,967,968,969,970,971,972],[98,141,974,975],[98,141,984],[98,141,960],[98,141,962],[98,141,980],[98,141,998],[98,141,549],[98,141,992],[98,141,1002],[98,141,1004],[98,141,961,963,976,978,979,981,983,985,987,989,991,993,995,997,999,1001,1003,1005],[98,141,990],[98,141,988],[98,141,986],[98,141,994],[98,141,982],[98,141,1000],[98,141,996],[98,141,847,946,973],[98,141,977],[98,141,1008,1010,1106,1108,1110,1111,1113,1115,1117,1119],[98,141,1007],[98,141,1118],[98,141,1009],[98,141,1105],[98,141,803,847,860,973,1104],[98,141,1107],[98,141,1109],[98,141,1116],[98,141,1112],[98,141,1114],[98,141,1006,1120],[98,141,1537],[98,141,1538],[98,141,1128],[98,141,1540],[98,141,1072],[98,141,1073],[98,141,1790],[98,141,1535],[98,141,946,1126],[98,141,1766,1768,1770,1772],[98,141,1765],[98,141,1769],[98,141,1771],[98,141,860,1764],[98,141,1767],[98,141,1549,1551,1553],[98,141,1548],[98,141,965,1525,1526,1527,1529,1530,1531,1534,1547],[98,141,1550],[98,141,946,1547],[98,141,1552],[98,141,1143,1257,1554,1556,1558,1561,1562,1564,1566,1568,1570,1572,1574,1575,1577,1579,1609,1610,1612,1615,1617,1619,1621,1623,1626,1628,1630,1632,1633,1635,1670,1675,1677,1679,1681,1683,1685,1688,1691,1693,1695,1697,1699,1701,1703,1705,1707,1709,1711,1713,1715,1717,1719,1721,1724,1726,1728,1730,1732,1734,1736,1738,1740,1742,1744,1746,1757,1759,1761,1763],[98,141,1018,1020],[98,141,1016,1017],[98,141,1126],[98,141,1016],[98,141,1019],[98,141,1760],[98,141,1555],[98,141,1557],[98,141,1560],[98,141,1559],[98,141,803,860,946,1087,1103,1126],[98,141,1563],[98,141,803,946,1126],[98,141,1682],[98,141,803,847,860,946,1126],[98,141,1745],[98,141,1708],[98,141,1142],[98,141,1565],[98,141,1692],[98,141,1747,1752,1756],[98,141,803,1126,1757,1792],[98,141,1753,1755],[98,141,1754],[98,141,803,1126],[98,141,1748,1749,1751],[98,141,803,946,1748],[98,141,1750],[98,141,1698],[98,141,1702],[98,141,1741],[98,141,1731],[98,141,1567],[98,141,1569],[98,141,946,1072],[98,141,1571],[98,141,1714],[98,141,1608],[98,141,803,860,1605,1607],[98,141,1573],[98,141,1696],[98,141,1576],[98,141,1578],[98,141,1611],[98,141,1614],[98,141,1613],[98,141,1718],[98,141,1716],[98,141,1616],[98,141,1706],[98,141,1712],[98,141,1618],[98,141,1620],[98,141,946,973],[98,141,1622],[98,141,1624,1625],[98,141,1624],[98,141,1733],[98,141,1762],[98,141,1627],[98,141,1676],[98,141,864],[98,141,1710],[98,141,1126,1131],[98,141,1704],[98,141,1629],[98,141,1126,1792],[98,141,1739],[98,141,1631],[98,141,803,860],[98,141,1785],[98,141,1725],[98,141,1727],[98,141,1737],[98,141,1729],[98,141,1743],[98,141,1720],[98,141,1256],[98,141,1634],[98,141,1758],[98,141,1723],[98,141,860,1722],[98,141,803,860,1675,1792],[98,141,1669],[98,141,803,860,1644,1651,1652,1656,1668],[98,141,1607,1673,1674],[98,141,1606],[98,141,1671,1672],[98,141,803,1607,1671],[98,141,803,1607,1673],[98,141,1678],[98,141,1680],[84,98,141,803,973],[98,141,1700],[98,141,803,1087],[98,141,1694],[98,141,1684],[84,98,141,860,1021,1126],[98,141,1687],[98,141,946,966,1686],[98,141,1735],[98,141,1690],[84,98,141,860,946,1689],[98,141,1146],[98,141,1374],[98,141,1376],[98,141,1386],[98,141,1393],[84,98,141,1147,1288],[98,141,1289],[84,98,141,1288],[98,141,1291],[84,98,141,803],[98,141,1293],[98,141,1295],[98,141,1297],[98,141,1288,1290,1292,1294,1296,1298],[84,98,141,1503],[84,98,141,1508],[98,141,1510],[98,141,1512],[98,141,1514],[98,141,1388],[98,141,1378],[98,141,1372],[84,98,141,973],[84,98,141,946,1126],[84,98,141,946,973],[98,141,1380],[98,141,1382],[98,141,946,959,1126],[98,141,1384],[98,141,1373,1375,1377,1379,1381,1383,1385,1387,1389,1520],[84,98,141,803,1126,1385,1386,1390,1391,1392,1394,1395,1396,1504,1505,1509,1511,1513,1515,1516,1517,1518,1519],[98,141,1351],[84,98,141,1147,1353],[98,141,1354],[98,141,1356],[98,141,1355,1357,1358],[98,141,1367],[98,141,1362],[84,98,141,1544],[84,98,141,1543],[98,141,1545],[98,141,1370],[98,141,1360,1361,1363],[98,141,1365],[98,141,1352,1359,1364,1366,1368],[98,141,803,848],[98,141,803,848,849,850,851,852,854,855,858,859],[98,141,853],[98,141,856,857],[98,141,854],[98,141,1437],[98,141,1452],[98,141,1443],[98,141,1464],[98,141,1499],[98,141,804],[98,141,1470],[98,141,1400],[98,141,1399],[98,141,803,1400],[98,141,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435],[98,141,1462],[98,141,1488],[98,141,1458],[98,141,1454],[98,141,1490],[98,141,1397,1398,1436,1438,1440,1441,1442,1444,1445,1446,1448,1449,1451,1453,1455,1457,1459,1461,1463,1465,1467,1468,1469,1471,1473,1478,1481,1485,1487,1489,1491,1493,1498,1500,1502],[98,141,1439],[98,141,1492],[98,141,1501],[98,141,1460],[98,141,1472],[98,141,1479],[98,141,1479,1480],[98,141,1482],[98,141,1483],[98,141,1482,1484],[98,141,1474],[98,141,1476],[98,141,1474,1475,1477],[98,141,804,1494],[98,141,1494],[98,141,1496],[98,141,1494,1495,1497],[98,141,1447],[98,141,1486],[98,141,1466],[98,141,1456],[98,141,1450],[84,98,141,821],[84,98,141,821,840],[98,141,843,844,845],[98,141,821],[98,141,821,831],[98,141,822,823,824,825,826,827,830,832,833,834,835,836,837,838],[98,141,841],[98,141,818,819,839,840,842,846],[98,141,818,819,820],[98,141,817],[98,141,866,872,888,889,945],[98,141,803,860,873],[98,141,888],[98,141,803,888],[98,141,874],[98,141,873],[98,141,804,888],[98,141,860,873],[98,141,803,873],[98,141,847],[98,141,803,804,847,860,864,865,866,867,870,872,873],[98,141,871],[98,141,804,873],[98,141,867,870,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887],[98,141,860,888],[98,141,868],[98,141,869],[98,141,891],[98,141,193],[98,141,888,889],[98,141,893],[98,141,847,860],[98,141,943],[98,141,930],[98,141,890,892,894,896,898,900,902,904,905,906,907,910,912,914,916,918,920,922,924,925,927,929,931,933,935,937,942,944],[98,141,919],[98,141,921],[98,141,915],[98,141,932],[98,141,895],[98,141,897],[98,141,911],[98,141,923],[98,141,926],[98,141,913],[98,141,917],[98,141,928],[98,141,901],[98,141,936],[98,141,885,888],[98,141,939,941],[98,141,938],[98,141,940],[98,141,873,886],[98,141,903],[98,141,899],[98,141,934],[98,141,908,909],[98,141,847,888,908],[84,98,141,520],[84,98,141,519,520],[84,98,141,519,520,1834],[84,98,141,519,520,521,1828,1832],[84,98,141,519,520,521,1828,1831,1832,1833],[84,98,141,519,520,521,1828,1831,1832],[84,98,141,519,520,1829,1830],[84,98,141,519,520,1833],[84,98,141,519,520,521],[98,138,141],[98,140,141],[141],[98,141,146,178],[98,141,142,147,153,154,161,175,186],[98,141,142,143,153,161],[93,94,95,98,141],[98,141,144,187],[98,141,145,146,154,162],[98,141,146,175,183],[98,141,147,149,153,161],[98,140,141,148],[98,141,149,150],[98,141,151,153],[98,140,141,153],[98,141,153,154,155,175,186],[98,141,153,154,155,171,175,178],[98,136,141],[98,141,149,153,156,161,175,186],[98,141,153,154,156,157,161,175,183,186],[98,141,156,158,175,183,186],[96,97,98,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192],[98,141,153,159],[98,141,160,186,191],[98,141,149,153,161,175],[98,141,162],[98,141,163],[98,140,141,164],[98,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,160,161,162,163,164,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192],[98,141,169],[98,141,170],[98,141,153,171,172],[98,141,171,173,187,189],[98,141,153,175,176,178],[98,141,177,178],[98,141,175,176],[98,141,178],[98,141,179],[98,138,141,175,180],[98,141,153,181,182],[98,141,181,182],[98,141,146,161,175,183],[98,141,184],[98,141,161,185],[98,141,156,170,186],[98,141,146,187],[98,141,175,188],[98,141,160,189],[98,141,190],[98,141,153,155,164,175,178,186,189,191],[98,141,175,192],[84,98,141,196,197,198,345],[84,98,141,196,197],[84,98,141,197,345],[98,141,1939],[84,88,98,141,195,429,476],[84,88,98,141,194,429,476],[81,82,83,98,141],[98,141,523,524],[98,141,523],[98,141,1897],[98,141,1897,1898],[84,98,141,1657,1659],[84,98,141,1657],[98,141,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667],[98,141,1049,1050,1051],[98,141,1049],[98,141,1049,1050],[90,98,141],[98,141,432],[98,141,434,435,436,437],[98,141,439],[98,141,202,216,217,218,220,426],[98,141,202,241,243,245,246,249,426,428],[98,141,202,206,208,209,210,211,212,415,426,428],[98,141,426],[98,141,217,312,396,405,422],[98,141,202],[98,141,199,422],[98,141,253],[98,141,252,426,428],[98,141,156,294,312,341,482],[98,141,156,305,322,405,421],[98,141,156,357],[98,141,409],[98,141,408,409,410],[98,141,408],[92,98,141,156,199,202,206,209,213,214,215,217,221,229,230,350,385,406,426,429],[98,141,202,219,237,241,242,247,248,426,482],[98,141,219,482],[98,141,230,237,292,426,482],[98,141,482],[98,141,202,219,220,482],[98,141,244,482],[98,141,213,407,414],[98,141,170,318,422],[98,141,318,422],[84,98,141,318],[84,98,141,313],[98,141,309,355,422,465],[98,141,402,459,460,461,462,464],[98,141,401],[98,141,401,402],[98,141,210,351,352,353],[98,141,351,354,355],[98,141,463],[98,141,351,355],[84,98,141,203,453],[84,98,141,186],[84,98,141,219,282],[84,98,141,219],[98,141,280,284],[84,98,141,281,431],[98,141,1809],[84,88,98,141,156,193,194,195,429,474,475],[98,141,156],[98,141,156,206,261,351,361,375,396,411,412,426,427,482],[98,141,229,413],[98,141,429],[98,141,201],[84,98,141,294,308,321,331,333,421],[98,141,170,294,308,330,331,332,421,481],[98,141,324,325,326,327,328,329],[98,141,326],[98,141,330],[84,98,141,281,318,431],[84,98,141,318,430,431],[84,98,141,318,431],[98,141,375,418],[98,141,418],[98,141,156,427,431],[98,141,317],[98,140,141,316],[98,141,231,262,301,302,304,305,306,307,348,351,421,424,427],[98,141,231,302,351,355],[98,141,305,421],[84,98,141,305,314,315,317,319,320,321,322,323,334,335,336,337,338,339,340,421,422,482],[98,141,299],[98,141,156,170,231,232,261,276,306,348,349,350,355,375,396,417,426,427,428,429,482],[98,141,421],[98,140,141,217,302,303,306,350,417,419,420,427],[98,141,305],[98,140,141,261,266,295,296,297,298,299,300,301,304,421,422],[98,141,156,266,267,295,427,428],[98,141,217,302,350,351,375,417,421,427],[98,141,156,426,428],[98,141,156,175,424,427,428],[98,141,156,170,186,199,206,219,231,232,234,262,263,268,273,276,301,306,351,361,363,366,368,371,372,373,374,396,416,417,422,424,426,427,428],[98,141,156,175],[98,141,202,203,204,214,416,424,425,429,431,482],[98,141,156,175,186,249,251,253,254,255,256,482],[98,141,170,186,199,241,251,272,273,274,275,301,351,366,375,381,384,386,396,417,422,424],[98,141,213,214,229,350,385,417,426],[98,141,156,186,203,206,301,379,424,426],[98,141,293],[98,141,156,382,383,393],[98,141,424,426],[98,141,302,303],[98,141,301,306,416,431],[98,141,156,170,235,241,275,366,375,381,384,388,424],[98,141,156,213,229,241,389],[98,141,202,234,391,416,426],[98,141,156,186,426],[98,141,156,219,233,234,235,246,257,390,392,416,426],[92,98,141,231,306,395,429,431],[98,141,156,170,186,206,213,221,229,232,262,268,272,273,274,275,276,301,351,363,375,376,378,380,396,416,417,422,423,424,431],[98,141,156,175,213,381,387,393,424],[98,141,224,225,226,227,228],[98,141,263,367],[98,141,369],[98,141,367],[98,141,369,370],[98,141,156,206,261,427],[98,141,156,170,201,203,231,262,276,306,359,360,396,424,428,429,431],[98,141,156,170,186,205,210,301,360,423,427],[98,141,295],[98,141,296],[98,141,297],[98,141,422],[98,141,250,259],[98,141,156,206,250,262],[98,141,258,259],[98,141,260],[98,141,250,251],[98,141,250,277],[98,141,250],[98,141,263,365,423],[98,141,364],[98,141,251,422,423],[98,141,362,423],[98,141,251,422],[98,141,348],[98,141,262,291,294,301,302,308,311,342,344,347,351,395,424,427],[98,141,285,288,289,290,309,310,355],[84,98,141,196,197,198,318,343],[84,98,141,196,197,198,318,343,346],[98,141,404],[98,141,217,267,305,306,317,322,351,395,397,398,399,400,402,403,406,416,421,426],[98,141,355],[98,141,359],[98,141,156,262,278,356,358,361,395,424,429,431],[98,141,285,286,287,288,289,290,309,310,355,430],[92,98,141,156,170,186,232,250,251,276,301,306,393,394,396,416,417,426,427,429],[98,141,267,269,272,417],[98,141,156,263,426],[98,141,266,305],[98,141,265],[98,141,267,268],[98,141,264,266,426],[98,141,156,205,267,269,270,271,426,427],[84,98,141,351,352,354],[98,141,236],[84,98,141,203],[84,98,141,422],[84,92,98,141,276,306,429,431],[98,141,203,453,454],[84,98,141,284],[84,98,141,170,186,201,248,279,281,283,431],[98,141,219,422,427],[98,141,377,422],[84,98,141,154,156,170,201,237,243,284,429,430],[84,98,141,194,195,429,476],[84,85,86,87,88,98,141],[98,141,146],[98,141,238,239,240],[98,141,238],[84,88,98,141,156,158,170,193,194,195,196,198,199,201,232,330,388,428,431,476],[98,141,441],[98,141,443],[98,141,445],[98,141,1810],[98,141,447],[98,141,449,450,451],[98,141,455],[89,91,98,141,433,438,440,442,444,446,448,452,456,458,467,468,470,480,481,482,483],[98,141,457],[98,141,466],[98,141,281],[98,141,469],[98,140,141,267,269,270,272,321,422,471,472,473,476,477,478,479],[98,141,502],[98,141,500,502],[98,141,491,499,500,501,503,505],[98,141,489],[98,141,492,497,502,505],[98,141,488,505],[98,141,492,493,496,497,498,505],[98,141,492,493,494,496,497,505],[98,141,489,490,491,492,493,497,498,499,501,502,503,505],[98,141,505],[98,141,487,489,490,491,492,493,494,496,497,498,499,500,501,502,503,504],[98,141,487,505],[98,141,492,494,495,497,498,505],[98,141,496,505],[98,141,497,498,502,505],[98,141,490,500],[98,141,165,166],[84,98,141,1899],[84,98,141,1890,1891],[98,141,1890,1891,1892,1893,1894],[84,98,141,1890],[98,141,1895],[84,98,141,1022,1023],[84,98,141,1022],[84,98,141,1022,1024,1025,1027],[98,141,1022],[98,141,1022,1023,1024,1025,1026,1027,1028,1029,1047],[98,141,1030,1031,1032,1033],[98,141,1035,1036,1037,1038,1039],[98,141,1034,1040,1046],[98,141,1041,1042,1043,1044,1045],[98,141,1929,1930],[98,141,1929],[98,141,175,193],[98,141,507,508],[98,141,506,509],[98,108,112,141,186],[98,108,141,175,186],[98,103,141],[98,105,108,141,183,186],[98,141,161,183],[98,103,141,193],[98,105,108,141,161,186],[98,100,101,104,107,141,153,175,186],[98,108,115,141],[98,100,106,141],[98,108,129,130,141],[98,104,108,141,178,186,193],[98,129,141,193],[98,102,103,141,193],[98,108,141],[98,102,103,104,105,106,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,141],[98,108,123,141],[98,108,115,116,141],[98,106,108,116,117,141],[98,107,141],[98,100,103,108,141],[98,108,112,116,117,141],[98,112,141],[98,106,108,111,141,186],[98,100,105,108,115,141],[98,141,175],[98,103,108,129,141,191,193],[98,141,1636,1644],[98,141,1637,1640,1642,1644],[98,141,1642],[98,141,1636,1640,1642,1643,1644,1645],[98,141,1640,1642,1644,1645],[98,141,1636,1640,1642,1644,1645],[98,141,1636,1638,1639,1640,1642,1643,1644,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655],[98,141,1644],[98,141,1636,1637,1639,1640,1641,1644],[98,141,1645],[98,141,1642,1643],[98,141,1636],[98,141,1636,1638,1642,1644],[98,141,816],[98,141,805,806,816],[98,141,807,808],[98,141,805,806,807,809,810,814],[98,141,806,807],[98,141,815],[98,141,807],[98,141,805,806,807,810,811,812,813],[98,141,535,536,1797,1798,1799,1801,1804],[98,141,1797,1798,1799,1800,1801],[98,141,535,1797,1798,1799,1801,1804],[98,141,535,1797,1798,1799,1801,1803,1804],[98,141,484,485],[98,141,480],[98,141,480,517],[84,98,141,467,526,542,1792,1816,1817,1821],[84,98,141,467,538,542,547,1807,1816,1825,1826,1840,1851,1852,1856],[84,98,141,1858],[98,141,1793,1811,1812,1813],[84,98,141,467,517,526,530,547,1816,1818,1845,1860],[84,98,141,467,526,1816,1817,1818],[84,98,141,467,526,1816,1817],[98,141,1864],[84,98,141,467,526,530,1816,1817,1818],[84,98,141,467,526,1816,1817,1818,1845,1860,1869,1871,1873],[84,98,141,1816,1817,1847,1860,1878],[84,98,141,1816,1844,1845,1869,1873,1882],[84,98,141,467],[84,98,141,526,1817,1824],[84,98,141,526,538],[84,98,141,1816,1817,1818,1847,1860,1877],[98,141,1792,1816],[84,98,141,526,1816,1836],[98,141,538,1807,1824,1825,1837,1887,1904],[84,98,141,467,526,547,1816,1836,1845,1873],[84,98,141,526,1816,1841,1848],[84,98,141,530,538,1807,1824,1825,1827,1838,1839],[84,98,141,526,1816,1817],[84,98,141,458,467,526,542,547,1816,1836,1848],[98,141,1908],[84,98,141,458,1792,1816],[98,141,526],[84,98,141,526,1816,1836,1853],[84,98,141,526,1816,1836,1845,1873],[84,98,141,526,1805,1816,1836,1853,1881,1896,1902,1903],[84,98,141,467,1916],[84,98,141,1881],[84,98,141,526,1807,1816,1837,1838],[84,98,141,526,530,1816,1836,1853,1855],[84,98,141,526,1816,1817,1818,1843],[84,98,141,526,530,1816,1836],[84,98,141,467,526,530,1812,1816,1818,1843,1844,1845,1847],[98,141,467,543,1849,1850],[84,98,141,526],[98,141,526,1812],[84,98,141,526,1816,1836,1918],[84,98,141,526,530,1816,1817,1818,1845,1847,1860,1869,1881],[84,98,141,526,1816,1817,1818,1847,1871],[84,98,141,526,539,1816,1836],[84,98,141,526,541,1795,1816,1817,1818,1847,1853,1871,1881,1922,1925],[84,98,141,526,538,1816,1836],[84,98,141,526,1816],[84,98,141,526,539,1816,1817,1818,1847,1900],[84,98,141,1816,1923,1924,1931],[98,141,458,467,528],[84,98,141,1816,1855,1873,1933],[84,98,141,526,540,1900,1901],[84,98,141,1900],[84,98,141,528,1872],[84,98,141,525,528,1815],[84,98,141,528],[84,98,141,526,528,1936],[84,98,141,526,528,1842],[84,98,141,526,528,1835],[84,98,141,525,528,1868],[84,98,141,528,1854],[84,98,141,528,1846],[84,98,141,528,1823],[84,98,141,526,528,1880],[84,98,141,528,1820],[98,141,528],[84,98,141,528,1870],[84,98,141,522,525,526,528],[98,141,529,530],[84,98,141,529],[84,98,141,526,1795,1796,1816,1817,1818,1845,1847,1871,1900],[84,98,141,1792],[84,98,141,531,532,533],[84,98,141,538,540],[84,98,141,539],[84,98,141,537],[84,98,141,544],[98,141,168],[98,141,531],[98,141,523,527],[98,141,153],[98,141,1795],[98,141,537,1802,1804],[84,98,141,525],[98,141,510]],"fileInfos":[{"version":"69684132aeb9b5642cbcd9e22dff7818ff0ee1aa831728af0ecf97d3364d5546","affectsGlobalScope":true,"impliedFormat":1},{"version":"45b7ab580deca34ae9729e97c13cfd999df04416a79116c3bfb483804f85ded4","impliedFormat":1},{"version":"3facaf05f0c5fc569c5649dd359892c98a85557e3e0c847964caeb67076f4d75","impliedFormat":1},{"version":"e44bb8bbac7f10ecc786703fe0a6a4b952189f908707980ba8f3c8975a760962","impliedFormat":1},{"version":"5e1c4c362065a6b95ff952c0eab010f04dcd2c3494e813b493ecfd4fcb9fc0d8","impliedFormat":1},{"version":"68d73b4a11549f9c0b7d352d10e91e5dca8faa3322bfb77b661839c42b1ddec7","impliedFormat":1},{"version":"5efce4fc3c29ea84e8928f97adec086e3dc876365e0982cc8479a07954a3efd4","impliedFormat":1},{"version":"feecb1be483ed332fad555aff858affd90a48ab19ba7272ee084704eb7167569","impliedFormat":1},{"version":"ee7bad0c15b58988daa84371e0b89d313b762ab83cb5b31b8a2d1162e8eb41c2","impliedFormat":1},{"version":"27bdc30a0e32783366a5abeda841bc22757c1797de8681bbe81fbc735eeb1c10","impliedFormat":1},{"version":"8fd575e12870e9944c7e1d62e1f5a73fcf23dd8d3a321f2a2c74c20d022283fe","impliedFormat":1},{"version":"8bf8b5e44e3c9c36f98e1007e8b7018c0f38d8adc07aecef42f5200114547c70","impliedFormat":1},{"version":"092c2bfe125ce69dbb1223c85d68d4d2397d7d8411867b5cc03cec902c233763","affectsGlobalScope":true,"impliedFormat":1},{"version":"07f073f19d67f74d732b1adea08e1dc66b1b58d77cb5b43931dee3d798a2fd53","affectsGlobalScope":true,"impliedFormat":1},{"version":"c57796738e7f83dbc4b8e65132f11a377649c00dd3eee333f672b8f0a6bea671","affectsGlobalScope":true,"impliedFormat":1},{"version":"dc2df20b1bcdc8c2d34af4926e2c3ab15ffe1160a63e58b7e09833f616efff44","affectsGlobalScope":true,"impliedFormat":1},{"version":"515d0b7b9bea2e31ea4ec968e9edd2c39d3eebf4a2d5cbd04e88639819ae3b71","affectsGlobalScope":true,"impliedFormat":1},{"version":"0559b1f683ac7505ae451f9a96ce4c3c92bdc71411651ca6ddb0e88baaaad6a3","affectsGlobalScope":true,"impliedFormat":1},{"version":"0dc1e7ceda9b8b9b455c3a2d67b0412feab00bd2f66656cd8850e8831b08b537","affectsGlobalScope":true,"impliedFormat":1},{"version":"ce691fb9e5c64efb9547083e4a34091bcbe5bdb41027e310ebba8f7d96a98671","affectsGlobalScope":true,"impliedFormat":1},{"version":"8d697a2a929a5fcb38b7a65594020fcef05ec1630804a33748829c5ff53640d0","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ff2a353abf8a80ee399af572debb8faab2d33ad38c4b4474cff7f26e7653b8d","affectsGlobalScope":true,"impliedFormat":1},{"version":"936e80ad36a2ee83fc3caf008e7c4c5afe45b3cf3d5c24408f039c1d47bdc1df","affectsGlobalScope":true,"impliedFormat":1},{"version":"d15bea3d62cbbdb9797079416b8ac375ae99162a7fba5de2c6c505446486ac0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"68d18b664c9d32a7336a70235958b8997ebc1c3b8505f4f1ae2b7e7753b87618","affectsGlobalScope":true,"impliedFormat":1},{"version":"eb3d66c8327153d8fa7dd03f9c58d351107fe824c79e9b56b462935176cdf12a","affectsGlobalScope":true,"impliedFormat":1},{"version":"38f0219c9e23c915ef9790ab1d680440d95419ad264816fa15009a8851e79119","affectsGlobalScope":true,"impliedFormat":1},{"version":"69ab18c3b76cd9b1be3d188eaf8bba06112ebbe2f47f6c322b5105a6fbc45a2e","affectsGlobalScope":true,"impliedFormat":1},{"version":"fef8cfad2e2dc5f5b3d97a6f4f2e92848eb1b88e897bb7318cef0e2820bceaab","affectsGlobalScope":true,"impliedFormat":1},{"version":"2f11ff796926e0832f9ae148008138ad583bd181899ab7dd768a2666700b1893","affectsGlobalScope":true,"impliedFormat":1},{"version":"4de680d5bb41c17f7f68e0419412ca23c98d5749dcaaea1896172f06435891fc","affectsGlobalScope":true,"impliedFormat":1},{"version":"954296b30da6d508a104a3a0b5d96b76495c709785c1d11610908e63481ee667","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac9538681b19688c8eae65811b329d3744af679e0bdfa5d842d0e32524c73e1c","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a969edff4bd52585473d24995c5ef223f6652d6ef46193309b3921d65dd4376","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e9fbd7030c440b33d021da145d3232984c8bb7916f277e8ffd3dc2e3eae2bdb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811ec78f7fefcabbda4bfa93b3eb67d9ae166ef95f9bff989d964061cbf81a0c","affectsGlobalScope":true,"impliedFormat":1},{"version":"717937616a17072082152a2ef351cb51f98802fb4b2fdabd32399843875974ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"d7e7d9b7b50e5f22c915b525acc5a49a7a6584cf8f62d0569e557c5cfc4b2ac2","affectsGlobalScope":true,"impliedFormat":1},{"version":"71c37f4c9543f31dfced6c7840e068c5a5aacb7b89111a4364b1d5276b852557","affectsGlobalScope":true,"impliedFormat":1},{"version":"576711e016cf4f1804676043e6a0a5414252560eb57de9faceee34d79798c850","affectsGlobalScope":true,"impliedFormat":1},{"version":"89c1b1281ba7b8a96efc676b11b264de7a8374c5ea1e6617f11880a13fc56dc6","affectsGlobalScope":true,"impliedFormat":1},{"version":"74f7fa2d027d5b33eb0471c8e82a6c87216223181ec31247c357a3e8e2fddc5b","affectsGlobalScope":true,"impliedFormat":1},{"version":"d6d7ae4d1f1f3772e2a3cde568ed08991a8ae34a080ff1151af28b7f798e22ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"063600664504610fe3e99b717a1223f8b1900087fab0b4cad1496a114744f8df","affectsGlobalScope":true,"impliedFormat":1},{"version":"934019d7e3c81950f9a8426d093458b65d5aff2c7c1511233c0fd5b941e608ab","affectsGlobalScope":true,"impliedFormat":1},{"version":"52ada8e0b6e0482b728070b7639ee42e83a9b1c22d205992756fe020fd9f4a47","affectsGlobalScope":true,"impliedFormat":1},{"version":"3bdefe1bfd4d6dee0e26f928f93ccc128f1b64d5d501ff4a8cf3c6371200e5e6","affectsGlobalScope":true,"impliedFormat":1},{"version":"59fb2c069260b4ba00b5643b907ef5d5341b167e7d1dbf58dfd895658bda2867","affectsGlobalScope":true,"impliedFormat":1},{"version":"639e512c0dfc3fad96a84caad71b8834d66329a1f28dc95e3946c9b58176c73a","affectsGlobalScope":true,"impliedFormat":1},{"version":"368af93f74c9c932edd84c58883e736c9e3d53cec1fe24c0b0ff451f529ceab1","affectsGlobalScope":true,"impliedFormat":1},{"version":"af3dd424cf267428f30ccfc376f47a2c0114546b55c44d8c0f1d57d841e28d74","affectsGlobalScope":true,"impliedFormat":1},{"version":"995c005ab91a498455ea8dfb63aa9f83fa2ea793c3d8aa344be4a1678d06d399","affectsGlobalScope":true,"impliedFormat":1},{"version":"959d36cddf5e7d572a65045b876f2956c973a586da58e5d26cde519184fd9b8a","affectsGlobalScope":true,"impliedFormat":1},{"version":"965f36eae237dd74e6cca203a43e9ca801ce38824ead814728a2807b1910117d","affectsGlobalScope":true,"impliedFormat":1},{"version":"3925a6c820dcb1a06506c90b1577db1fdbf7705d65b62b99dce4be75c637e26b","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a3d63ef2b853447ec4f749d3f368ce642264246e02911fcb1590d8c161b8005","affectsGlobalScope":true,"impliedFormat":1},{"version":"b5ce7a470bc3628408429040c4e3a53a27755022a32fd05e2cb694e7015386c7","affectsGlobalScope":true,"impliedFormat":1},{"version":"8444af78980e3b20b49324f4a16ba35024fef3ee069a0eb67616ea6ca821c47a","affectsGlobalScope":true,"impliedFormat":1},{"version":"3287d9d085fbd618c3971944b65b4be57859f5415f495b33a6adc994edd2f004","affectsGlobalScope":true,"impliedFormat":1},{"version":"b4b67b1a91182421f5df999988c690f14d813b9850b40acd06ed44691f6727ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"df83c2a6c73228b625b0beb6669c7ee2a09c914637e2d35170723ad49c0f5cd4","affectsGlobalScope":true,"impliedFormat":1},{"version":"436aaf437562f276ec2ddbee2f2cdedac7664c1e4c1d2c36839ddd582eeb3d0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e3c06ea092138bf9fa5e874a1fdbc9d54805d074bee1de31b99a11e2fec239d","affectsGlobalScope":true,"impliedFormat":1},{"version":"87dc0f382502f5bbce5129bdc0aea21e19a3abbc19259e0b43ae038a9fc4e326","affectsGlobalScope":true,"impliedFormat":1},{"version":"b1cb28af0c891c8c96b2d6b7be76bd394fddcfdb4709a20ba05a7c1605eea0f9","affectsGlobalScope":true,"impliedFormat":1},{"version":"2fef54945a13095fdb9b84f705f2b5994597640c46afeb2ce78352fab4cb3279","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac77cb3e8c6d3565793eb90a8373ee8033146315a3dbead3bde8db5eaf5e5ec6","affectsGlobalScope":true,"impliedFormat":1},{"version":"56e4ed5aab5f5920980066a9409bfaf53e6d21d3f8d020c17e4de584d29600ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ece9f17b3866cc077099c73f4983bddbcb1dc7ddb943227f1ec070f529dedd1","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a6282c8827e4b9a95f4bf4f5c205673ada31b982f50572d27103df8ceb8013c","affectsGlobalScope":true,"impliedFormat":1},{"version":"1c9319a09485199c1f7b0498f2988d6d2249793ef67edda49d1e584746be9032","affectsGlobalScope":true,"impliedFormat":1},{"version":"e3a2a0cee0f03ffdde24d89660eba2685bfbdeae955a6c67e8c4c9fd28928eeb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811c71eee4aa0ac5f7adf713323a5c41b0cf6c4e17367a34fbce379e12bbf0a4","affectsGlobalScope":true,"impliedFormat":1},{"version":"51ad4c928303041605b4d7ae32e0c1ee387d43a24cd6f1ebf4a2699e1076d4fa","affectsGlobalScope":true,"impliedFormat":1},{"version":"60037901da1a425516449b9a20073aa03386cce92f7a1fd902d7602be3a7c2e9","affectsGlobalScope":true,"impliedFormat":1},{"version":"d4b1d2c51d058fc21ec2629fff7a76249dec2e36e12960ea056e3ef89174080f","affectsGlobalScope":true,"impliedFormat":1},{"version":"22adec94ef7047a6c9d1af3cb96be87a335908bf9ef386ae9fd50eeb37f44c47","affectsGlobalScope":true,"impliedFormat":1},{"version":"4245fee526a7d1754529d19227ecbf3be066ff79ebb6a380d78e41648f2f224d","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e7f8264d0fb4c5339605a15daadb037bf238c10b654bb3eee14208f860a32ea","affectsGlobalScope":true,"impliedFormat":1},{"version":"782dec38049b92d4e85c1585fbea5474a219c6984a35b004963b00beb1aab538","affectsGlobalScope":true,"impliedFormat":1},{"version":"eb5b19b86227ace1d29ea4cf81387279d04bb34051e944bc53df69f58914b788","affectsGlobalScope":true,"impliedFormat":1},{"version":"8a8eb4ebffd85e589a1cc7c178e291626c359543403d58c9cd22b81fab5b1fb9","impliedFormat":1},{"version":"87d9d29dbc745f182683f63187bf3d53fd8673e5fca38ad5eaab69798ed29fbc","impliedFormat":1},{"version":"472f5aab7edc498a0a761096e8e254c5bc3323d07a1e7f5f8b8ec0d6395b60a0","affectsGlobalScope":true,"impliedFormat":1},{"version":"acd8fd5090ac73902278889c38336ff3f48af6ba03aa665eb34a75e7ba1dccc4","impliedFormat":1},{"version":"d6258883868fb2680d2ca96bc8b1352cab69874581493e6d52680c5ffecdb6cc","impliedFormat":1},{"version":"1b61d259de5350f8b1e5db06290d31eaebebc6baafd5f79d314b5af9256d7153","impliedFormat":1},{"version":"f258e3960f324a956fc76a3d3d9e964fff2244ff5859dcc6ce5951e5413ca826","impliedFormat":1},{"version":"643f7232d07bf75e15bd8f658f664d6183a0efaca5eb84b48201c7671a266979","impliedFormat":1},{"version":"0f6666b58e9276ac3a38fdc80993d19208442d6027ab885580d93aec76b4ef00","impliedFormat":1},{"version":"05fd364b8ef02fb1e174fbac8b825bdb1e5a36a016997c8e421f5fab0a6da0a0","impliedFormat":1},{"version":"631eff75b0e35d1b1b31081d55209abc43e16b49426546ab5a9b40bdd40b1f60","impliedFormat":1},{"version":"70521b6ab0dcba37539e5303104f29b721bfb2940b2776da4cc818c07e1fefc1","affectsGlobalScope":true,"impliedFormat":1},{"version":"ab41ef1f2cdafb8df48be20cd969d875602483859dc194e9c97c8a576892c052","affectsGlobalScope":true,"impliedFormat":1},{"version":"d153a11543fd884b596587ccd97aebbeed950b26933ee000f94009f1ab142848","affectsGlobalScope":true,"impliedFormat":1},{"version":"21d819c173c0cf7cc3ce57c3276e77fd9a8a01d35a06ad87158781515c9a438a","impliedFormat":1},{"version":"a79e62f1e20467e11a904399b8b18b18c0c6eea6b50c1168bf215356d5bebfaf","affectsGlobalScope":true,"impliedFormat":1},{"version":"49a5a44f2e68241a1d2bd9ec894535797998841c09729e506a7cbfcaa40f2180","affectsGlobalScope":true,"impliedFormat":1},{"version":"4967529644e391115ca5592184d4b63980569adf60ee685f968fd59ab1557188","impliedFormat":1},{"version":"5929864ce17fba74232584d90cb721a89b7ad277220627cc97054ba15a98ea8f","impliedFormat":1},{"version":"763fe0f42b3d79b440a9b6e51e9ba3f3f91352469c1e4b3b67bfa4ff6352f3f4","impliedFormat":1},{"version":"25c8056edf4314820382a5fdb4bb7816999acdcb929c8f75e3f39473b87e85bc","impliedFormat":1},{"version":"c464d66b20788266e5353b48dc4aa6bc0dc4a707276df1e7152ab0c9ae21fad8","impliedFormat":1},{"version":"78d0d27c130d35c60b5e5566c9f1e5be77caf39804636bc1a40133919a949f21","impliedFormat":1},{"version":"c6fd2c5a395f2432786c9cb8deb870b9b0e8ff7e22c029954fabdd692bff6195","impliedFormat":1},{"version":"1d6e127068ea8e104a912e42fc0a110e2aa5a66a356a917a163e8cf9a65e4a75","impliedFormat":1},{"version":"5ded6427296cdf3b9542de4471d2aa8d3983671d4cac0f4bf9c637208d1ced43","impliedFormat":1},{"version":"7f182617db458e98fc18dfb272d40aa2fff3a353c44a89b2c0ccb3937709bfb5","impliedFormat":1},{"version":"cadc8aced301244057c4e7e73fbcae534b0f5b12a37b150d80e5a45aa4bebcbd","impliedFormat":1},{"version":"385aab901643aa54e1c36f5ef3107913b10d1b5bb8cbcd933d4263b80a0d7f20","impliedFormat":1},{"version":"9670d44354bab9d9982eca21945686b5c24a3f893db73c0dae0fd74217a4c219","impliedFormat":1},{"version":"0b8a9268adaf4da35e7fa830c8981cfa22adbbe5b3f6f5ab91f6658899e657a7","impliedFormat":1},{"version":"11396ed8a44c02ab9798b7dca436009f866e8dae3c9c25e8c1fbc396880bf1bb","impliedFormat":1},{"version":"ba7bc87d01492633cb5a0e5da8a4a42a1c86270e7b3d2dea5d156828a84e4882","impliedFormat":1},{"version":"4893a895ea92c85345017a04ed427cbd6a1710453338df26881a6019432febdd","impliedFormat":1},{"version":"c21dc52e277bcfc75fac0436ccb75c204f9e1b3fa5e12729670910639f27343e","impliedFormat":1},{"version":"13f6f39e12b1518c6650bbb220c8985999020fe0f21d818e28f512b7771d00f9","impliedFormat":1},{"version":"9b5369969f6e7175740bf51223112ff209f94ba43ecd3bb09eefff9fd675624a","impliedFormat":1},{"version":"4fe9e626e7164748e8769bbf74b538e09607f07ed17c2f20af8d680ee49fc1da","impliedFormat":1},{"version":"24515859bc0b836719105bb6cc3d68255042a9f02a6022b3187948b204946bd2","impliedFormat":1},{"version":"ea0148f897b45a76544ae179784c95af1bd6721b8610af9ffa467a518a086a43","impliedFormat":1},{"version":"24c6a117721e606c9984335f71711877293a9651e44f59f3d21c1ea0856f9cc9","impliedFormat":1},{"version":"dd3273ead9fbde62a72949c97dbec2247ea08e0c6952e701a483d74ef92d6a17","impliedFormat":1},{"version":"405822be75ad3e4d162e07439bac80c6bcc6dbae1929e179cf467ec0b9ee4e2e","impliedFormat":1},{"version":"0db18c6e78ea846316c012478888f33c11ffadab9efd1cc8bcc12daded7a60b6","impliedFormat":1},{"version":"e61be3f894b41b7baa1fbd6a66893f2579bfad01d208b4ff61daef21493ef0a8","impliedFormat":1},{"version":"bd0532fd6556073727d28da0edfd1736417a3f9f394877b6d5ef6ad88fba1d1a","impliedFormat":1},{"version":"89167d696a849fce5ca508032aabfe901c0868f833a8625d5a9c6e861ef935d2","impliedFormat":1},{"version":"615ba88d0128ed16bf83ef8ccbb6aff05c3ee2db1cc0f89ab50a4939bfc1943f","impliedFormat":1},{"version":"a4d551dbf8746780194d550c88f26cf937caf8d56f102969a110cfaed4b06656","impliedFormat":1},{"version":"8bd86b8e8f6a6aa6c49b71e14c4ffe1211a0e97c80f08d2c8cc98838006e4b88","impliedFormat":1},{"version":"317e63deeb21ac07f3992f5b50cdca8338f10acd4fbb7257ebf56735bf52ab00","impliedFormat":1},{"version":"4732aec92b20fb28c5fe9ad99521fb59974289ed1e45aecb282616202184064f","impliedFormat":1},{"version":"2e85db9e6fd73cfa3d7f28e0ab6b55417ea18931423bd47b409a96e4a169e8e6","impliedFormat":1},{"version":"c46e079fe54c76f95c67fb89081b3e399da2c7d109e7dca8e4b58d83e332e605","impliedFormat":1},{"version":"bf67d53d168abc1298888693338cb82854bdb2e69ef83f8a0092093c2d562107","impliedFormat":1},{"version":"1ca84b44ad1d8e4576f24904d8b95dd23b94ea67e1575f89614ac90062fc67f4","affectsGlobalScope":true,"impliedFormat":1},{"version":"6d586db0a09a9495ebb5dece28f54df9684bfbd6e1f568426ca153126dac4a40","impliedFormat":1},{"version":"7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419","impliedFormat":1},{"version":"8c0bcd6c6b67b4b503c11e91a1fb91522ed585900eab2ab1f61bba7d7caa9d6f","impliedFormat":1},{"version":"567b7f607f400873151d7bc63a049514b53c3c00f5f56e9e95695d93b66a138e","affectsGlobalScope":true,"impliedFormat":1},{"version":"f3e58c4c18a031cbb17abec7a4ad0bd5ae9fc70c1f4ba1e7fb921ad87c504aca","impliedFormat":1},{"version":"84c1930e33d1bb12ad01bcbe11d656f9646bd21b2fb2afd96e8e10615a021aef","impliedFormat":1},{"version":"35ec8b6760fd7138bbf5809b84551e31028fb2ba7b6dc91d95d098bf212ca8b4","affectsGlobalScope":true,"impliedFormat":1},{"version":"5524481e56c48ff486f42926778c0a3cce1cc85dc46683b92b1271865bcf015a","impliedFormat":1},{"version":"4b87f767c7bc841511113c876a6b8bf1fd0cb0b718c888ad84478b372ec486b1","affectsGlobalScope":true,"impliedFormat":1},{"version":"8d04e3640dd9eb67f7f1e5bd3d0bf96c784666f7aefc8ac1537af6f2d38d4c29","impliedFormat":1},{"version":"9d19808c8c291a9010a6c788e8532a2da70f811adb431c97520803e0ec649991","impliedFormat":1},{"version":"2bf469abae4cc9c0f340d4e05d9d26e37f936f9c8ca8f007a6534f109dcc77e4","impliedFormat":1},{"version":"4aacb0dd020eeaef65426153686cc639a78ec2885dc72ad220be1d25f1a439df","impliedFormat":1},{"version":"f0bd7e6d931657b59605c44112eaf8b980ba7f957a5051ed21cb93d978cf2f45","impliedFormat":1},{"version":"71450bbc2d82821d24ca05699a533e72758964e9852062c53b30f31c36978ab8","affectsGlobalScope":true,"impliedFormat":1},{"version":"0ada07543808f3b967624645a8e1ccd446f8b01ade47842acf1328aec899fed0","affectsGlobalScope":true,"impliedFormat":1},{"version":"4c21aaa8257d7950a5b75a251d9075b6a371208fc948c9c8402f6690ef3b5b55","impliedFormat":1},{"version":"b5895e6353a5d708f55d8685c38a235c3a6d8138e374dee8ceb8ffde5aa8002a","impliedFormat":1},{"version":"54c4f21f578864961efc94e8f42bc893a53509e886370ec7dd602e0151b9266c","impliedFormat":1},{"version":"de735eca2c51dd8b860254e9fdb6d9ec19fe402dfe597c23090841ce3937cfc5","impliedFormat":1},{"version":"4ff41188773cbf465807dd2f7059c7494cbee5115608efc297383832a1150c43","impliedFormat":1},{"version":"5650cf3dace09e7c25d384e3e6b818b938f68f4e8de96f52d9c5a1b3db068e86","impliedFormat":1},{"version":"1354ca5c38bd3fd3836a68e0f7c9f91f172582ba30ab15bb8c075891b91502b7","affectsGlobalScope":true,"impliedFormat":1},{"version":"5155da3047ef977944d791a2188ff6e6c225f6975cc1910ab7bb6838ab84cede","impliedFormat":1},{"version":"93f437e1398a4f06a984f441f7fa7a9f0535c04399619b5c22e0b87bdee182cb","impliedFormat":1},{"version":"afbe24ab0d74694372baa632ecb28bb375be53f3be53f9b07ecd7fc994907de5","impliedFormat":1},{"version":"e16d218a30f6a6810b57f7e968124eaa08c7bb366133ea34bbf01e7cd6b8c0ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"ad7e61eca7f2f8bf47e72695f9f6663b75e41d87ef49abdb17c0cb843862f8aa","impliedFormat":1},{"version":"ecba2e44af95b0599c269a92628cec22e752868bce37396740deb51a5c547a26","impliedFormat":1},{"version":"46a9fb41a8f3bc7539eeebc15a6e04b9e55d7537a081615ad3614220d34c3e0f","impliedFormat":1},{"version":"eb8692dea24c27821f77e397272d9ed2eda0b95e4a75beb0fdda31081d15a8ae","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e043a1bc8fbf2a255bccf9bf27e0f1caf916c3b0518ea34aa72357c0afd42ec","impliedFormat":1},{"version":"b4f70ec656a11d570e1a9edce07d118cd58d9760239e2ece99306ee9dfe61d02","impliedFormat":1},{"version":"3bc2f1e2c95c04048212c569ed38e338873f6a8593930cf5a7ef24ffb38fc3b6","impliedFormat":1},{"version":"8145e07aad6da5f23f2fcd8c8e4c5c13fb26ee986a79d03b0829b8fce152d8b2","impliedFormat":1},{"version":"f9d9d753d430ed050dc1bf2667a1bab711ccbb1c1507183d794cc195a5b085cc","impliedFormat":1},{"version":"9eece5e586312581ccd106d4853e861aaaa1a39f8e3ea672b8c3847eedd12f6e","impliedFormat":1},{"version":"5b6844ad931dcc1d3aca53268f4bd671428421464b1286746027aede398094f2","impliedFormat":1},{"version":"37ba7b45141a45ce6e80e66f2a96c8a5ab1bcef0fc2d0f56bb58df96ec67e972","impliedFormat":1},{"version":"125d792ec6c0c0f657d758055c494301cc5fdb327d9d9d5960b3f129aff76093","impliedFormat":1},{"version":"0dbcebe2126d03936c70545e96a6e41007cf065be38a1ce4d32a39fcedefead4","affectsGlobalScope":true,"impliedFormat":1},{"version":"1851a3b4db78664f83901bb9cac9e45e03a37bb5933cc5bf37e10bb7e91ab4eb","impliedFormat":1},{"version":"461e54289e6287e8494a0178ba18182acce51a02bca8dea219149bf2cf96f105","impliedFormat":1},{"version":"12ed4559eba17cd977aa0db658d25c4047067444b51acfdcbf38470630642b23","affectsGlobalScope":true,"impliedFormat":1},{"version":"f3ffabc95802521e1e4bcba4c88d8615176dc6e09111d920c7a213bdda6e1d65","impliedFormat":1},{"version":"e31e51c55800014d926e3f74208af49cb7352803619855c89296074d1ecbb524","impliedFormat":1},{"version":"ae56f65caf3be91108707bd8dfbccc2a57a91feb5daabf7165a06a945545ed26","impliedFormat":1},{"version":"a136d5de521da20f31631a0a96bf712370779d1c05b7015d7019a9b2a0446ca9","impliedFormat":1},{"version":"dfb96ba5177b68003deec9e773c47257da5c4c8a74053d8956389d832df72002","affectsGlobalScope":true,"impliedFormat":1},{"version":"92d3070580cf72b4bb80959b7f16ede9a3f39e6f4ef2ac87cfa4561844fdc69f","affectsGlobalScope":true,"impliedFormat":1},{"version":"d3dffd70e6375b872f0b4e152de4ae682d762c61a24881ecc5eb9f04c5caf76f","impliedFormat":1},{"version":"613deebaec53731ff6b74fe1a89f094b708033db6396b601df3e6d5ab0ec0a47","impliedFormat":1},{"version":"d91a7d8b5655c42986f1bdfe2105c4408f472831c8f20cf11a8c3345b6b56c8c","impliedFormat":1},{"version":"e56eb632f0281c9f8210eb8c86cc4839a427a4ffffcfd2a5e40b956050b3e042","affectsGlobalScope":true,"impliedFormat":1},{"version":"e8a979b8af001c9fc2e774e7809d233c8ca955a28756f52ee5dee88ccb0611d2","impliedFormat":1},{"version":"cac793cc47c29e26e4ac3601dcb00b4435ebed26203485790e44f2ad8b6ad847","impliedFormat":1},{"version":"3609e455ffcba8176c8ce0aa57f8258fe10cf03987e27f1fab68f702b4426521","impliedFormat":1},{"version":"d1bd4e51810d159899aad1660ccb859da54e27e08b8c9862b40cd36c1d9ff00f","impliedFormat":1},{"version":"17ed71200119e86ccef2d96b73b02ce8854b76ad6bd21b5021d4269bec527b5f","impliedFormat":1},{"version":"1cfa8647d7d71cb03847d616bd79320abfc01ddea082a49569fda71ac5ece66b","impliedFormat":1},{"version":"bb7a61dd55dc4b9422d13da3a6bb9cc5e89be888ef23bbcf6558aa9726b89a1c","impliedFormat":1},{"version":"413df52d4ea14472c2fa5bee62f7a40abd1eb49be0b9722ee01ee4e52e63beb2","impliedFormat":1},{"version":"db6d2d9daad8a6d83f281af12ce4355a20b9a3e71b82b9f57cddcca0a8964a96","impliedFormat":1},{"version":"77497ec7d02338725444582c8ae7eb2085243a9f8c4113ca40b9b4fd941f2319","impliedFormat":1},{"version":"24f8562308dd8ba6013120557fa7b44950b619610b2c6cb8784c79f11e3c4f90","impliedFormat":1},{"version":"ba1ae645ccbff0137326f99084f5cf87c9fa988c59906177d59deabeee9e428d","impliedFormat":1},{"version":"a86f82d646a739041d6702101afa82dcb935c416dd93cbca7fd754fd0282ce1f","impliedFormat":1},{"version":"57d6ac03382e30e9213641ff4f18cf9402bb246b77c13c8e848c0b1ca2b7ef92","impliedFormat":1},{"version":"ce75b1aebb33d510ff28af960a9221410a3eaf7f18fc5f21f9404075fba77256","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"496bbf339f3838c41f164238543e9fe5f1f10659cb30b68903851618464b98ba","impliedFormat":1},{"version":"44e0a682d3a20df46bbf8e7e37f2f10b1604d4ab08b3beda1c365e6d9c3ec74d","impliedFormat":1},{"version":"97395dc4fd32e20b8888849266065caf0b45d12575242c308e8604a4288ec3e5","impliedFormat":1},{"version":"9e2739b32f741859263fdba0244c194ca8e96da49b430377930b8f721d77c000","impliedFormat":1},{"version":"fb1d8e814a3eeb5101ca13515e0548e112bd1ff3fb358ece535b93e94adf5a3a","impliedFormat":1},{"version":"ffa495b17a5ef1d0399586b590bd281056cee6ce3583e34f39926f8dcc6ecdb5","impliedFormat":1},{"version":"98b18458acb46072947aabeeeab1e410f047e0cacc972943059ca5500b0a5e95","impliedFormat":1},{"version":"361e2b13c6765d7f85bb7600b48fde782b90c7c41105b7dab1f6e7871071ba20","impliedFormat":1},{"version":"c86fe861cf1b4c46a0fb7d74dffe596cf679a2e5e8b1456881313170f092e3fa","impliedFormat":1},{"version":"b6db56e4903e9c32e533b78ac85522de734b3d3a8541bf24d256058d464bf04b","impliedFormat":1},{"version":"24daa0366f837d22c94a5c0bad5bf1fd0f6b29e1fae92dc47c3072c3fdb2fbd5","impliedFormat":1},{"version":"570bb5a00836ffad3e4127f6adf581bfc4535737d8ff763a4d6f4cc877e60d98","impliedFormat":1},{"version":"889c00f3d32091841268f0b994beba4dceaa5df7573be12c2c829d7c5fbc232c","impliedFormat":1},{"version":"65f43099ded6073336e697512d9b80f2d4fec3182b7b2316abf712e84104db00","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881","impliedFormat":1},{"version":"12b8dfed70961bea1861e5d39e433580e71323abb5d33da6605182ec569db584","impliedFormat":1},{"version":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881","impliedFormat":1},{"version":"7e560f533aaf88cf9d3b427dcf6c112dd3f2ee26d610e2587583b6c354c753db","impliedFormat":1},{"version":"71e0082342008e4dfb43202df85ea0986ef8e003c921a1e49999d0234a3019da","impliedFormat":1},{"version":"27ab780875bcbb65e09da7496f2ca36288b0c541abaa75c311450a077d54ec15","impliedFormat":1},{"version":"b620391fe8060cf9bedc176a4d01366e6574d7a71e0ac0ab344a4e76576fcbb8","impliedFormat":1},{"version":"380647d8f3b7f852cca6d154a376dbf8ac620a2f12b936594504a8a852e71d2f","impliedFormat":1},{"version":"208c9af9429dd3c76f5927b971263174aaa4bc7621ddec63f163640cbd3c473c","impliedFormat":1},{"version":"6459054aabb306821a043e02b89d54da508e3a6966601a41e71c166e4ea1474f","impliedFormat":1},{"version":"a23185bc5ef590c287c28a91baf280367b50ae4ea40327366ad01f6f4a8edbc5","impliedFormat":1},{"version":"bb37588926aba35c9283fe8d46ebf4e79ffe976343105f5c6d45f282793352b2","impliedFormat":1},{"version":"002eae065e6960458bda3cf695e578b0d1e2785523476f8a9170b103c709cd4f","impliedFormat":1},{"version":"c51641ab4bfa31b7a50a0ca37edff67f56fab3149881024345b13f2b48b7d2de","impliedFormat":1},{"version":"05c97cddbaf99978f83d96de2d8af86aded9332592f08ce4a284d72d0952c391","impliedFormat":1},{"version":"72179f9dd22a86deaad4cc3490eb0fe69ee084d503b686985965654013f1391b","impliedFormat":1},{"version":"2e6114a7dd6feeef85b2c80120fdbfb59a5529c0dcc5bfa8447b6996c97a69f5","impliedFormat":1},{"version":"7b6ff760c8a240b40dab6e4419b989f06a5b782f4710d2967e67c695ef3e93c4","impliedFormat":1},{"version":"c8f004e6036aa1c764ad4ec543cf89a5c1893a9535c80ef3f2b653e370de45e6","impliedFormat":1},{"version":"dd80b1e600d00f5c6a6ba23f455b84a7db121219e68f89f10552c54ba46e4dc9","impliedFormat":1},{"version":"b064c36f35de7387d71c599bfcf28875849a1dbc733e82bd26cae3d1cd060521","impliedFormat":1},{"version":"6a148329edecbda07c21098639ef4254ef7869fb25a69f58e5d6a8b7b69d4236","impliedFormat":1},{"version":"8de9fe97fa9e00ec00666fa77ab6e91b35d25af8ca75dabcb01e14ad3299b150","impliedFormat":1},{"version":"f63ab283a1c8f5c79fabe7ca4ef85f9633339c4f0e822fce6a767f9d59282af2","impliedFormat":1},{"version":"dba114fb6a32b355a9cfc26ca2276834d72fe0e94cd2c3494005547025015369","impliedFormat":1},{"version":"a54c996c8870ef1728a2c1fa9b8eaec0bf4a8001cd2583c02dd5869289465b10","impliedFormat":1},{"version":"3e7efde639c6a6c3edb9847b3f61e308bf7a69685b92f665048c45132f51c218","impliedFormat":1},{"version":"df45ca1176e6ac211eae7ddf51336dc075c5314bc5c253651bae639defd5eec5","impliedFormat":1},{"version":"85e41df4579ceac0616fc81e1aee5c5222941609e6732698e7a551db4c06a78a","impliedFormat":1},{"version":"fa9e3ec3d9c2072368b2a12686580aff5d7bc41439efa1ee91b378a57f4864c2","impliedFormat":1},{"version":"f974e4a06953682a2c15d5bd5114c0284d5abf8bc0fe4da25cb9159427b70072","impliedFormat":1},{"version":"50256e9c31318487f3752b7ac12ff365c8949953e04568009c8705db802776fb","impliedFormat":1},{"version":"7d73b24e7bf31dfb8a931ca6c4245f6bb0814dfae17e4b60c9e194a631fe5f7b","impliedFormat":1},{"version":"8d1fd7b451f69cd173e6e20272e0d64ba4a8a1fe0eb3ef5f82134a5b0cb7c9df","impliedFormat":1},{"version":"d6e73f8010935b7b4c7487b6fb13ea197cc610f0965b759bec03a561ccf8423a","impliedFormat":1},{"version":"174f3864e398f3f33f9a446a4f403d55a892aa55328cf6686135dfaf9e171657","impliedFormat":1},{"version":"824c76aec8d8c7e65769688cbee102238c0ef421ed6686f41b2a7d8e7e78a931","impliedFormat":1},{"version":"75b868be3463d5a8cfc0d9396f0a3d973b8c297401d00bfb008a42ab16643f13","impliedFormat":1},{"version":"05c8cd040dc6b8aa18f310b12eaf0407dc4d122ec035dc5b0c9b97e795abfeec","impliedFormat":1},{"version":"d682336018141807fb602709e2d95a192828fcb8d5ba06dda3833a8ea98f69e3","impliedFormat":1},{"version":"6124e973eab8c52cabf3c07575204efc1784aca6b0a30c79eb85fe240a857efa","impliedFormat":1},{"version":"0d891735a21edc75df51f3eb995e18149e119d1ce22fd40db2b260c5960b914e","impliedFormat":1},{"version":"3b414b99a73171e1c4b7b7714e26b87d6c5cb03d200352da5342ab4088a54c85","impliedFormat":1},{"version":"51b1709e7ad186919a0e30237a8607100143a86d28771b3d3f046359aca1e65c","impliedFormat":1},{"version":"b01bd582a6e41457bc56e6f0f9de4cb17f33f5f3843a7cf8210ac9c18472fb0f","impliedFormat":1},{"version":"0a437ae178f999b46b6153d79095b60c42c996bc0458c04955f1c996dc68b971","impliedFormat":1},{"version":"74b2a5e5197bd0f2e0077a1ea7c07455bbea67b87b0869d9786d55104006784f","impliedFormat":1},{"version":"4a7baeb6325920044f66c0f8e5e6f1f52e06e6d87588d837bdf44feb6f35c664","impliedFormat":1},{"version":"6dcf60530c25194a9ee0962230e874ff29d34c59605d8e069a49928759a17e0a","impliedFormat":1},{"version":"7274fbffbd7c9589d8d0ffba68157237afd5cecff1e99881ea3399127e60572f","impliedFormat":1},{"version":"1a42d2ec31a1fe62fdc51591768695ed4a2dc64c01be113e7ff22890bebb5e3f","impliedFormat":1},{"version":"1a82deef4c1d39f6882f28d275cad4c01f907b9b39be9cbc472fcf2cf051e05b","impliedFormat":1},{"version":"c5426dbfc1cf90532f66965a7aa8c1136a78d4d0f96d8180ecbfc11d7722f1a5","impliedFormat":1},{"version":"65a15fc47900787c0bd18b603afb98d33ede930bed1798fc984d5ebb78b26cf9","impliedFormat":1},{"version":"9d202701f6e0744adb6314d03d2eb8fc994798fc83d91b691b75b07626a69801","impliedFormat":1},{"version":"de9d2df7663e64e3a91bf495f315a7577e23ba088f2949d5ce9ec96f44fba37d","impliedFormat":1},{"version":"c7af78a2ea7cb1cd009cfb5bdb48cd0b03dad3b54f6da7aab615c2e9e9d570c5","impliedFormat":1},{"version":"1ee45496b5f8bdee6f7abc233355898e5bf9bd51255db65f5ff7ede617ca0027","impliedFormat":1},{"version":"0c7c947ff881c4274c0800deaa0086971e0bfe51f89a33bd3048eaa3792d4876","affectsGlobalScope":true,"impliedFormat":1},{"version":"db01d18853469bcb5601b9fc9826931cc84cc1a1944b33cad76fd6f1e3d8c544","affectsGlobalScope":true,"impliedFormat":1},{"version":"a8f8e6ab2fa07b45251f403548b78eaf2022f3c2254df3dc186cb2671fe4996d","affectsGlobalScope":true,"impliedFormat":1},{"version":"fa6c12a7c0f6b84d512f200690bfc74819e99efae69e4c95c4cd30f6884c526e","impliedFormat":1},{"version":"f1c32f9ce9c497da4dc215c3bc84b722ea02497d35f9134db3bb40a8d918b92b","impliedFormat":1},{"version":"b73c319af2cc3ef8f6421308a250f328836531ea3761823b4cabbd133047aefa","affectsGlobalScope":true,"impliedFormat":1},{"version":"e433b0337b8106909e7953015e8fa3f2d30797cea27141d1c5b135365bb975a6","impliedFormat":1},{"version":"15b36126e0089bfef173ab61329e8286ce74af5e809d8a72edcafd0cc049057f","impliedFormat":1},{"version":"ddff7fc6edbdc5163a09e22bf8df7bef75f75369ebd7ecea95ba55c4386e2441","impliedFormat":1},{"version":"106c6025f1d99fd468fd8bf6e5bda724e11e5905a4076c5d29790b6c3745e50c","impliedFormat":1},{"version":"a57b1802794433adec9ff3fed12aa79d671faed86c49b09e02e1ac41b4f1d33a","impliedFormat":1},{"version":"ad10d4f0517599cdeca7755b930f148804e3e0e5b5a3847adce0f1f71bbccd74","impliedFormat":1},{"version":"1042064ece5bb47d6aba91648fbe0635c17c600ebdf567588b4ca715602f0a9d","impliedFormat":1},{"version":"4360ad4de54de2d5c642c4375d5eab0e7fe94ebe8adca907e6c186bbef75a54d","impliedFormat":1},{"version":"4a889f2c763edb4d55cb624257272ac10d04a1cad2ed2948b10ed4a7fda2a428","impliedFormat":1},{"version":"7bb79aa2fead87d9d56294ef71e056487e848d7b550c9a367523ee5416c44cfa","impliedFormat":1},{"version":"43542b120b07d198a86a21f6df97e6fe4a6327e960342777eefaa407baee2a62","impliedFormat":1},{"version":"090fa057d7b2c429119fde252e3b7276a7d75a3ec172a9a23aa922dfac5345e8","impliedFormat":1},{"version":"27ff4196654e6373c9af16b6165120e2dd2169f9ad6abb5c935af5abd8c7938c","impliedFormat":1},{"version":"24428762d0c97b44c4784d28eee9556547167c4592d20d542a79243f7ca6a73f","impliedFormat":1},{"version":"d6406c629bb3efc31aedb2de809bef471e475c86c7e67f3ef9b676b5d7e0d6b2","impliedFormat":1},{"version":"8c030e515014c10a2b98f9f48408e3ba18023dfd3f56e3312c6c2f3ae1f55a16","impliedFormat":1},{"version":"dafc31e9e8751f437122eb8582b93d477e002839864410ff782504a12f2a550c","impliedFormat":1},{"version":"4e31a4e6319cee44ce4cec0f8892c60289cfbdbec11dda19c85559bb8ab53bc2","impliedFormat":1},{"version":"9c82171d836c47486074e4ca8e059735bf97b205e70b196535b5efd40cbe1bc5","impliedFormat":1},{"version":"f56bdc6884648806d34bc66d31cdb787c4718d04105ce2cd88535db214631f82","impliedFormat":1},{"version":"20e06cdda4a8fdd7c1b548259f89f01b04e56a513e834463d7bac5632c7cf906","impliedFormat":1},{"version":"2e4f37ffe8862b14d8e24ae8763daaa8340c0df0b859d9a9733def0eee7562d9","impliedFormat":1},{"version":"13283350547389802aa35d9f2188effaeac805499169a06ef5cd77ce2a0bd63f","impliedFormat":1},{"version":"ce791f6ea807560f08065d1af6014581eeb54a05abd73294777a281b6dfd73c2","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"49f95e989b4632c6c2a578cc0078ee19a5831832d79cc59abecf5160ea71abad","impliedFormat":1},{"version":"21b4672313ae95583ade84f97ae6bbeaf242ecae783f5653e2e99ac4e21cbbe1","impliedFormat":1},{"version":"ce0df82a9ae6f914ba08409d4d883983cc08e6d59eb2df02d8e4d68309e7848b","impliedFormat":1},{"version":"796273b2edc72e78a04e86d7c58ae94d370ab93a0ddf40b1aa85a37a1c29ecd7","impliedFormat":1},{"version":"5df15a69187d737d6d8d066e189ae4f97e41f4d53712a46b2710ff9f8563ec9f","impliedFormat":1},{"version":"42c169fb8c2d42f4f668c624a9a11e719d5d07dacbebb63cbcf7ef365b0a75b3","impliedFormat":1},{"version":"e17cd049a1448de4944800399daa4a64c5db8657cc9be7ef46be66e2a2cd0e7c","impliedFormat":1},{"version":"d05fb434f4ba073aed74b6c62eff1723c835de2a963dbb091e000a2decb5a691","impliedFormat":1},{"version":"bff8c8bffbf5f302a30ccb1c0557dae477892d50a80eecfe393bd89bac7fb41d","impliedFormat":1},{"version":"43ba4f2fa8c698f5c304d21a3ef596741e8e85a810b7c1f9b692653791d8d97a","impliedFormat":1},{"version":"4d4927cbee21750904af7acf940c5e3c491b4d5ebc676530211e389dd375607a","impliedFormat":1},{"version":"72105519d0390262cf0abe84cf41c926ade0ff475d35eb21307b2f94de985778","impliedFormat":1},{"version":"8a97e578a9bc40eb4f1b0ca78f476f2e9154ecbbfd5567ee72943bab37fc156a","impliedFormat":1},{"version":"a58abf1f5c8feb335475097abeddd32fd71c4dc2065a3d28cf15cacabad9654a","impliedFormat":1},{"version":"ccf6dd45b708fb74ba9ed0f2478d4eb9195c9dfef0ff83a6092fa3cf2ff53b4f","impliedFormat":1},{"version":"2d7db1d73456e8c5075387d4240c29a2a900847f9c1bff106a2e490da8fbd457","impliedFormat":1},{"version":"2b15c805f48e4e970f8ec0b1915f22d13ca6212375e8987663e2ef5f0205e832","impliedFormat":1},{"version":"f22d05663d873ee7a600faf78abb67f3f719d32266803440cf11d5db7ac0cab2","impliedFormat":1},{"version":"d93c544ad20197b3976b0716c6d5cd5994e71165985d31dcab6e1f77feb4b8f2","impliedFormat":1},{"version":"35069c2c417bd7443ae7c7cafd1de02f665bf015479fec998985ffbbf500628c","impliedFormat":1},{"version":"a8b1c79a833ee148251e88a2553d02ce1641d71d2921cce28e79678f3d8b96aa","impliedFormat":1},{"version":"126d4f950d2bba0bd45b3a86c76554d4126c16339e257e6d2fabf8b6bf1ce00c","impliedFormat":1},{"version":"9e21f8e2c0cfea713a4a372f284b60089c0841eb90bf3610539d89dbcd12d65a","impliedFormat":1},{"version":"045b752f44bf9bbdcaffd882424ab0e15cb8d11fa94e1448942e338c8ef19fba","impliedFormat":1},{"version":"2894c56cad581928bb37607810af011764a2f511f575d28c9f4af0f2ef02d1ab","impliedFormat":1},{"version":"0a72186f94215d020cb386f7dca81d7495ab6c17066eb07d0f44a5bf33c1b21a","impliedFormat":1},{"version":"7fa117f0f4f132ba132794982a35c840287997ee186753f78abe48508812c238","impliedFormat":1},{"version":"6ce54b2cfe4cf91138e2f5f114fe222a8819968336385cbcafd26ca89ebd4f50","impliedFormat":1},{"version":"b612fc66f534bd447bb1d5d52a29217a80780e1d57633875c9d8a333503f378a","impliedFormat":1},{"version":"0e8aef93d79b000deb6ec336b5645c87de167168e184e84521886f9ecc69a4b5","impliedFormat":1},{"version":"56ccb49443bfb72e5952f7012f0de1a8679f9f75fc93a5c1ac0bafb28725fc5f","impliedFormat":1},{"version":"d90b9f1520366d713a73bd30c5a9eb0040d0fb6076aff370796bc776fd705943","impliedFormat":1},{"version":"05321b823dd3781d0b6aac8700bfdc0c9181d56479fe52ba6a40c9196fd661a8","impliedFormat":1},{"version":"736a8712572e21ee73337055ce15edb08142fc0f59cd5410af4466d04beff0f9","affectsGlobalScope":true,"impliedFormat":1},{"version":"bef86adb77316505c6b471da1d9b8c9e428867c2566270e8894d4d773a1c4dc2","impliedFormat":1},{"version":"a7d72cf676f5117df919b8a73da2cfa20cf9939fdb263fd496fb77f95c35335d","impliedFormat":1},{"version":"a3e7d932dc9c09daa99141a8e4800fc6c58c625af0d4bbb017773dc36da75426","impliedFormat":1},{"version":"43e96a3d5d1411ab40ba2f61d6a3192e58177bcf3b133a80ad2a16591611726d","impliedFormat":1},{"version":"219e5e67ea4630410167444a715ecc172d9462b7910cd066eca18f6ed27d907b","impliedFormat":1},{"version":"ca921bf56756cb6fe957f6af693a35251b134fb932dc13f3dfff0bb7106f80b4","impliedFormat":1},{"version":"fee92c97f1aa59eb7098a0cc34ff4df7e6b11bae71526aca84359a2575f313d8","impliedFormat":1},{"version":"acfbb7b38e876b43cb07d0c8bd1a2e84dd641d9d2b67d772e8977337398bfff5","impliedFormat":1},{"version":"2ab6d334bcbf2aff3acfc4fd8c73ecd82b981d3c3aa47b3f3b89281772286904","impliedFormat":1},{"version":"d07cbc787a997d83f7bde3877fec5fb5b12ce8c1b7047eb792996ed9726b4dde","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"268c6788d4791a66cc5c153c41d2313d6f3c0d3e35edce3ce05e21c31f972ae0","impliedFormat":1},{"version":"b83cb14474fa60c5f3ec660146b97d122f0735627f80d82dd03e8caa39b4388c","impliedFormat":1},{"version":"f374cb24e93e7798c4d9e83ff872fa52d2cdb36306392b840a6ddf46cb925cb6","impliedFormat":1},{"version":"6ad71551fba5dbf440780090c82f5e0a7b64f602e0f0f678317659f12131f253","impliedFormat":1},{"version":"b73cbf0a72c8800cf8f96a9acfe94f3ad32ca71342a8908b8ae484d61113f647","impliedFormat":1},{"version":"bae6dd176832f6423966647382c0d7ba9e63f8c167522f09a982f086cd4e8b23","impliedFormat":1},{"version":"20865ac316b8893c1a0cc383ccfc1801443fbcc2a7255be166cf90d03fac88c9","impliedFormat":1},{"version":"c9958eb32126a3843deedda8c22fb97024aa5d6dd588b90af2d7f2bfac540f23","impliedFormat":1},{"version":"461d0ad8ae5f2ff981778af912ba71b37a8426a33301daa00f21c6ccb27f8156","impliedFormat":1},{"version":"e927c2c13c4eaf0a7f17e6022eee8519eb29ef42c4c13a31e81a611ab8c95577","impliedFormat":1},{"version":"fcafff163ca5e66d3b87126e756e1b6dfa8c526aa9cd2a2b0a9da837d81bbd72","impliedFormat":1},{"version":"70246ad95ad8a22bdfe806cb5d383a26c0c6e58e7207ab9c431f1cb175aca657","impliedFormat":1},{"version":"f00f3aa5d64ff46e600648b55a79dcd1333458f7a10da2ed594d9f0a44b76d0b","impliedFormat":1},{"version":"772d8d5eb158b6c92412c03228bd9902ccb1457d7a705b8129814a5d1a6308fc","impliedFormat":1},{"version":"45490817629431853543adcb91c0673c25af52a456479588b6486daba34f68bb","impliedFormat":1},{"version":"802e797bcab5663b2c9f63f51bdf67eff7c41bc64c0fd65e6da3e7941359e2f7","impliedFormat":1},{"version":"8b4327413e5af38cd8cb97c59f48c3c866015d5d642f28518e3a891c469f240e","impliedFormat":1},{"version":"cd767eea328a0ed87d2e028147a022f209fadf420199254253a6cffe8e234df8","impliedFormat":1},{"version":"4b20fcf10a5413680e39f5666464859fc56b1003e7dfe2405ced82371ebd49b6","impliedFormat":1},{"version":"f0f3f57e29b40e9cb0c4b155a96de2f61e51700d2c335dd547ef3c85e668c6a8","impliedFormat":1},{"version":"f7d628893c9fa52ba3ab01bcb5e79191636c4331ee5667ecc6373cbccff8ae12","impliedFormat":1},{"version":"a169ba2d40cc94a500759aa86eded1f63395252bb7508a8b67dc681ff413ac8d","impliedFormat":1},{"version":"6a76daf108400ca1333e325772f24f40ebdde2120ef68f8c87d7a1adf0257541","impliedFormat":1},{"version":"7fa321c806b965bac02883573db0b1466e5edd14c479d156079eb08f1086f1d1","impliedFormat":1},{"version":"d663134457d8d669ae0df34eabd57028bddc04fc444c4bc04bc5215afc91e1f4","impliedFormat":1},{"version":"a52674bc98da7979607e0f44d4c015c59c1b1d264c83fc50ec79ff2cfea06723","impliedFormat":1},{"version":"89b3d1b267c4380fbb8e5cadccbb284843b90066f16a2f6e8a5b3a030bb7dcfb","impliedFormat":1},{"version":"8514c62ce38e58457d967e9e73f128eedc1378115f712b9eef7127f7c88f82ae","impliedFormat":1},{"version":"01698747a0d3c3ebf261865f9f912658aff9b726f7ebda11e19222725cfb0965","impliedFormat":1},{"version":"9b06ce81ad598c9c6b011cb66182fa66575ad6bd1f8f655830a6a0223a197ab7","impliedFormat":1},{"version":"d9d32f94056181c31f553b32ce41d0ef75004912e27450738d57efcd2409c324","impliedFormat":1},{"version":"752513f35f6cff294ffe02d6027c41373adf7bfa35e593dbfd53d95c203635ee","impliedFormat":1},{"version":"6c800b281b9e89e69165fd11536195488de3ff53004e55905e6c0059a2d8591e","impliedFormat":1},{"version":"7d4254b4c6c67a29d5e7f65e67d72540480ac2cfb041ca484847f5ae70480b62","impliedFormat":1},{"version":"1ee834bfd4a06aafdc46f5542d089565a26e031ebf854ef5b08cb75ec42d68fb","impliedFormat":1},{"version":"8c901126d73f09ecdea4785e9a187d1ac4e793e07da308009db04a7283ec2f37","impliedFormat":1},{"version":"db97922b767bd2675fdfa71e08b49c38b7d2c847a1cc4a7274cb77be23b026f1","impliedFormat":1},{"version":"e2f64b40fe8d3a77d5462dc4a75ead61c76bf464208b506c1465dac4e195f710","impliedFormat":1},{"version":"94fe3281392e1015b22f39535878610b4fa6f1388dc8d78746be3bc4e4bb8950","impliedFormat":1},{"version":"2652448ac55a2010a1f71dd141f828b682298d39728f9871e1cdf8696ef443fd","impliedFormat":1},{"version":"e3a9871a4a736910b0b77bc063d5f9c272578b3743269ebe93b275b0c52a9815","impliedFormat":1},{"version":"120599fd965257b1f4d0ff794bc696162832d9d8467224f4665f713a3119078b","impliedFormat":1},{"version":"5433f33b0a20300cca35d2f229a7fc20b0e8477c44be2affeb21cb464af60c76","impliedFormat":1},{"version":"db036c56f79186da50af66511d37d9fe77fa6793381927292d17f81f787bb195","impliedFormat":1},{"version":"bd4131091b773973ca5d2326c60b789ab1f5e02d8843b3587effe6e1ea7c9d86","impliedFormat":1},{"version":"c7f6485931085bf010fbaf46880a9b9ec1a285ad9dc8c695a9e936f5a48f34b4","impliedFormat":1},{"version":"73a39452c4b498728757c4a7f756a3b9bed1f8a02c278cb803665cc7897e6930","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"0427df5c06fafc5fe126d14b9becd24160a288deff40e838bfbd92a35f8d0d00","impliedFormat":1},{"version":"191a32cecf67da01119a7bce3132228fa9388e2bbfc5c1662542e71f9f20134a","impliedFormat":1},{"version":"49c346823ba6d4b12278c12c977fb3a31c06b9ca719015978cb145eb86da1c61","impliedFormat":1},{"version":"bfac6e50eaa7e73bb66b7e052c38fdc8ccfc8dbde2777648642af33cf349f7f1","impliedFormat":1},{"version":"92f7c1a4da7fbfd67a2228d1687d5c2e1faa0ba865a94d3550a3941d7527a45d","impliedFormat":1},{"version":"f53b120213a9289d9a26f5af90c4c686dd71d91487a0aa5451a38366c70dc64b","impliedFormat":1},{"version":"83fe880c090afe485a5c02262c0b7cdd76a299a50c48d9bde02be8e908fb4ae6","impliedFormat":1},{"version":"0a372c2d12a259da78e21b25974d2878502f14d89c6d16b97bd9c5017ab1bc12","impliedFormat":1},{"version":"57d67b72e06059adc5e9454de26bbfe567d412b962a501d263c75c2db430f40e","impliedFormat":1},{"version":"6511e4503cf74c469c60aafd6589e4d14d5eb0a25f9bf043dcbecdf65f261972","impliedFormat":1},{"version":"885e0c913a60577fa4827e5412055011a7532124fd9e054febb6808b0d7fec3d","impliedFormat":1},{"version":"6e2261cd9836b2c25eecb13940d92c024ebed7f8efe23c4b084145cd3a13b8a6","impliedFormat":1},{"version":"a67b87d0281c97dfc1197ef28dfe397fc2c865ccd41f7e32b53f647184cc7307","impliedFormat":1},{"version":"771ffb773f1ddd562492a6b9aaca648192ac3f056f0e1d997678ff97dbb6bf9b","impliedFormat":1},{"version":"232f70c0cf2b432f3a6e56a8dc3417103eb162292a9fd376d51a3a9ea5fbbf6f","impliedFormat":1},{"version":"d7ed1f4bd5589cb08f3af26839a0dc2472e4d1a3c380e167f0186b1f5e7c27d3","impliedFormat":1},{"version":"cfb5f0ab72180f4e0b9ed1534847a63d5394b9a8ee685ae149d25fd53f1aec66","impliedFormat":1},{"version":"8a0e762ceb20c7e72504feef83d709468a70af4abccb304f32d6b9bac1129b2c","impliedFormat":1},{"version":"26f83053ec70baea288b5281deb2cf11f6f9ea79bc654db1a6602b0b7ec085ff","impliedFormat":1},{"version":"9252d498a77517aab5d8d4b5eb9d71e4b225bbc7123df9713e08181de63180f6","impliedFormat":1},{"version":"c3b0db2267ff477aa00683219dd8738cd24a930da4df23fecb5910f27e7e49b3","impliedFormat":1},{"version":"35e6379c3f7cb27b111ad4c1aa69538fd8e788ab737b8ff7596a1b40e96f4f90","impliedFormat":1},{"version":"1fffe726740f9787f15b532e1dc870af3cd964dbe29e191e76121aa3dd8693f2","impliedFormat":1},{"version":"a3128a84a9568762a2996df79717d92154d18dd894681fc0ab3a098fa7f8ee3b","affectsGlobalScope":true,"impliedFormat":1},{"version":"4c12b845a35c0f753c1cf29d7d042d4da0206b1ba040a9bfff193a086bcdc248","impliedFormat":1},{"version":"2896c2e673a5d3bd9b4246811f79486a073cbb03950c3d252fba10003c57411a","impliedFormat":1},{"version":"616775f16134fa9d01fc677ad3f76e68c051a056c22ab552c64cc281a9686790","impliedFormat":1},{"version":"65c24a8baa2cca1de069a0ba9fba82a173690f52d7e2d0f1f7542d59d5eb4db0","impliedFormat":1},{"version":"f9fe6af238339a0e5f7563acee3178f51db37f32a2e7c09f85273098cee7ec49","impliedFormat":1},{"version":"51bf55bb6eb80f11b3aa59fb0a9571565a7ea304a19381f6da5630f4b2e206c4","impliedFormat":1},{"version":"77e71242e71ebf8528c5802993697878f0533db8f2299b4d36aa015bae08a79c","impliedFormat":1},{"version":"98a787be42bd92f8c2a37d7df5f13e5992da0d967fab794adbb7ee18370f9849","impliedFormat":1},{"version":"5c96bad5f78466785cdad664c056e9e2802d5482ca5f862ed19ba34ffbb7b3a4","impliedFormat":1},{"version":"b7fff2d004c5879cae335db8f954eb1d61242d9f2d28515e67902032723caeab","impliedFormat":1},{"version":"5f3dc10ae646f375776b4e028d2bed039a93eebbba105694d8b910feebbe8b9c","impliedFormat":1},{"version":"bb0cd7862b72f5eba39909c9889d566e198fcaddf7207c16737d0c2246112678","impliedFormat":1},{"version":"4545c1a1ceca170d5d83452dd7c4994644c35cf676a671412601689d9a62da35","impliedFormat":1},{"version":"320f4091e33548b554d2214ce5fc31c96631b513dffa806e2e3a60766c8c49d9","impliedFormat":1},{"version":"a2d648d333cf67b9aeac5d81a1a379d563a8ffa91ddd61c6179f68de724260ff","impliedFormat":1},{"version":"d90d5f524de38889d1e1dbc2aeef00060d779f8688c02766ddb9ca195e4a713d","impliedFormat":1},{"version":"a3f41ed1b4f2fc3049394b945a68ae4fdefd49fa1739c32f149d32c0545d67f5","impliedFormat":1},{"version":"bad68fd0401eb90fe7da408565c8aee9c7a7021c2577aec92fa1382e8876071a","impliedFormat":1},{"version":"47699512e6d8bebf7be488182427189f999affe3addc1c87c882d36b7f2d0b0e","impliedFormat":1},{"version":"fec01479923e169fb52bd4f668dbeef1d7a7ea6e6d491e15617b46f2cacfa37d","impliedFormat":1},{"version":"8a8fb3097ba52f0ae6530ec6ab34e43e316506eb1d9aa29420a4b1e92a81442d","impliedFormat":1},{"version":"44e09c831fefb6fe59b8e65ad8f68a7ecc0e708d152cfcbe7ba6d6080c31c61e","impliedFormat":1},{"version":"1c0a98de1323051010ce5b958ad47bc1c007f7921973123c999300e2b7b0ecc0","impliedFormat":1},{"version":"4655709c9cb3fd6db2b866cab7c418c40ed9533ce8ea4b66b5f17ec2feea46a9","impliedFormat":1},{"version":"87affad8e2243635d3a191fa72ef896842748d812e973b7510a55c6200b3c2a4","impliedFormat":1},{"version":"ad036a85efcd9e5b4f7dd5c1a7362c8478f9a3b6c3554654ca24a29aa850a9c5","impliedFormat":1},{"version":"fedebeae32c5cdd1a85b4e0504a01996e4a8adf3dfa72876920d3dd6e42978e7","impliedFormat":1},{"version":"2c3a42dbc1d6ef817733691513b6421c8d1aa607afe3601904e3d31f1f72324a","impliedFormat":1},{"version":"cdf21eee8007e339b1b9945abf4a7b44930b1d695cc528459e68a3adc39a622e","impliedFormat":1},{"version":"330896c1a2b9693edd617be24fbf9e5895d6e18c7955d6c08f028f272b37314d","impliedFormat":1},{"version":"1d9c0a9a6df4e8f29dc84c25c5aa0bb1da5456ebede7a03e03df08bb8b27bae6","impliedFormat":1},{"version":"84380af21da938a567c65ef95aefb5354f676368ee1a1cbb4cae81604a4c7d17","impliedFormat":1},{"version":"1af3e1f2a5d1332e136f8b0b95c0e6c0a02aaabd5092b36b64f3042a03debf28","impliedFormat":1},{"version":"30d8da250766efa99490fc02801047c2c6d72dd0da1bba6581c7e80d1d8842a4","impliedFormat":1},{"version":"03566202f5553bd2d9de22dfab0c61aa163cabb64f0223c08431fb3fc8f70280","impliedFormat":1},{"version":"9a01f12466488eccd8d9eafc8fecb9926c175a4bf4a8f73a07c3bcf8b3363282","impliedFormat":1},{"version":"b80f624162276f24a4ec78b8e86fbee80ca255938e12f8b58e7a8f1a6937120b","impliedFormat":1},{"version":"1de80059b8078ea5749941c9f863aa970b4735bdbb003be4925c853a8b6b4450","impliedFormat":1},{"version":"1d079c37fa53e3c21ed3fa214a27507bda9991f2a41458705b19ed8c2b61173d","impliedFormat":1},{"version":"5bf5c7a44e779790d1eb54c234b668b15e34affa95e78eada73e5757f61ed76a","impliedFormat":1},{"version":"5835a6e0d7cd2738e56b671af0e561e7c1b4fb77751383672f4b009f4e161d70","impliedFormat":1},{"version":"5c634644d45a1b6bc7b05e71e05e52ec04f3d73d9ac85d5927f647a5f965181a","impliedFormat":1},{"version":"4b7f74b772140395e7af67c4841be1ab867c11b3b82a51b1aeb692822b76c872","impliedFormat":1},{"version":"27be6622e2922a1b412eb057faa854831b95db9db5035c3f6d4b677b902ab3b7","impliedFormat":1},{"version":"a68d4b3182e8d776cdede7ac9630c209a7bfbb59191f99a52479151816ef9f9e","impliedFormat":99},{"version":"39644b343e4e3d748344af8182111e3bbc594930fff0170256567e13bbdbebb0","impliedFormat":99},{"version":"ed7fd5160b47b0de3b1571c5c5578e8e7e3314e33ae0b8ea85a895774ee64749","impliedFormat":99},{"version":"63a7595a5015e65262557f883463f934904959da563b4f788306f699411e9bac","impliedFormat":1},{"version":"9e40365afca304124bc53eb03412643abf074a1580e4dc279a7a16000d11f985","impliedFormat":1},{"version":"4ba137d6553965703b6b55fd2000b4e07ba365f8caeb0359162ad7247f9707a6","impliedFormat":1},{"version":"ceec3c81b2d81f5e3b855d9367c1d4c664ab5046dff8fd56552df015b7ccbe8f","affectsGlobalScope":true,"impliedFormat":1},{"version":"8fac4a15690b27612d8474fb2fc7cc00388df52d169791b78d1a3645d60b4c8b","affectsGlobalScope":true,"impliedFormat":1},{"version":"064ac1c2ac4b2867c2ceaa74bbdce0cb6a4c16e7c31a6497097159c18f74aa7c","impliedFormat":1},{"version":"3dc14e1ab45e497e5d5e4295271d54ff689aeae00b4277979fdd10fa563540ae","impliedFormat":1},{"version":"1d63055b690a582006435ddd3aa9c03aac16a696fac77ce2ed808f3e5a06efab","impliedFormat":1},{"version":"b789bf89eb19c777ed1e956dbad0925ca795701552d22e68fd130a032008b9f9","impliedFormat":1},"9a964c445118d72402f630b029a9f48cb1b5682c49df14ec08e66513096929ec",{"version":"402e5c534fb2b85fa771170595db3ac0dd532112c8fa44fc23f233bc6967488b","impliedFormat":1},{"version":"8885cf05f3e2abf117590bbb951dcf6359e3e5ac462af1c901cfd24c6a6472e2","impliedFormat":1},{"version":"333caa2bfff7f06017f114de738050dd99a765c7eb16571c6d25a38c0d5365dc","impliedFormat":1},{"version":"e61df3640a38d535fd4bc9f4a53aef17c296b58dc4b6394fd576b808dd2fe5e6","impliedFormat":1},{"version":"459920181700cec8cbdf2a5faca127f3f17fd8dd9d9e577ed3f5f3af5d12a2e4","impliedFormat":1},{"version":"4719c209b9c00b579553859407a7e5dcfaa1c472994bd62aa5dd3cc0757eb077","impliedFormat":1},{"version":"7ec359bbc29b69d4063fe7dad0baaf35f1856f914db16b3f4f6e3e1bca4099fa","impliedFormat":1},{"version":"70790a7f0040993ca66ab8a07a059a0f8256e7bb57d968ae945f696cbff4ac7a","impliedFormat":1},{"version":"d1b9a81e99a0050ca7f2d98d7eedc6cda768f0eb9fa90b602e7107433e64c04c","impliedFormat":1},{"version":"a022503e75d6953d0e82c2c564508a5c7f8556fad5d7f971372d2d40479e4034","impliedFormat":1},{"version":"b215c4f0096f108020f666ffcc1f072c81e9f2f95464e894a5d5f34c5ea2a8b1","impliedFormat":1},{"version":"644491cde678bd462bb922c1d0cfab8f17d626b195ccb7f008612dc31f445d2d","impliedFormat":1},{"version":"dfe54dab1fa4961a6bcfba68c4ca955f8b5bbeb5f2ab3c915aa7adaa2eabc03a","impliedFormat":1},{"version":"1251d53755b03cde02466064260bb88fd83c30006a46395b7d9167340bc59b73","impliedFormat":1},{"version":"47865c5e695a382a916b1eedda1b6523145426e48a2eae4647e96b3b5e52024f","impliedFormat":1},{"version":"4cdf27e29feae6c7826cdd5c91751cc35559125e8304f9e7aed8faef97dcf572","impliedFormat":1},{"version":"331b8f71bfae1df25d564f5ea9ee65a0d847c4a94baa45925b6f38c55c7039bf","impliedFormat":1},{"version":"2a771d907aebf9391ac1f50e4ad37952943515eeea0dcc7e78aa08f508294668","impliedFormat":1},{"version":"0146fd6262c3fd3da51cb0254bb6b9a4e42931eb2f56329edd4c199cb9aaf804","impliedFormat":1},{"version":"183f480885db5caa5a8acb833c2be04f98056bdcc5fb29e969ff86e07efe57ab","impliedFormat":99},{"version":"b558c9a18ea4e6e4157124465c3ef1063e64640da139e67be5edb22f534f2f08","impliedFormat":1},{"version":"01374379f82be05d25c08d2f30779fa4a4c41895a18b93b33f14aeef51768692","impliedFormat":1},{"version":"b0dee183d4e65cf938242efaf3d833c6b645afb35039d058496965014f158141","impliedFormat":1},{"version":"c0bbbf84d3fbd85dd60d040c81e8964cc00e38124a52e9c5dcdedf45fea3f213","impliedFormat":1},"dc5c07cd093759987b2256640dab03e70fba82353a2ad2ec222825a74e4aafb8","4ed074fa415b7b224a937b13b381d3b1b6f7d3b3f4ddfdd0e2084868f28fc444","c5564e0e17daece7ca6016dd0ea35c52ecd77abe8f3e1f1e9e06c60548238ff7","937596ad97cb4141274b6117a94e2cf282c98e97282b4770a53814b56d0c8b39","69f3da491596777506fae47d2f5e178bdbb88bb53af48498e87b6add6a07167e","ee1ecf6c74885cc79779904d10d138a839373ce9e8efa48efbfd86d2f47f8ae6","037ba4895ddac901afed6733a999756a651ce442176f43b6cd524d84ea6424b5","8d4c9b7e2fbec87bee8fa08d0124728673ead2a6eb99d225895422b0f346b0d1",{"version":"a9373d52584b48809ffd61d74f5b3dfd127da846e3c4ee3c415560386df3994b","impliedFormat":99},{"version":"caf4af98bf464ad3e10c46cf7d340556f89197aab0f87f032c7b84eb8ddb24d9","impliedFormat":99},{"version":"7ec047b73f621c526468517fea779fec2007dd05baa880989def59126c98ef79","impliedFormat":99},{"version":"c5013d60cbff572255ccc87c314c39e198c8cc6c5aa7855db7a21b79e06a510f","impliedFormat":99},{"version":"c57b441e0c0a9cbdfa7d850dae1f8a387d6f81cbffbc3cd0465d530084c2417d","impliedFormat":99},{"version":"2fbe402f0ee5aa8ab55367f88030f79d46211c0a0f342becaa9f648bf8534e9d","impliedFormat":1},{"version":"b94258ef37e67474ac5522e9c519489a55dcb3d4a8f645e335fc68ea2215fe88","impliedFormat":1},{"version":"6717dad91e44ad22d68f1fc0db74e5eb5398c2c06a2943bf06d3a168e8b1ba45","impliedFormat":99},{"version":"26c57c9f839e6d2048d6c25e81f805ba0ca32a28fd4d824399fd5456c9b0575b","impliedFormat":1},"4acbc7165a8d54738ff62b51414e772c08fe78434e524e6d8770180d3ba2925f","c75c1d4fd1e4cc28fdeccb5b647903aeb0d1367d5fe86a01b6d73ff8a7ea52f5","cb64b656247d967f33359478ec617e43d02d55d27d270b82c65acc935b74e1d8","35650105a1b2f6a36ee14ca3b3e4720cfff6cb9c05872d8095613fef7ef60353","5737d334f0bd4d311712234a2fdbb85da70986889480a4242d48ded39f171ebd","113b5fb7cd27f39c841934fad6ece9b858d022c12f3ff8cb297a4baa6589388c","c608321d6378affdeb6f0f3f5b41cf49562a02dd732864029c92f14121342fea",{"version":"4d7d964609a07368d076ce943b07106c5ebee8138c307d3273ba1cf3a0c3c751","impliedFormat":99},{"version":"0e48c1354203ba2ca366b62a0f22fec9e10c251d9d6420c6d435da1d079e6126","impliedFormat":99},{"version":"0662a451f0584bb3026340c3661c3a89774182976cd373eca502a1d3b5c7b580","impliedFormat":99},"443c82f8ccc9657e82ae6c94e49ffd336b0368e75a38d192963efaf7c9d7cbcd",{"version":"31b72e5bc90a8e4318618570784ce733fc8f284a044222faabb600ae5ccbe10a","impliedFormat":1},"f37fc6b6efa733cd1b6557c3d8ead0228cb2b695da4a29d8a86f257f6a202535","0628961ef3166ee094321f58043a416ebd7f756de3cdb4a5f7a0e358252a657d","e122408f54eba18c49fa70e55dca5423827af1854f99665d07873df6b2fd796b","34d8a5b58c5a5aa00efa7fdc941e2705bc29d01648d199afe75d34915ca96e3f","e9e9d1cbbf50518dcaa8dfc53c8d062a8321600bc67012c0fd2b89dbe2467f79","5b9133b3d3a39183d9191d3bd422efc8018d56269d273afbd0c50e2e2583e63e","dbd04ef2243062a79c6f41ecc2b7182b5e07be04319365dc429cd616ceb234c8","db2142cb213d1f41b70c2797567e2156659880afe52de17e25b0cf37c9be4bc5",{"version":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881","impliedFormat":99},{"version":"071b7831d2b9e89b10b6ab494bf0131b76a1e44c08773aef34210ba559fba443","impliedFormat":99},{"version":"1599036538e7d4c49e2c86bc04545b4ca118badaf230c3c774e088ee376d677b","impliedFormat":99},{"version":"ceeed3d32c7364f915ba4e1fd94253a6698a59b95fe63df7a0ef01290c00bb02","impliedFormat":99},{"version":"2d76e72cd9756a5a0e510fe8926f675578566addd253c964d8ad0c1ec74a944e","impliedFormat":99},{"version":"0b810642546e69a916e1663a6a26159342121df8271bcf1f4cc64dac6c23d3a5","impliedFormat":99},{"version":"5a7490ebabd57bc161aa09201a269513a53d1eba797d02bbeb8d376a124e3d4e","impliedFormat":99},{"version":"aee06ffe9cecf9d3abad20ac137e237beb3427a21fdf4763cda55a8655900392","impliedFormat":99},{"version":"1b89afcc580d1a9685c522ec8bfa6ef6ae185dc8a6ef4613f0aeea39bdf1987d","impliedFormat":99},{"version":"cfab8001ca1eefb196564c8184f353ddd894ad2054a2f75a7a5f96c11c0e0f2a","impliedFormat":99},{"version":"1d79115996def13214f0d6fb94210bcc6be92d416199784a5f5f86b7148c75c0","impliedFormat":99},{"version":"09729d299a3e3915172d62711b19603dc6db8025dc0bbf19ddf3a5a1292c3991","impliedFormat":99},{"version":"333f85d395a9e70c6026e77ccee0a97f8b62573badccb41b280e58881a11dfab","impliedFormat":99},{"version":"1ee78636004e4640142058a0a95184e8f2c918a7666f11f1d6a3856ba98c8f8f","impliedFormat":99},{"version":"799fc5bf192d886ca70f092805f5f63968f29c9de38fcb19436b4792883d6957","impliedFormat":99},{"version":"cf54f884ef383b095bf8c3d08d58858966211115af9c2e4e80e41d0847b3fd05","impliedFormat":99},{"version":"64a7beca9af9383845070d849164a55164d97fe8eaf9155759e95c3f2132fbd0","impliedFormat":99},{"version":"a89754ed964f6ebc78fd658d2078437abd981c9fd79da106cea894cf949145cf","impliedFormat":99},{"version":"cccd3568a1d6aa81546bb003a25b9ca1e9e33039633272140fc5350682f922c5","impliedFormat":99},{"version":"5d60135f72d586ed2bc5828105aeeb28907b7cc2c0a8a5a4f9281222cbfabc7c","impliedFormat":99},{"version":"ca70b4d354de24f8ebf574e20535cc6ac98b0bf6b5e0f95e7e4f6c00b8ff2358","impliedFormat":99},{"version":"6183456337b84e9aef77dacffb061e858a13b312ae642f4d80a9e2a46ab628c8","impliedFormat":99},{"version":"e69b3e921b67f33003b49019a8601fec3f8a15dc39fddfb98cce88129ce67bbd","impliedFormat":99},{"version":"30e709822f5ea586d5d2844f0245d3994a4fac1b8703da687270b38b3fc1d992","impliedFormat":99},{"version":"7b1910b0e4d0bec23677d7f1c16dc3a4c72ece79590f8f2d5b6acf6bb8522991","impliedFormat":99},{"version":"823664d44b0a18a222303f3bbd5e9ef6d2c6e2a651081340c488fa27ffcbbf20","impliedFormat":99},{"version":"1579f50be97f7cce9e7ba2bf8feb48ef43b32c515105273eb1cf9c9106575140","impliedFormat":99},{"version":"4e9c145c48830622e87665c7ff73b12a7a23a5fdb9d5b9935908e3c473737b43","impliedFormat":99},{"version":"1e0a42706894cc3d3e7c54c56a28ea522df812c782472ac3b634a451633943eb","impliedFormat":99},{"version":"d2785349170d322f7ce586b56039bc30828f9df17484a99956762066aacaa260","impliedFormat":99},{"version":"bac8c54884ba6042517ddf3af40bb3f08dee96a209cd0070514dcd00285cadae","impliedFormat":99},{"version":"bc4f66a3fc58bbb330dde58abbaa83394014d72a2c5eb7aa98ff63f1ec82e618","impliedFormat":99},{"version":"2046163487d04797bdb48ff49f4b5366a755d999d7e1e63af2ae55a5fa5bd584","impliedFormat":99},{"version":"b9c65aad80c8e83157996f05158b4a8850a65828cd07ad555e3ef4b2f6141e83","impliedFormat":99},{"version":"034b024e6f6fb73b1653c3a52385465cd872ff26a20d5609a5e7d026c68a6c20","impliedFormat":99},{"version":"01a696874638bcba76faf2e2305e51929b41fa806e3ed7a2032437592ac7c07f","impliedFormat":99},{"version":"1f39906602f48c9639386d0f33e1f3f2b81f5056b59e29319eda7a01545caa91","impliedFormat":99},{"version":"5a1da4704596e0ddd7a5246bd6cce7aea4664cfc961645688529dea4d0bc3010","impliedFormat":99},{"version":"8ed8a5ab3dc5a22f9eccc6c2b55b90d708cb634157ff60993cce1171bd68c59e","impliedFormat":99},{"version":"8db766cd789564aca8450c7835ceeb98ee75531521234ff1bd06b0968a90d9ce","impliedFormat":99},{"version":"18dec633858d249cb6f8770871a776ec1bbfae04b32711b01692c0acb1028bc5","impliedFormat":99},{"version":"f114730b8f816391d0d8555267312bb8b80c71ea5edd99521e4ff242d7db2838","impliedFormat":99},{"version":"7c8fbb686532ec49bc2a345b13456b4780be38c087318f871bce06c838644b96","impliedFormat":99},{"version":"c3109738632210f2b689744c77d20cba494126ca647f356219fb149fe2f2aeb0","impliedFormat":99},{"version":"cd2fab22c23cb661a558483c6163bf3e2d73663f5d462836fb543848b2208243","impliedFormat":99},{"version":"7e4337d2fa0a25cf296f0d62282a8e125325f3295eec20b67e05940fc80d5fa0","impliedFormat":99},{"version":"c3ca9be06537b66a6188dafa93c9af4c95ba30d0694a10eef28519fbc85dfea9","impliedFormat":99},{"version":"7c9d49430e23b7bf25f1c2ffdbb4f09e1ce57a1e951817bca083047b4a5b7d52","impliedFormat":99},{"version":"2d095ce2d0ee1e490cff5d8f2b219d58b9bab0262eae4ed25823df909a2cc19d","impliedFormat":99},{"version":"344c415c67b60b4a4115bcc099287cad80eb9439a92cf27d80179f92be885514","impliedFormat":99},{"version":"ffaa238fec18b4cf449dba7b15adcee28a13c811de4e496b76b2738b62eaca2a","impliedFormat":99},{"version":"82466b9b372b531c7a89318dd6a3a33777e242b764100e91875be46042bc48f7","impliedFormat":99},{"version":"c2fcf9b552599af3ee83fbf61fe41cfbdcf6326a2f00ab2878f4d0dfe039bbc7","impliedFormat":99},{"version":"4f25ebc853cec8ad43df39cf6d2b7df7dcc4fcc6aab583389fbba40aee3911d9","impliedFormat":99},{"version":"287a375b3add29ed8cf31569c4aa0b5cc851465994cee63557b2dd5f125f224a","impliedFormat":99},{"version":"79d5a9fb3e00e230ebb09d2f8c2f8acc2c8f9d9e12827f2b755744b17f2415ce","impliedFormat":99},{"version":"eb18ba3de7aa9188b8fc3f3661a05bacd25560c78a85a2891bd8d99ca05ad857","impliedFormat":99},{"version":"88c1347f6269f553f16b38419de2bb42115a79a6413a7b75d122f91beaf46d93","impliedFormat":99},{"version":"d581563db3a882ef4267ed002eddc805183ce66226cb2ba4e2090d72d4f20be5","impliedFormat":99},{"version":"a38611f376267bcf5c68eda5f8a5661e03986913a13a080f06469a134478d097","impliedFormat":99},{"version":"d4ffac2a2b2dbe35c50ebc70216ddf0c4824f90829f459dde9cc8a713911b3c6","impliedFormat":99},{"version":"25d5cb8bc3668f16795bb0e3d80016fc71569b98be0b190cb89cebbd77a622a7","impliedFormat":99},{"version":"55f897ee3592b8199a9df5e336f592c2d4eecee148ccafeeddf9c549671a2e11","impliedFormat":99},{"version":"38051b4ed9b36648aee032832f1b53cda4487cac209f5f8e03b6befcbec6142f","impliedFormat":99},{"version":"7a77793b35f859a4f2db7924fb68476afda85e625847f1c0b0d3ff03fe9de7b2","impliedFormat":99},{"version":"971915b5cebe44ba26275ef66f939a590164188d9f599e5992b16d60f11438bd","impliedFormat":99},{"version":"5227eaf8221450504ea6b0166e5223567cbd8c5266c46f9fcbb6a77acd5aef7e","impliedFormat":99},{"version":"5309369a03ef1bbf653f3406c0ce0116776dee460af8250f3656d19265d955ea","impliedFormat":99},{"version":"ad8171ae26983234bdf0abe4e6314f4937a10f04363da8baf9719230b0c74ab6","impliedFormat":99},{"version":"be1d3dde9995be997ce3e5044abcc4b4ce9aa4b8203446f83f39a262f02be504","impliedFormat":99},{"version":"85f044a5a3ec7c05bdde4ff14acd4278898e28cdf5f1347288d405f106ea473b","impliedFormat":99},{"version":"e7367b160b6d45b6fc67e11469f0d4e7cfcfb3f267265d0d0544d7db8b608abb","impliedFormat":99},{"version":"50620816cbef69db33ea3a5efec2a929a5bc10902b31814ed4c07ded5be4ca2e","impliedFormat":99},{"version":"0ec066030f3f38c7f7586eb941fa3267b190676fe3db92cca9958fef02fd751e","impliedFormat":99},{"version":"28389e4157bf43085c7e88a5b90669b2e6ca76f17fe8899c7b8a35085eb6f344","impliedFormat":99},{"version":"516b361f65130e6f261af3f19436b5218dd8d0b2347f5c2dd810beb299e227a0","impliedFormat":99},{"version":"111fc84e0520937e6ca7af813958101a3591514247f96be459423f10b3933c02","impliedFormat":99},{"version":"ed94bef2ad92b447329c2de13a0d8fdde64ddc1ef5dbc9b912c9e47d64676a9b","impliedFormat":99},{"version":"580b31f92d66ac6890f4509f02b9a9fced3f776b1f2f6b7cfc7bddf2b82a74e1","impliedFormat":99},{"version":"f8954c2182a35e016119f10523e0aaf358a4bf141c41b32f68ae25886a2ad8d1","impliedFormat":99},{"version":"70034e701cd520c309c5b718811217a7fa6d1c30d3548a6931e23a847b0bc303","impliedFormat":99},{"version":"d35995d2f5cffd85d7a51dc875059da8dea533612a9f89cdcb43fb128234a0c2","impliedFormat":99},{"version":"6f9b55803520763474ad754e6cb4ababc8338486d52bda52f50375c4203f569a","impliedFormat":99},{"version":"5e4de9bc3c6103c3f1ef25f74c08810bf2cbd40092f0eedbe1cc881bc2869f7e","impliedFormat":99},{"version":"3936312c7981dc2b710a45844b77bcc0b75cffecbdd34d4bcc727d646c9e06e9","impliedFormat":99},{"version":"8811cb7e8ddd1d5c5ba340318cebc6cfb8cffa64a964dd481221180cf4e21cfc","impliedFormat":99},{"version":"d5be2165a5825ef8c98afbba5d83c00a4e82b3b668ccb45d852a0380cc4ad53d","impliedFormat":99},{"version":"fcb73fb30b5285518e0338d404d35c3a7c64424a1c6dac61d7c597b64085b819","impliedFormat":99},{"version":"fb2f56eacb7e45e4f8ffac0e89778d0e6cdb8acc69b6302e71a03948df3c048b","impliedFormat":99},{"version":"62dcf37d3a0074c36d2f3592ce70dda8905c0ac559e4d01cf7030636307371ad","impliedFormat":99},{"version":"0e6daf1130d3e9315265840eac4cabef86709e4cede78aa7a9bac88218fc4def","impliedFormat":99},{"version":"a4c51426347fb034a5382d183c5b797fe80a9ff1b93ab0cd4a634c41f2d142f4","impliedFormat":99},{"version":"c2fdda2933d25b31a973edfdb9b3e04ca505ffd86a56b2b44264d68f92a65509","impliedFormat":99},{"version":"ebd384848752e9fab746577c14e44a190e46713f9be0fc4e2bc6c0f2446a2c87","impliedFormat":99},{"version":"08f3287bb667b5dbc1eec061c7c52e2cbae13029d3200b9a14adeab84957cb77","impliedFormat":99},{"version":"21eefadd1b3eaad24ad98ff4e0f27747f92b7eddbb105897ffbe99fad93dc5a5","impliedFormat":99},{"version":"079c9ddf0df46ab338c43733efa17a6874e74181c2a9da533334cee01e839771","impliedFormat":99},{"version":"d4c865417cb19335da2f37b00a7bd5edff9046e34c6007dcd0fdcd4db2052927","impliedFormat":99},{"version":"16699699f62bab22ac5fba28b11b891abd5faac383cb0b527a7c0a40f1470726","impliedFormat":99},{"version":"2cee377b16cf63b5d77a6cbfe232fc4c5edeb0cfb553879f17b43634a216d478","impliedFormat":99},{"version":"77c646914cd7f30458bdec198e8767027b76dda47778c107334c6445f9a64fdf","impliedFormat":99},{"version":"9079ca30a27a5199238e3e2fde9434a638ebe2b02970113bb40cb3866b1222d5","impliedFormat":99},{"version":"9a8717d0650db625ec5f8b790668d4d830fc53b36e33ea6363ec3d767c3210ae","impliedFormat":99},{"version":"57ac1632f83a917fb80f2c8a224621763c137a80c71a848329fcab8dddb8b821","impliedFormat":99},{"version":"e3aa69d0ebbd363e152958b3b4c953c668debebb19c6f56d5fc6bda783e7888e","impliedFormat":99},{"version":"d928e6eca50c5007882a5c16b1f48e64ff0b81e1f3c05eee75a376f62899bf79","impliedFormat":99},{"version":"f69e543cb26310e457a396c92559b8fd70e2d0d033133c834cc01192270678ca","impliedFormat":99},{"version":"16b45de74765b8e2c9a746080dfdb2110a5b717271c49833a6e14596e12e20db","impliedFormat":99},{"version":"0a06d7891e5e7ec7b3a6ed194415cf5c3b901bc52ed62f69ada3bacd8c6e9e7c","impliedFormat":99},{"version":"4c50224d40d0c729ab541208ebb9caff7b20c354ac825929b49826163ed6cc19","impliedFormat":99},{"version":"05e25cf8e28272af2d2360ab8a2fd06110d605bd7ad3df3a2f5658b82e354b5b","impliedFormat":99},{"version":"532daf0984ea3ae760346e2e8f6d2137cc6dd0eab09852c376d7a18c2dab1130","impliedFormat":99},{"version":"762ffff97bb6fb1a24706c208870218dde01e6d6dde51766238fcd95a19abb34","impliedFormat":99},{"version":"c41648d77f3903903df814f49079a2a6ba3c27de780759a9f77c88b322de6c33","impliedFormat":99},{"version":"92bcc31c3f501f5d981d4f1606baa36ff7b9f8ce963fd73cb4815357da5e48b8","impliedFormat":99},{"version":"b218d6d91cba3372feab67239969d90722af696c4ca21094aa50b1e11730a2dd","impliedFormat":99},{"version":"adf2f550fb1b21119ce39c383c0168d472fe0f5eceeaf4afa7fcd4ebbda58430","impliedFormat":99},{"version":"1a4af807f6ac85a88cb0c5edcb947c230371912d28a2f1cbec67e683390f27e8","impliedFormat":99},{"version":"f5f604f181d972c31d74ce7af288514ac2d4cc1269449415866d5bcc47c0dd1e","impliedFormat":99},{"version":"50039f58e9aa2e0cb351e5ed619accd629d490aa78702ed13e610431e5f4fda3","impliedFormat":99},{"version":"3a6464b4053fbe00e042eb657e7351764cf3e213ffb853d469a4e21da450d3dc","impliedFormat":99},{"version":"5a3d53f9ab76022a74d9f89a6bba42a6b184e67496c1bb0614459a0edb23829e","impliedFormat":99},{"version":"77a9ab89bf00a8ebf6d709e91d20612a40077dcdad089021bb86522c49a5873c","impliedFormat":99},{"version":"b007d7d3716484f5142a25955174bb7834614f209fb89da5743767dce25cc8c4","impliedFormat":99},{"version":"d027623f5d90c943916cf555a9ed693db10818b241946d05374a329752d7d9ba","impliedFormat":99},{"version":"424df0d204d3c3a62acb033fb262ec06047b70640411b176f5394d38211feef3","impliedFormat":99},{"version":"6aeb8007409312c64d44590491877bf3167da69e8204eb9e7bbea4313125dc94","impliedFormat":99},{"version":"b64920d87235ed4075e9132201ddb48bade38750df3d3aea25eea43009fe006d","impliedFormat":99},{"version":"aac054e6f5bce709dde4cd83e82af99f1fdfb4c9b8abc63f0308203c5567b9fe","impliedFormat":99},{"version":"42aa613c37499b6c0826350f63d1b7fac4fcc7ed69bfb380e1292ba13133f409","impliedFormat":99},{"version":"47413a094e4c7dca9cff18c3348d5dd43ce2dc1cf565bbac59dcfa2e569e5731","impliedFormat":99},{"version":"83be2f5f9c1bbff7f70123b14d40799dbbe9c05e35d05915250794a805d47e56","impliedFormat":99},{"version":"556047573205b89b8a5b1ace52a1e40415f11a118ee03948cc68193060827cdf","impliedFormat":99},{"version":"2578aef77a523075aa71e23f668a19bc5c28dd560c1f98e19b894fd4b422c379","impliedFormat":99},{"version":"6d0c2efa47e605caf87da05253ad5993a6430eb1a1aadce8428b8c2121f90b2d","impliedFormat":99},{"version":"2e9cadf537a77ea5d639c3fe1bbf3b766ceb1466fec57a1862c97cef5d5a41de","impliedFormat":99},{"version":"a2bc67646275963680c8a9a3bfd7b6e42d194712605210f62a071b9be4fa75cd","impliedFormat":99},{"version":"b49a8adbeace6be89c5a7e79addbcab619ce9519a3ad03828ed0518f6e0728a7","impliedFormat":99},{"version":"a08e28166c1de13fdd18126a8f0acbec29b16b93949107316ef13fbc86353ffa","impliedFormat":99},{"version":"01ece70092ce78c4a315f24c900302d0766b202ebd188cce64ae86b848c9909b","impliedFormat":99},{"version":"3fb4024c8ceb6e0e3adabea79402ab8821b2ac17ff17480179555b1c312c925f","impliedFormat":99},{"version":"24f0ba37d47f0f088894f1fd655c26b27f05688275c5c1018c2c6caea5f40c94","impliedFormat":99},{"version":"475590021f3a3ce99c4321e9e10959d38d47705119b34cdca51fb57b26198435","impliedFormat":99},{"version":"b68c14adb131dab85a07e2035c1312e5c112db0d852a8f7ab37abaa3fc1e4c38","impliedFormat":99},{"version":"29d55c549811a42514e5fc55a4f3d6b61f35483c23f5c57c199c81428451ff33","impliedFormat":99},{"version":"97f70d65af01b39ef17df25636b96adf6e38ff0b6024338dfa12f739f904ca69","impliedFormat":99},{"version":"19ebb9ad1dd4100dd8bd287ab7d851e8acbf0d430e0277f2c4fc5e3663695d18","impliedFormat":99},{"version":"78079d96a9cce7a8b405a47b54772746fd64d988575b8a12582cfed0e55939c4","impliedFormat":99},{"version":"939de50edd23c6a1119279b833df5a32283ee4c6fe6425c400dccf81f485f7c9","impliedFormat":99},{"version":"f39932ca05566f43dca3c7ac284d5eaf28e69827be20933cb7c1cc71ea7cf0be","impliedFormat":99},{"version":"6afcb1861a8ef75c3a298b141de149d7fd366a031f14e8dc900d8e91e33c9f80","impliedFormat":99},{"version":"e7bac1369667fa87f803d1b948d42ffb2f6bc5162d4f8c7495a420fee21e5244","impliedFormat":99},{"version":"03adf9b59ac38ee6ffcd1e7f577ae189b753305f93bd3fe8a69a7ebe8d98fa8b","impliedFormat":99},{"version":"866fc90a6da0a1eb8065a70af8be57eae9adcd2d51412d3f3200328c3873ce27","impliedFormat":99},{"version":"1ee2afa6ab55a6dffccb0d4ec20326b9b2754b28db844ae431ebafb0db1888fa","impliedFormat":99},{"version":"7f665a1cf64900966b523aecfca9a80f9a04bd97e126f0ff0b567ff1b3ed4d91","impliedFormat":99},{"version":"9a2194b2fd71f8a71c058b3c02fc2c73accd22408380daa66c99868852c9e5c2","impliedFormat":99},{"version":"9bf6383c6c18e381aa16a06c69d930524f58f5de21579e65925c80deee9f2668","impliedFormat":99},{"version":"8e093cfd9da496728fddd2285d5cd20f882912c5187fcbe6748dc5bd1b4d6e55","impliedFormat":99},{"version":"cc4012d8757d5e7450ac6f6480fded4468809603b3d1964c0d3bd52851d93175","impliedFormat":99},{"version":"52d11db79fd5e8ea79c6b23c03db845d8bd97dcaab7c0de66a0536c3109ca521","impliedFormat":99},{"version":"710ce9cfcd3775386a690cbdcae07e7116e10c694c37f885af8971482b040ba5","impliedFormat":99},{"version":"1b9777d854949c95662308fc5d2cb44c3ba6952b38ebbf37d4420c80be486aba","impliedFormat":99},{"version":"b63024aca2b9861d4e775f9e743d841c8e9dcc66e787839c7557e6ceeda612e0","impliedFormat":99},{"version":"7da2d32b80a4269a704097b95118917224a65111a0aed4ac2372d7daa22e8ad6","impliedFormat":99},{"version":"4f1c0a239c3c09885aa9a48909370dc8285c724f6e48e22dca6f7fb3bd157b0f","impliedFormat":99},{"version":"5e0584ac681905b9333428963d5ffd9261ef137a6578c78038c3c0ba775d5b01","impliedFormat":99},{"version":"8c704aad2b03a83541d5f4a524bf9e5204caf63a738f3330fbd568c07cddecde","impliedFormat":99},{"version":"74c4f6ea1c8ec7269659e98c070f204652e37d853c64e489bcbebd041827ff90","impliedFormat":99},{"version":"c85b472b017ff95e531e0c6c0d4325d26a4b1b7895e6446a22c51f0cdbfc0e6c","impliedFormat":99},{"version":"5cf65de0e35391b08c670517bd072b2931bdc097ebfa5c302df6dd8b999a3caf","impliedFormat":99},{"version":"492a9176e1d8ff44d10d58206ed7be6f0bda012cf03122743b8a6a67a5ef2b58","impliedFormat":99},{"version":"3f6e1335fe93e0c5896d0a647b479876dfa95200785a5dff60ee907c79b61573","impliedFormat":99},{"version":"8f80a9fae65b998c62801814ce0c7bcfeae92183366210109893ed9d76fb3079","impliedFormat":99},{"version":"e2b2e0ae27d7e6d85fdee13b2a950cb1ae31e061ea4313353616d619c28c2c69","impliedFormat":99},{"version":"ec4d151be5b77613a8a3203500f745a1d2805ae9014dc9386fe6e7762228f7c2","impliedFormat":99},{"version":"a5a501928b499ff4eb9f7c5f99681fa5adb7399d398072619c9b107eb8e3ea9e","impliedFormat":99},{"version":"31524c0450301fe6f8691c1a5e046cb94e92939ed82772cf806839eab154603a","impliedFormat":99},{"version":"6f24d70de141549e9f52dda7a5457809a53761dcb86f08208f9469708318c284","impliedFormat":99},{"version":"41da7e167f2da1052148009475e8ccc82c4530a9ffacf17ad299330500a928d6","impliedFormat":99},{"version":"80b3413ca20c596327f09266e5c130474657ceaa1dd7c439baaecfcdb41437d0","impliedFormat":99},{"version":"3e27487c16ba7c42cedfef83053460ea6501185c29396792151d081fcc33d0b0","impliedFormat":99},{"version":"10e5251cd9ea765192ebb9c63ec6f47e320e5ef8635848ef17a004a5484eb7ff","impliedFormat":99},{"version":"51f52810e5590adedf7955f20e10781254e4d27e3c50e45e8432fb9060dba86f","impliedFormat":99},{"version":"45c5825500b778dd566ac917df0d6fdca5a5ea8018e06529518e3186724241b4","impliedFormat":99},{"version":"650e7792477290199fede0c8fe1a9e2b3987a3347a83184787efcffc79dd1a82","impliedFormat":99},{"version":"d0b13e5f0e6f54ade4c51a39dfc2c7d487df318c418691a2746db8c1b0283226","impliedFormat":99},{"version":"353d8cf484fa2b24b10e2707bca2be748fbb3974bd34c769540f91cc40effe7a","impliedFormat":99},{"version":"7576dd3eca7ea027df2bc8285823c060a2cb88bbe7c49809e3a2e7acb28b0440","impliedFormat":99},{"version":"627c803e75af9749ff83f9b38880a2ef206d8fb12ef4fb3c1fc366b7bc7efff8","impliedFormat":99},{"version":"6f547a9c7bc23968d794f835b56816afc4c45097ea119dde59143a359ce9352d","impliedFormat":99},{"version":"14279ea94ef9e136c5366cfe8e697dad7a3f3e54159d5d3ad3652d8011469adf","impliedFormat":99},{"version":"b2d3314158824c26e319b00a5e8e8f46424a686fb6b426cc357075cc6b0d54f8","impliedFormat":99},{"version":"0e679ef9f717c475c62f49cc68c1f9d40884f481bbc6f071d0a8b7d1d4979fdf","impliedFormat":99},{"version":"5b1326b80b392e5b96da3dd72b979c351a57b537678b5642bd863cce8539fee9","impliedFormat":99},{"version":"a8be4280b7cb1344dc6ae534544f1f166521edaf557e9812d61d9dbd55842ca5","impliedFormat":99},{"version":"9349940aa0726d7114e0eb3eec372410ba8812d32fe8e908aa8cc73b2ee1a668","impliedFormat":99},{"version":"ea33af5f76d2b844a0d4a50b2d36253f05efbb646e6af77798047c4bd3422993","impliedFormat":99},{"version":"361784472b5fb0d537a80c6cb007e31af8bdce0748fdd18649715aebe243a138","impliedFormat":99},{"version":"033a61a1455f6948ca57bf9becc8c4d31b7e8ad44fe5114b43a277378f1b9ee4","impliedFormat":99},{"version":"f43cf30e181494a1bdc433cbdd0076c8c667a4bcb9ba5e7c2e193bc01e14d083","impliedFormat":99},{"version":"9320ce043a26ddf9229a4fd74d9b245e816a8a853b3d29d1454483687971b416","impliedFormat":99},{"version":"11794c143a99ede930c8b481fe62c0ca60d7a377562ccd309ff8aec0b7ec525a","impliedFormat":99},{"version":"ebb4639ed18974de557cee21f0ce86b241c6146e7a9725b9d15a4b960dea8a1f","impliedFormat":99},{"version":"c5bc7f11dca99053b13c17cc7c9d4fd2197075fe906080bd9dff677a20c2d810","impliedFormat":99},{"version":"623ba36c14f1dd5de296671ff28b02a0d107b4a83f388895af0b300699fc2845","impliedFormat":99},{"version":"246cb9bca261f63544454cd14db812476f77d635a37b995d180314a686284585","impliedFormat":99},{"version":"d53dfeba33b21749d13a5faba0fc1d2786123ac0a30bfe7773ca3bb1b196163c","impliedFormat":99},{"version":"cd16de1716971be4658f8b89e2897d49d1c728f63fedbdeec158e7ff3878cf9a","impliedFormat":99},{"version":"f01d6e08251fabc5d21044bc1e919496e18dee255621cdf56f120c7e39762d2a","impliedFormat":99},{"version":"5ad2b7e9f007a28098861638ba0a573912a08915edc1756602acb60f29d36ae1","impliedFormat":99},{"version":"64bfaf92ee10dcbfa34b18c2a5c47128ea7c4870c5d2875e37232927e764cdf1","impliedFormat":99},{"version":"2b961fe82c833ef9d91bba5c43c83419162a2ea18826ddab52baa98c55fcbca8","impliedFormat":99},{"version":"78aaf04164f66b9a35ce331178647ac6051764f727b6a813c95ee6e0b90edafd","impliedFormat":99},{"version":"aa04b2bc5b75609aeade0a8fcee2c70bbb640b920234405c78c85aa9462b7917","impliedFormat":99},{"version":"9d8a00ed906a9015b5db24c619a4f0ad57421346c597a4ca838f145826cf2ae1","impliedFormat":99},{"version":"ad7e2a65ac37ca46823ac9d0c8f4f230a0c865614226239a4b35c4fdcb02c662","impliedFormat":99},{"version":"72f3efb6c319f380b9cc069c5ba8b364db065361e01588daf253dc1788d8da56","impliedFormat":99},{"version":"fc0d7515d159fe4ae48a420d41ce685ab0082b100f50a5db45ce8f5a14c4118d","impliedFormat":99},{"version":"a38ae445c136c1027a25d0880e84ea54053e33c8385220158788568d53c31478","impliedFormat":99},{"version":"9880ad5445ebbab44fc3b4cdf369d4a6bd5121e2a17ca44db9a4e3b75eb442a3","impliedFormat":99},{"version":"12a28bf61729389f1470c7b366dadc56506efad0293f6d88d309910b5532af4d","impliedFormat":99},{"version":"0ffa07bfa1d238afd4d4a73e3be56ed54ab37dae01c2d13d9688c52e8021a3a4","impliedFormat":99},{"version":"b830e8eaeb3af6d17f572892634b41d6ea7a78b933ef31d2771752b644bc4838","impliedFormat":99},{"version":"37e42b707c8553338fe15227bd6a2b03700d3b4b01f00491784bb7a37ed75ba3","impliedFormat":99},{"version":"86abbcb0274a0d00d3c253497f60a5a77676f12caad4dba67316ecb137a86d44","impliedFormat":99},{"version":"511563ef1f7eddf488dbae80da12b7004da6d27b1f7ee1fa5b1e0a505060edb0","impliedFormat":99},{"version":"73fa210def31190a7e6bd75973115d3a398b993b760f9c7aab082c53eb5f1b74","impliedFormat":99},{"version":"845c946ce43f3860291a3d2a8f604fdb57dbe6e07fc8f51988d48adbcb27d070","impliedFormat":99},{"version":"0f062cfa088c4a93724a8644e03f12aa577ee774237b4ea91df626fa315cafbe","impliedFormat":99},{"version":"2aa360501b9f5f890b08522c7d0120049d7dd9bc3e0bd14d01f0d5534ea4fc28","impliedFormat":99},{"version":"ee95a737addfe61c88329058d213c70b1d65fb29ed194f56479b8429485400a4","impliedFormat":99},{"version":"2ff6de5dbfd187cd3e4115c2c407e4140de7ef4432735e74f89a85767fca545d","impliedFormat":99},{"version":"4f11eea8ff68a6fd1955178f4eb93db2ddede011c9c8efa1b56990bf90f5cb16","impliedFormat":99},{"version":"1ae441a2041848c86ab62614e71aea15f589f6f89cec4888ff29d455e203b023","impliedFormat":99},{"version":"c0784b1d0fbe30e7007a7209d7b8010555bdc6ffc638e7f599b04dbf1c56ef9f","impliedFormat":99},{"version":"6130eac40466e6c96b8059adc0c620881b92f9f43ee97c965ffbf95e18c477a4","impliedFormat":99},{"version":"6301a597b1905174fc49021157ccdc942636d91ffbd39bd038f1bf8c42dc79dc","impliedFormat":99},{"version":"5a656b9a59b6481dfb51e307fe1c1efdeb13ce30812ddb16c35fcce79c9a9249","impliedFormat":99},{"version":"1e821e9d5575a3c7bdb0122e3d0d132963b4f9b081cf759f0f1b5893a8fede96","impliedFormat":99},{"version":"3bf9d984383c3ee39abaf235c58ec65cf069ff43b4fc39bd2b61171c9a920e69","impliedFormat":99},{"version":"d54961398fc1485a0830ced09f3345a13706624520e046769376928fadeab06a","impliedFormat":99},{"version":"b2e3b7f8aba34fdffc30228cb5aa94ea90636a23002537f62cd2e3b1d6cdb460","impliedFormat":99},{"version":"db20ce0232d705673f349da67377dc70f56a83f5c20ba2fbb642159a87b4ddea","impliedFormat":99},{"version":"ddc58b77279ff01a42e77696380653050a4db29e90e8defe84c00736480297a6","impliedFormat":99},{"version":"1225d14c0719958db74f7a10e09a7ce273c50597d1be1beb9f65585f2a2264e0","impliedFormat":99},{"version":"12d59f0f61df5b5f41a42f79ed5a98e920d0bc758279f873d48def4a7f06c7a8","impliedFormat":99},{"version":"b6b160d14cf60a3e3f2b85330e2b8e446c058940252f4cbf33dc66ea86ddc0f6","impliedFormat":99},{"version":"e81027895c778590d6f75380dd5de53fb7fd6d0aea3b84e4b62ba8772460d803","impliedFormat":99},{"version":"34f5eea4df98dc87abfb183ba4540f422880adb00af359bf57e4fbe4096d6835","impliedFormat":99},{"version":"9cd25caea8f99541a2ce8626558b93709c54c3761ec672d9ba26c12a32bace5a","impliedFormat":99},{"version":"0fb907557cb7daf1fafcf7d1b6fe4c9c56a0c85cbd5d9ee96f59db03a110fdfa","impliedFormat":99},{"version":"4beb95fda89693e691097b1e51fcb018386de5647fcafa3b7856e2926a7c7a43","impliedFormat":99},{"version":"b369e61b268d5a7fbc48eb0e2e51de6116709b47b71ca40eb6be1b614bf901cd","impliedFormat":99},{"version":"aad4be64fe0cffa85b1b720f3cd6d991428154062c2a64f94bfad280b84bf00f","impliedFormat":99},{"version":"642e0db6c84aab73c970632ff95a404e2fae373f2ce8e2bfade234d41458d72f","impliedFormat":99},{"version":"27679e96d1bd38c5938178aaf4abe8627493090b63d6bae2ce8436e6a87ebe4d","impliedFormat":1},{"version":"5487b97cfa28b26b4a9ef0770f872bdbebd4c46124858de00f242c3eed7519f4","impliedFormat":1},{"version":"7a01f546ace66019156e4232a1bee2fabc2f8eabeb052473d926ee1693956265","impliedFormat":1},{"version":"fb53b1c6a6c799b7e3cc2de3fb5c9a1c04a1c60d4380a37792d84c5f8b33933b","impliedFormat":1},{"version":"8485b6da53ec35637d072e516631d25dae53984500de70a6989058f24354666f","impliedFormat":1},{"version":"ebe80346928736532e4a822154eb77f57ef3389dbe2b3ba4e571366a15448ef2","impliedFormat":1},{"version":"c2cb3c8ff388781258ea9ddbcd8a947f751bddd6886e1d3b3ea09ddaa895df80","impliedFormat":1},{"version":"f672c876c1a04a223cf2023b3d91e8a52bb1544c576b81bf64a8fec82be9969c","impliedFormat":1},{"version":"98a9cc18f661d28e6bd31c436e1984f3980f35e0f0aa9cf795c54f8ccb667ffe","impliedFormat":1},{"version":"c76b0c5727302341d0bdfa2cc2cee4b19ff185b554edb6e8543f0661d8487116","impliedFormat":1},{"version":"2a317fff5810a628d205a507998a77521120b462b03d36babf6eb387da991bee","impliedFormat":1},{"version":"f5ef066942e4f0bd98200aa6a6694b831e73200c9b3ade77ad0aa2409e8fe1b1","impliedFormat":1},{"version":"b9e99cd94f4166a245f5158f7286c05406e2a4c694619bceb7a4f3519d1d768e","impliedFormat":1},{"version":"5568d7c32e5cf5f35e092649f4e5e168c3114c800b1d7545b7ae5e0415704802","impliedFormat":1},{"version":"933ee57544b661a14064f18abc213c7ab85fbca8497a875ba3f9638e1ee0667b","impliedFormat":99},{"version":"333001fcd4946f6ba087169ff26f8a14e8a9f61cc7f4bc5e47299d92ad2e443d","impliedFormat":99},{"version":"60b6760beaed5c500c348b86d45b23209ff713c35eec7785e1b46387bee192bf","impliedFormat":99},{"version":"add2a93e597d9781780da6650b83a217bb11bb68c05e5459e915c863978b9c04","impliedFormat":99},{"version":"962d1c76fca2990b1967bf4f5a2588cf8946d1debd1f1514fb3625b2328c9578","impliedFormat":99},{"version":"cfda2cd982e4125ea470bd25d8371c75302ef1600dfbf55a0a2ed58444bd2746","impliedFormat":99},{"version":"94d9598336e0392481c50c6a44cec22bac49dc71632683a7008d32e1086408eb","impliedFormat":99},{"version":"d218bf92d7158ef21bdcf7cef5990ff363c32085f711e2e782dc4ef746d12cf9","impliedFormat":99},{"version":"97dd460f06166e60bf6a300001783f3c4180ef1b3e7becfad365e49dd5597a83","impliedFormat":99},{"version":"c4c969723d2b643510ff6dc0a6375c8f326087d3ed77e187580f94d394ad5708","impliedFormat":99},{"version":"605c678cdedc3a1b52417918da7e4f17db77f6e4f7fa167a4634bf109bff5e0c","impliedFormat":99},{"version":"f36d95aa7edd4e3d0c58858cf0c744b7712f36f912403b6d5733c7bdec1f7883","impliedFormat":99},{"version":"07c1cbffaa1e3fbfa16ce66f6c72dcaf24a8942750ae11ac21c463c4f9eb2590","impliedFormat":99},{"version":"f2c5fc4fc8f5e034f5b265ff2eca9b4f73c0092ba0f4bdef1302c96f6926cec0","impliedFormat":99},{"version":"05d16bfbe3c35d009dcba4116786453ad36b519de288933b34e6bf0919e9c103","impliedFormat":99},{"version":"d0102f1f9ff7b8489e7d174078917b331757bebf6c7bc9a6cf80f4429cde9e1f","impliedFormat":99},{"version":"c58550ea01f374f09465f0ab8a2085951bfc77d72946dcc9515eebc055b21f75","impliedFormat":99},{"version":"a31494efbc2a0a310479292e904689e9d2e314a5e2e432f57f8abf29d4bd59d6","impliedFormat":99},{"version":"183118ebeb4f1670a4a46ba67d3c90ca8647923083cff4e0652a0dffb173df6e","impliedFormat":99},{"version":"b1309d578163cef7cd7183a12be0dc2bace122d14a528e66c14ba7ead1698a25","impliedFormat":99},{"version":"3038ce8e196c23f53d21ca576222f497439a84f67cd98fdf1997f3990a266942","impliedFormat":99},{"version":"4c503ce17f2d43d585eca3d4bbe0ab7cb88030e884a2b5073dd2caeeb3468ea5","impliedFormat":99},{"version":"d35f68c5c1a891d4ee60df6fdded5844d20c3252b3f4dbc260c23a065355c38b","impliedFormat":99},{"version":"fc1e63ec9f569264cae7ae5651bd61556db7f67446e22203acc0a8f0f5cc3092","impliedFormat":99},{"version":"cd9e9cb8119e5ac0b5129a8872461ce8af8ebb6edba273bbf009af2a91d3d0b0","impliedFormat":99},{"version":"0d7b2ec629221207ba7fb25e891eea51f95a94b281cccfce4066692a3be26efc","impliedFormat":99},{"version":"8be9400e044d3f0e2876a16b61823de27881fadf011f9469881301e5614b1495","impliedFormat":99},{"version":"a5013c8d19a902542d5cb39ce1ea045fd923def32e726b2551242e7549b8a65c","impliedFormat":99},{"version":"da9a0a89aa2ea904b77bfc2515f2659400709ea21c4261c2f44f4d40b302b003","impliedFormat":99},{"version":"de5a72e414726e804c352541f51238e790728f216c36b2144ddbfb4ea8f39842","impliedFormat":99},{"version":"f5d82bf3e81f92685f1c13323e1fba326a48ed7a15318b9894d61266855cb80c","impliedFormat":99},{"version":"113bdd01435b24cebbceb2f2205e08ddc50a7e44e52bdd0b2bee8532ad7f2a53","impliedFormat":99},{"version":"42a512f1643b6e6aea420a070ab6b756138b92842775b0ed8534655a24c0cb81","impliedFormat":99},{"version":"195908c4de0811b83c45de42cddc141e0ed20b4dbe07b236e2e05787fc55d356","impliedFormat":99},{"version":"ff1ddc247d5ae6ede9e506f7ba4d639ae6ec1c620dc01a4668de224b446a274f","impliedFormat":99},{"version":"b4303535b100ee04dc261b147a22fc79dcbf52b933fc35db107a88cfe85f0432","impliedFormat":99},{"version":"e3bc71d04d1f731b65dd6a1544bd1a5993d95b408c2864dc2a8d0badfe0d2f3b","impliedFormat":99},{"version":"6ee6389fb763a328d0c096f33bff5a9954785c306888046a29c4bd5cd384abd7","impliedFormat":99},{"version":"9c118b32ba8f1170e0fe377a26822f5a5171ef305abad2b619ae56fa7e458216","impliedFormat":99},{"version":"27e86fbf65d9c6e814411477f4dc11fd4f5e7461f33a633ebc6fad0d1f5c0c1b","impliedFormat":99},{"version":"099537b7a57e441abfe75d2f0d917c943a6b084f17bb2d9c997c1e09c60a07f7","impliedFormat":99},{"version":"8593fc1f12beec8ba731ba8d7ed2b4d2fca963352056ddeb2c1d2a0b2f7097b7","impliedFormat":99},{"version":"0ae098473bc9052f2c94affc19fd4b52483989fc24c56bd07a6f3cf1f00403d5","impliedFormat":99},{"version":"bf1b13ca232c2b0245ec5d54729a15e1493aa5cd80ff95581dbbc57c6d871138","impliedFormat":99},{"version":"9ca7b78bee42c8befc0afb2ed0ccf66a9f3b10819314368292cf27c0e3d46ddb","impliedFormat":99},{"version":"8d7e33a6f9301ab793bb325dedb15980d931c9f48c24dce6371d1a0025436dfd","impliedFormat":99},{"version":"6e4f58945d2629ac14c1d2e46e3c3a748cf4d85ee1cfcc9e66e03f533dc97e96","impliedFormat":99},{"version":"7b54eb163a306c85e499083fcf49461f3171e89e697a337cc9e43ec6bcb2745a","impliedFormat":99},{"version":"60bd7729a392ef79df9aa234c592b941f49384f52bcf9de759b2d402eee3dcd3","impliedFormat":99},{"version":"e7fa60f7bce9ea5a272451b79130a767c70142681c7d591e40850b851f1513a0","impliedFormat":99},{"version":"63b43e7efd397cf71237a414651b160b14580f5737bb16feb023730f13625719","impliedFormat":99},{"version":"48e474a385bb51c5f47aa026905e93823c49008e9968500f76b29c4e4a4eacbc","impliedFormat":99},{"version":"48e474a385bb51c5f47aa026905e93823c49008e9968500f76b29c4e4a4eacbc","impliedFormat":99},{"version":"2cca9b4cd6cb789939d07b1371ac66f8fb8254b07edf17397495133dd7b2de3d","impliedFormat":99},{"version":"d793adb559bef083f5bab765f6e15dbe0db9d08e59a7a2d296ef7ebeb501b9f5","impliedFormat":99},{"version":"b3672c23b9b74dcffa932cce5c78c3775a5aa2703341d2bc7fcf6544a892c525","impliedFormat":99},{"version":"57e9856c0e86b8c4d8bbcdbd65c71e4e59eff49953797c131e86913a06ff3f3a","impliedFormat":99},{"version":"13fec8bcffd46e8ddcee60c197e6f549d7e40d9eef7791a76f322519776111f8","impliedFormat":99},{"version":"d053ee2548792ba6803992f82e6deb639f983aeb56ae8c5ace224f544ab32ac1","impliedFormat":99},{"version":"81c1a7fcca6c7973179538a92825663eb300313027edbe1e24597b0c21056bea","impliedFormat":99},{"version":"de500fb9eac7911842e836d082a06c3ceadfc7907e533038038ea851e6dce570","impliedFormat":99},{"version":"92af701181ffbc0c1e6f92ff1e9dedd8008716c5cb64ee7e81abcfb962d732ad","impliedFormat":99},{"version":"74a023e91e7a44a2a4af20daa8fda5ae33ae83542c8aa1207ee0d8ffcd7f596e","impliedFormat":99},{"version":"b4bc501074cf5014ca00883811b7e8a84ffb432b4654a6b9690cfef7a96b441a","impliedFormat":99},{"version":"459916e34b8bb83e719462d3bee7b60cf28d2d971ff390940870ecfb10c5211b","impliedFormat":99},{"version":"60ac5d0549f5f9d68a07475df54d0b2ca34231ca469c5ed749bd416a798902fe","impliedFormat":99},{"version":"6f21430c316b91fcebfa5f3badd8bfbe4e27eec7ca6b5da02603bacfea5f2ce5","impliedFormat":99},{"version":"2b638fa5b4178ad1aec154e6509772eea796e9bcc850d9eea2dc43d80803f003","impliedFormat":99},{"version":"df7bb3a70aaa9265a9109305f4f32792bc8ee37bbf64d6922baec6218af62d6b","impliedFormat":99},{"version":"d48a278218e907241c7de0f32b6ac7428218ac548b4232d853f4a80c2e6dd1fa","impliedFormat":99},{"version":"755791d6f21549a4e803d736f51cbc0566eada6feae78f6097fed3135b77b873","impliedFormat":99},{"version":"7f4ed92921f9bca79de2aa26218eda7c5ff5e44201d7d981af6a35a88480501d","impliedFormat":99},{"version":"07c1cbffaa1e3fbfa16ce66f6c72dcaf24a8942750ae11ac21c463c4f9eb2590","impliedFormat":99},{"version":"c895db151852f309cc367686a11a09f9a0891fb6b4cc000d92b07eaa335ceab2","impliedFormat":99},{"version":"1ed37dbac5c2339a9edd6d40e19c9b1abffb2dc78e3a75cc94bc36e4730c74f4","impliedFormat":99},{"version":"beb1b6085c2b164a7c0a6bc41b76572f88f1c69138dbb18a9a14ff88b112fa69","impliedFormat":99},{"version":"cf2d6dfdf9620bb0051a6d68be19fcd1c8a8d8f088cb1fb186b9f5e7d770de88","impliedFormat":99},{"version":"0a57a2f95a88751cc579bd1c026548821eb88b06ba7a84738eff5aa1ed2685ef","impliedFormat":99},{"version":"5fe4488869cc6216a784a9f9b76b25771d30283897d7ed03ed04593e3e701d38","impliedFormat":99},{"version":"f19db085d39900f295374c026b98780c7506ce65d120be8ed022f807766689bc","impliedFormat":99},{"version":"cbfd5f3665006cf0cc91f229b5116406fd9defb4a8f5b57c9647ec6056001284","impliedFormat":99},{"version":"fc3362d4e03b6076937c9c4e9cda0aa958070f078985ce786cabc4d51edbdf7a","impliedFormat":99},{"version":"a3db8dffa6b2e9708bad9a82ece0071384b15b879bf8d86911b9b0a3aad5e496","impliedFormat":99},{"version":"123871a82268db6c0e6478840b5c6f84d15bf440184bf278fa92cc3f9bf1fae1","impliedFormat":99},{"version":"7c4b0131e8fb57609c65f9994b7c54ae1c6d3f3e523a7f5f1022f9416ef18a19","impliedFormat":99},{"version":"ef49a0e9bc692783fcac9b8fc766547fe3851d716d9177865b5a82c9c176f0ed","impliedFormat":99},{"version":"4691624e9040d5d8a66537aae565fc761a0d6383e1310f3ddac20cc0005b92ac","impliedFormat":99},{"version":"f36aa3c389e8f54591a5cf6344ec6fd4c3a415524bc71e3d52c6296991f3bed7","impliedFormat":99},{"version":"5e75fc4786e531b8e3a273331ae0f3f68c8196b420d0fab95c73f7c220bfa794","impliedFormat":99},{"version":"1675e2acd60d7af5a8d36eea09a6d5d4f8091e56207ba49b228cd7ff9c463203","impliedFormat":99},{"version":"731329ff047f22eda7f4295d3701f55d9e88a6b1cd4317ed15210fa20a52be6c","impliedFormat":99},{"version":"bf566f93da922ea4b125d52d3c4b8d636c0482cda23f52d7b716288200c04cba","impliedFormat":99},{"version":"6c44985dcf6c40bbb92941df631ee64fec2888a34088dcdf4088f19fd319261e","impliedFormat":99},{"version":"de1796e730da49cf2d2e78a6d1ce08f6e56988c1b4e24a8cb2f8cbfd16874efa","impliedFormat":99},{"version":"1616d547bcc857371aa8858539fcc4b3c97ad91a28bdfaefeb866a13335441ad","impliedFormat":99},{"version":"2516370c17a34cc8a50e4508faf262bc81061a4571c9498add858bf37449f4d3","impliedFormat":99},{"version":"88370250bcec2015bebac2dedf572760e1bbd125a62a190bf96e288fd325a74c","impliedFormat":99},{"version":"93c62c71edbd4e60b6f3b28a8016fee206b47d138032a7a6c717b4581b543183","impliedFormat":99},{"version":"72f17c47dce6f4f555875bbfb0a1f3bd88eb9729afad13db54bae03db09f8bf4","impliedFormat":99},{"version":"233160851e3c0765258616f89a94bbbe01662337076fe0600fdcf9b2d8b5bbb9","impliedFormat":99},{"version":"009371ea94fa8fb301aa838de054b5d555e8850d24051052cc55e925a50757ff","impliedFormat":99},{"version":"31e9af870bf4813bec4342c9d56abb86cdad37fa16a488172bd43762d6571364","impliedFormat":99},{"version":"2b8b320b8fc833e5029f7f714173d968a3be3e5f86b044bff9e28451d2bac087","impliedFormat":99},{"version":"c99d4414e77b00c2fff1630989ee6513f542fd8acf93a4aafa2acfb71408a9c4","impliedFormat":99},{"version":"d59dd1682b2fbfe31f2685c7399b443efb5495e15449bdb244fd6b575d38cecc","impliedFormat":99},{"version":"bd46021266ab4362a63931146a6c1edcca1c89e8af00fb6b176ce4b201f8c372","impliedFormat":99},{"version":"34df4f1eb6136b2c82076ab996a444643c738b833afe00a11776b6975801395c","impliedFormat":99},{"version":"25f6f2e4cfa6cc2221abb073e84bdcb4741b325647e3d5acac8d0194a49b4a00","impliedFormat":99},{"version":"71d8104fe257e894bec40536c1066e194cdc7de3c469ef535b887d7587b03d0e","impliedFormat":99},{"version":"d9046b49b26924a518586fbeaceee0f3dabda738b631c181ddd73248c7fabd5a","impliedFormat":99},{"version":"def060b62cd0dd6039be37e66eda75cf4716640903358922e71fbf708ae61cf1","impliedFormat":99},{"version":"a615e1ab45be5e53e3d44a19b1f1705215e6c69f08fd12edfad995277725ecb5","impliedFormat":99},{"version":"e4627909f6af7c4894617339108ad3433c4a80cce5349fca164c3336e4885a44","impliedFormat":99},{"version":"7deb5774ada5f33a0fbb49a37f21f7a85c72a0950a1cfd7328113fdbb01f0ee0","impliedFormat":99},{"version":"27fe138bd77d4c148d3bb0ee39016c68643ffe8944eea0ab2149c3f944f91e5a","impliedFormat":99},{"version":"2f97a1cecba47c6c1b390215e6fcb733bfe618fb79b6785e5e821b5a52f52c2a","impliedFormat":99},{"version":"0a26e0f2bab0b9f349074427c1fdfae98cd529405432d47a57953c3ebc691e62","impliedFormat":99},{"version":"c563098f7579ef85e352a85351531cab5a26f3cc2472728e43b13714c32ebf86","impliedFormat":99},{"version":"c98b655478266c52500fb30b478efa0da72bdc0e070231d827aca1700c201552","impliedFormat":99},{"version":"3a860a5dbc7b4028a7443c80c7db29aaad7b2aa50c6b0351b4202aa312285b7e","impliedFormat":99},{"version":"424aee54f44e0884792377e56a7efed09ebaea0106edcb07c96fd1a6d9775c04","impliedFormat":99},{"version":"69dbbba78ae09fb8373c916b7c4329bd60e7e2cc6bee2b19a66a02a8d8311447","impliedFormat":99},{"version":"137b7b099f3e6ae9458bfe205a26f3dd4158d7babb8651ec0713a6247f8fa02b","impliedFormat":99},{"version":"17507adf9aad1bbb4b5740386542e58b5070dc25f0bf6c715f2c7918bcd16232","impliedFormat":99},{"version":"16c0ec8f9de6bbe7017d1e0efd9bfb4ec751ea9081222599dd2578c1cb3fb528","impliedFormat":99},{"version":"ab9cc5c0f90427ca0e9005d8e8c607db58047c8ad87217c4b7aaa28f6c91bf6b","impliedFormat":99},{"version":"8ea08fa48d31f69330b436507baaaf7f03e64cf313ed7f1b40e63c153c2e160b","impliedFormat":99},{"version":"87631de88a30380e68caf14d14084dea6704aa1cc8dd189c73916c3654f91f20","impliedFormat":99},{"version":"8e83356b23d1d9fa0b1a14a6eda882fa4b7b8b8d1d6d7152eb63dd44e413211e","impliedFormat":99},{"version":"821fc78f2189c71bf9289341c58091c35daba35768bfd372f619907a18163bd1","impliedFormat":99},{"version":"bcabe34028bc5d40834b5715660ad846a6275eb762ec51f306745c3dcc7774aa","impliedFormat":99},{"version":"f44078f69147f4b62153dfd2e593041c7c774176ee147d102b349568fa56ad41","impliedFormat":99},{"version":"83e46d427e1be4006dfcf01380c623025b949789bbf10b286d87a4e11119c3f1","impliedFormat":99},{"version":"ab3eb24d564dd131e3c5df3b6079766d56ae0267ad17072dcd05db0a1912fe18","impliedFormat":99},{"version":"562091a4c4afc50136c54b6b72704c0ff3376ecced7b7cfb004fc09fc37de091","impliedFormat":99},{"version":"c44f8b876a482ba20c796fe72024516ebbcce0fc40470f95b1a87845611be908","impliedFormat":99},{"version":"f74fc1c2e7cf88597743100903978a64cf17678109bd9115d93f8f59a51a95d5","impliedFormat":99},{"version":"117c74ba15b9b79c48a4da6f5e8629defd7ad2789702f665601a556d208e96ea","impliedFormat":99},{"version":"9fd014dd5864128e1a48e0012be6fecb1b0f7ef438cfc6a07773dd7985128904","impliedFormat":99},{"version":"536aba3fcf26013f8db08015d4d6956dfb1d9a7f88623f9d5f10702aad3d72ba","impliedFormat":99},{"version":"ad50b952fd8869fcd27b0de703889aaf822ae47fd7318b7eb1a2d68cf1a9031b","impliedFormat":99},{"version":"0687fa33a688314cd2798dcb4d468230948a5f58443392912dadeabd6efa3178","impliedFormat":99},{"version":"a3d88828de1cfe86abbc5418bc9eee04265f97c7900ddc8d68ec2bf16bdcab04","impliedFormat":99},{"version":"25e034ecd03df436db74e06d6ea963c2097f4382e8487a4778f8ca312f8918e6","impliedFormat":99},{"version":"78e4d5f6901cb83c0bc1cec6a1c705da05cd37cebe9e9374225270c32d673ac3","impliedFormat":99},{"version":"00b0e32ebf1a023ea1fb753495c41366302e311b30f2bd031dc31d123a3021bf","impliedFormat":99},{"version":"d685a3fb09b4f710e13fcaa372c159044ef2a12d1d875ff5df7a453b081c70ae","impliedFormat":99},{"version":"db008bc8d41a3edc16fb88c45b5628cb54a3754b2cca5e7076642c80aca725af","impliedFormat":99},{"version":"624207fc30551d5a0e030ab5eba28dd439031c643343c0085ce99ed97ffa7960","impliedFormat":99},{"version":"5669dcd9c14f72b6bca9113e5286a6ff72bef220baafec8d8ac2c8d22655ee01","impliedFormat":99},{"version":"0f98be43d93f113304cb6e8cd548e38732f58f625af5637aa0e9316cce6e1698","impliedFormat":99},{"version":"8d3f287ddf3b291a8de29de4630746a627f3413f70a477b49c69df226cd2e8d2","impliedFormat":99},{"version":"6c3cee2a2b35b205433d8b8b01be79b1db9daa8a1ef7f2f7e896eae7aa494590","impliedFormat":99},{"version":"0e52e955c5a6379e0ebad6ef730a4ca04070b10b34ee42e072713b54bf5b9d3b","impliedFormat":99},{"version":"c811248a11527b731a1a02d8db4181397bf95772b57030533335a9c88ded5040","impliedFormat":99},{"version":"e95d1108584f00b3c8f5ca26bcb8073085cc4473f73fc9045a7d29c0c22aedfe","impliedFormat":99},{"version":"f49983fc0ce9cbec454a536ff83841180525d481e437a7e3222fe47b258797d2","impliedFormat":99},{"version":"d557064a2d896d0c3d5e6bb15f0d57e0d0f1866aee78b478148ae056c48c5cce","impliedFormat":99},{"version":"61759c030bda1eb906f19314fd7baa62a78367c8626f357e84d42a74c3f15923","impliedFormat":99},{"version":"9dbcb3ac02dc7e1c22f6a7fa23450ff8ab0974a6bbc8c7c35796a37f4bce27ba","impliedFormat":99},{"version":"45ea90a111dfa6291e600b99c64772fb3985ec4d039c8bcf6587dba35472fbc4","impliedFormat":99},{"version":"758ab5727031baf4cababe16914175df338e8648c9a41a8260821d2b6552d280","impliedFormat":99},{"version":"d551e5e199d546a2a5833091b08f9dc82dab2d4257cc4df350ce2c6ebaef4269","impliedFormat":99},{"version":"d2d5ca862a5d4c65d16d7247cc507e8c48b16b7bb1bbc05c92e931d043b87efb","impliedFormat":99},{"version":"03145032aad5c134cef2aaa87d4e70067a6451d7598ee3b32c696a59c7c23137","impliedFormat":99},{"version":"7677b547951bf050bf2d1cb79aadc3250ff36b69fc3a2284b750fa24e27cc9f1","impliedFormat":99},{"version":"500451cdb00f97ac4280702bcf8cfdb999d833a458f65aef0fbb3ddf537799c9","impliedFormat":99},{"version":"ae43168792e0e724aee69245c76c4a7cd4b2bafa957c19538dc30fe6ffbb2309","impliedFormat":99},{"version":"e82d14f342b7385c1f95a3d077d25f2b7413aa68c8d97c09ef2b9eefcde6c75d","impliedFormat":99},{"version":"ce0b3029b54fb20cb7c4174bcbb4accbdbc74d57793d1f4adb5af57b498ea46a","impliedFormat":99},{"version":"18e41f455b672a66e87011db19e7720f448cafe4256382f10fc06fb05ed97081","impliedFormat":99},{"version":"8c4ed5f911795d969ad2dbef31306092f74ae283e4cf19148c5968850818dac2","impliedFormat":99},{"version":"9d601c3415cff962192e4f5caf89a30f33da28e8df3a9900014c08e8b2c5248f","impliedFormat":99},{"version":"56aa6c1a66877c4cce29574996e422d53e5604c2621b0d298451c5a178119abe","impliedFormat":99},{"version":"727dfb5fffe7f42d26e345152f52488f56c0d237de7edb52e7985d3b16ecd91b","impliedFormat":99},{"version":"02fb7ab490215bf0e86c9f7a2a46766bfcf37fc8c85c8b0173d37acdff51254f","impliedFormat":99},{"version":"c32b0df2061b5bf03ac468bbde57b04637fd2951444aacfe00f40d0fc1ae4b8f","impliedFormat":99},{"version":"e89d2ef55e3e0a9820316153b5649814e752c487ad3945ab6c8d55296ba14315","impliedFormat":99},{"version":"91b683379b24befdee6d176d324e7d5d146740fd7e70c867d6090efd74ae04e8","impliedFormat":99},{"version":"d0f2b89d4e7521337c05cda320f536d2c9b7efc528b6f59ece8e85e17f7b745f","impliedFormat":99},{"version":"b41460eac0b68b9b4dd1ecc069cbd4aff8bbe07775ab17d00d7faeae64056790","impliedFormat":99},{"version":"b455e4fda19cc5d45d2b6fdd0cdf4dedd0ddf1c1a6224fab4bb7e427bbcdd327","impliedFormat":99},{"version":"1b4666efa1a8315bed8c1c875896c1b35fbbc93bf9f2400d1d9ef449aab78d04","impliedFormat":99},{"version":"55a602a5d3eb84d99934bf8739779604928721249bc97f1aeef53a3b34153423","impliedFormat":99},{"version":"7c8d4c12215dedcfe13ff9742ad08c15d54c8e79c51ecfd9d3f5d8465ca3a4f6","impliedFormat":99},{"version":"ab243990ea4a0e47a70a0d89ecb85193bbeed28386c523bc764915a4e5ccc3e1","impliedFormat":99},{"version":"c3aa0fbb0c95ddc0bb14043e1dc953bf5fee3748a75755f7010befe39a2b09c2","impliedFormat":99},{"version":"179849651434d6d36dc1c761f65cf8a6b68656cccbea4dd27644968b78c51ea7","impliedFormat":99},{"version":"6246563d574c98f96cdeb4f7bd2ec4d65e4234f2ecda4cdfd9a1cc972dfe6904","impliedFormat":99},{"version":"bf1277071aa7baf4b4787832d5754898727734b01ed900521e7ff598f3a05ba1","impliedFormat":99},{"version":"4154cdce8ff484985ba0c3c697ea9aa5f8dfe8e246f4ab604e59883796606e7c","impliedFormat":99},{"version":"aa030e606b59c7eebcfb9e81c6cf72ef03f95f368a4f05596cfb20361897e304","impliedFormat":99},{"version":"542a85a069b1db6b6670905d02bee59d267a6be32475b2a9d5776dbec52c81cd","impliedFormat":99},{"version":"196b57d22eb0d3c8687be973bfb75e6aaba0ab23ae8a6be37f107bc243aaa6f2","impliedFormat":99},{"version":"b66304753fd7e51278635f3c017a10aa164177c117cbfd23c2ed636ded297f66","impliedFormat":99},{"version":"3532c4aecdaa6e9091a4fb0ce54f47f90063b06eaca7a82d3c7fb9d048fdbb8b","impliedFormat":99},{"version":"90e10e228382ccef407b979924c1afea9eb5cfb4b83d1e7dd87a4034c85f3490","impliedFormat":99},{"version":"0253882022c3e7b724e1eeedbcf7912917df54ef72872fbc3ba39a9a6f9d2673","impliedFormat":99},{"version":"b51569429fced0fbb8167ffd25fc095d9eb4153dcdb3ae2c5fb76220f73a78f0","impliedFormat":99},{"version":"ffffc504e52ba142e0dc36f522ce36fe04d90cf4158330732d02c3b843ab9482","impliedFormat":99},{"version":"63e99649819fcd3bc39393e37ef2a33e030d8a91e396b12bf73e84ba669992f3","impliedFormat":99},{"version":"8ad8556fc302072cb416267acdfd90d968d7216011286010c0a2ca679c69f857","impliedFormat":99},{"version":"87a6f69f00d806aab53636b233b51aa4f8fdbb1c24075aee2583ab32c7292460","impliedFormat":99},{"version":"12872938cbc679244970b3409e6d7f4c0545eed2f9365798981132d7b8725001","impliedFormat":99},{"version":"b0bdd7762bf923e35d479ce37e793f198584d1a233f8d4071ff33bd2521bfb97","impliedFormat":1},{"version":"464eb00a507575b49b8131e60f6c8b191a6172740c498d7825ea2cf5e52e6173","impliedFormat":1},{"version":"163adfd417321359c290ac083b929924b8aaf228ee11fb1c6692475fffef6137","impliedFormat":1},{"version":"99312c72693667351f01aca0d5eb34f73bac1b65f07665c39c927bcaadaa89a9","impliedFormat":1},{"version":"b57bc019fd1aba6f96e34ffaf342a88ce9ac076b9c3d02c9eca86d00097b2c24","impliedFormat":1},{"version":"106809550627bef4d5b8cc1eea13756303d79afe529d9c50cbdfac56aa33fc76","impliedFormat":1},{"version":"894494fee7d5a3b4548e24010a9738fd44a9a0dba916cb6797503dd70abf9b1f","impliedFormat":1},{"version":"b5ab7e48a205e2f34d3fd5253719685f63c8e684e6a6702efddd73e3eb6106cb","impliedFormat":1},{"version":"a9a2eb475844d5011f491430a1261de72263d06dec5d105f24945cfdc9755f25","impliedFormat":1},{"version":"bccfa4c4e7296996e09f011bb76e13c886126a455f2dceedbdd81fa2a3b060d8","impliedFormat":1},{"version":"cbce1616bd6f83fdd2fb52174542cefb35f915698ec912ea540cce3ced36eafe","impliedFormat":1},{"version":"56ac5e40104045e2d37c587362828aaff3b5bb91234f64288cb1e4ad6cddc93d","impliedFormat":1},{"version":"0ec84f4e3c6da2e839479b55bcd18a6ee44c746d0fc1382289b20fcf7bbaf939","impliedFormat":1},{"version":"03c8e9f84fc3d041e621556a0cb644aa693af230b786a6c75345c5626012915f","impliedFormat":1},{"version":"b9960e7f45fd1fa0e85308c67fe2161781f7c13575c5e5b78cc0077f07ab26c0","impliedFormat":1},{"version":"2c7dc32c29ddc9b5ecea873b883b0ccd023dfd7fccac908c1d375079bab30bfe","impliedFormat":1},{"version":"4e355cf36088557a494154dbe9eeefd74ad365c7b31f7c8f4052dee5a2bbe731","impliedFormat":1},{"version":"75474304037f516b4396b6e5f48d468a88e7afc12ada842a0532b006586af26c","impliedFormat":1},{"version":"b575d610c9ee62d04c77489a8952dc676539ea49a3759195dc0219e1872d5c31","impliedFormat":1},{"version":"a6ea37afc292153bde706d6d2d001654cebf5f5775305ed73bf06a1a41a03991","impliedFormat":1},{"version":"d4716c8ee507ff31a028e072232ea33bf0381ff873f7b3ea7df1512042843d06","impliedFormat":1},{"version":"c4c0a197a74fb33f4c3ff317afb80b87a364ee70e99a3783b125fdb10bd07947","impliedFormat":1},{"version":"2d85638e2149139e02da105de5bd7ecae18395026b232954d84f2151872844ad","impliedFormat":1},{"version":"3cea2828d449a6a18ec34a613cab126cf760218da9c56c5bcbc9a09ae0e21afa","impliedFormat":1},{"version":"4233adda50a003baf82c1580d796ef0618c9f223cae485b76421e75c4b2e6869","impliedFormat":1},{"version":"e6d9d7ce027ef2bbcb01c7c94c8ff7cc049c5edd4a3269c9f9545c96fcc8d6f5","impliedFormat":1},{"version":"a5f2c5d6ee513a21362f2d1f90dd54a091b388f438ec6c185f32eaa08f884dad","impliedFormat":1},{"version":"65f1cb956f3b60e55be3ed99223fc597038ddd6730ef9c0e5f91a538f2800fcf","impliedFormat":1},{"version":"7a4b5972cce48546ef8534d69d62a080910bed7a1ec88f4b31741f8f3b4cf098","impliedFormat":1},{"version":"5f213c9dcf0e9c3f58cabbd8e2d78e6f861776c675f2b92c0670bad355885a24","impliedFormat":1},{"version":"ece1697d67256e88d3e4e1777fad74403816bd251ab1de206c87269e7d7d2a15","impliedFormat":1},{"version":"262ccd05bcbf71b73ec6c6715c4415c4cc0635d2aec2379a2df7c8f50728fe7a","impliedFormat":99},{"version":"c0307d887dd9995ac92f6701df640b29aa09981e25aaabfb67f0d2b783ef02d1","impliedFormat":99},{"version":"dcd53497a7a8215068384866b8c63efa7199974e65f2e929a36160e70f49cfdf","impliedFormat":99},{"version":"99b76b4686dbb89c3b432a577bbb73da0c99ec933f5ca935aac0398ec3dfa494","impliedFormat":99},{"version":"1e9657f4e16e44d7ac113572cbd4d89dfd217f8e2c06e55f6c7f9e9cbb69a88b","impliedFormat":99},{"version":"59cf8d5c1bc276ab0b1c9518ba2408420ed6ced164129a82a4fc0c076e6e0469","impliedFormat":99},{"version":"393f8a55abeaf69605f7da4f1b8df0e6c30085eee62541c965a80c2112a384ef","impliedFormat":99},{"version":"b853819c119a2853b4715746c37345132d7083604ce1676439b511c4d46cb495","impliedFormat":99},{"version":"dddf814f7f0b0c49aa471477ee7fd262ab2e5da31a1b0bf4aeb3899881ea24d1","impliedFormat":99},{"version":"25f3ac421287ac8b5b1d30b0fbce55f1f9d1f5d9ff7652b5dfbb32c086f794a2","impliedFormat":99},{"version":"5e870f077ae66d9911bc515291204a49341de6badfe1fd151e42aed426d6fc46","impliedFormat":99},{"version":"8c01706c345735e6880348f51e3563fb859397b028071297d31b07c93369ff39","impliedFormat":99},{"version":"ee05d048f986e27e7465ad4090912111f7609325cd502b97be639abad736a22b","impliedFormat":99},{"version":"c66f76597fe989ef0209d0e24aadc2192321d307754c4b1fd4176220867170b6","impliedFormat":99},{"version":"81aa06ae0561ff6cf2297171a832cf0f2b51be50c4169b73149938b40fc31858","impliedFormat":99},{"version":"2971f7515fceaf0843a871f197663bdb9be0191926cf08fa1d9aaa618f14bef4","impliedFormat":99},{"version":"ab07081787ddaa606e5eda59ba59c5fec5e7e712b58196be3f3ee134c0db4097","impliedFormat":99},{"version":"a4b7f739d26643646ba466b3da2d0578c0b7ceb296724f4403409c6ce767cff0","impliedFormat":99},{"version":"7e4aed4b7d52dee9b8cc8993427c2847892b384e7aaf37f2f5839d3055b415f0","impliedFormat":99},{"version":"b2dc8ef72888d6c567f5e8522358bf80b1582b490178b68f1886b65f49f1e2dd","impliedFormat":99},{"version":"45e0e1d8e069b7ccde18dcb0e45f7b8eed5d73ec85cddb597324120548dcc2ef","impliedFormat":99},{"version":"0c5d0e7c1355a09c583d256baeed17c6c93531de398c15dfb153c129d976ab8c","impliedFormat":99},{"version":"7c41a16e51792b82ec8626d18aec03504c391b6acf361ca257c1d55fd3f539ed","impliedFormat":99},{"version":"fcdc474e7ee9dec75cb20d4ee22a8dcb62d762119fc3ff1d449a98c96d15ce43","impliedFormat":99},{"version":"fe3eac2c17d96e6514a203b74942d1839557e5ff6f12519ed758f5e512ae0adb","impliedFormat":99},{"version":"246dec95771f8279ec9c52a15327989bf54a55883ad2408add8d657da9b41394","impliedFormat":99},{"version":"62e840df16c8a063baa40b6767e7c9c937abbbe8ce1c10143cd2c1f4402cd8ea","impliedFormat":99},{"version":"fa38c67a823bf17a6d46df1dc7561ff2236347b7f72c466719226746177d0efd","impliedFormat":99},{"version":"2f1265ec22e04198aa0bfb4efb32633942cf5e1cada9f5ce427aa660af70125c","impliedFormat":99},{"version":"76e94b01b2e0f228f6dfafbe0639a6742a17aaeb51f7e3d46634a1f82976b3ac","impliedFormat":99},{"version":"088127c6721889fa594d5d02d81babac0accf083b1c700d4b33aabaff185a4a8","impliedFormat":99},{"version":"41d80338d25e61dd49c9c85bdd7e6650d329ca3abb9ebddfce7743e0c241e7e9","impliedFormat":99},{"version":"bde21c653c5f3f2fff966dde6933b1824e91f1f930d4d5aa838dc795293711fd","impliedFormat":99},{"version":"d0fe6277e6813a5f9f6d65a4c4f8be30569d434cfb41e20fede3bc21fa7bb397","impliedFormat":99},{"version":"3adaab1ff4362c4f06aa58f83e13c22038f1e9d8f4f880544c79c29de7b2a977","impliedFormat":99},{"version":"2780afb30424840df9354f6ebc3804e6ab83ac754bb5ab150059f9c1e069209b","impliedFormat":99},{"version":"92e4485cf0349acb0c7f0f27a2a386236a6df63876e42e4f8da39bf83f8b5888","impliedFormat":99},{"version":"fa84e1242d72d8116f0aa7827220cf3616102b6a04240a9aac6fa09849b77e84","impliedFormat":99},{"version":"50120b5b622913b93df396272254ef8d5af0558ebef21bea15f249f50390e4aa","impliedFormat":99},{"version":"01a797f7de4801a370a96fc6446e5d27d5e39b17484ff53506d2fe2c9321680a","impliedFormat":99},{"version":"752b2fa00f11d72fedc8ed257101ba6a9bffb2d52f9cc005c4131ddf53ab18bd","impliedFormat":99},{"version":"544bb8bcea09404c63db468e904f7ede0e61e9631b8305441b226768bc4394dd","impliedFormat":99},{"version":"5c3d835a3cc671e6575c7decad850c4f7d62e9479f58d9baa766637379e44143","impliedFormat":99},{"version":"ee70464b4de4bc57c6d7cf5abd5557469a2fa894d202a00cd8195378cd105af9","impliedFormat":99},{"version":"3fabdb3b7621cd749a475886edd7c3c5397b308b9354e2a2c6387c4652a38f87","impliedFormat":99},{"version":"e819cca4ee07165834bc629a13677c6e3e8eab63077b990b47cd9a0d69d74b46","impliedFormat":99},{"version":"9e5effca545b21b97f4c7df7c9d0eafc13fc1965274d4c7d38d2ebe2d76177f7","impliedFormat":99},{"version":"f17b35b4e561d33c1fc974c338b7f64128e31c0fa1aa1d8b4887d57cce9da353","impliedFormat":99},{"version":"28f7622016edd2404246af0f7c13109c9ec82716faa5923951618d2121679a85","impliedFormat":99},{"version":"1bf44d79de03e3a871cc8f1a86d7987347f53cce972d4d49726380597f6c0a34","impliedFormat":99},{"version":"6f5995332b86c60079e8ae05fe4e977c38d32bf347909e18432a8d069d605fbc","impliedFormat":99},{"version":"ebf8bf45faf396c3e7034344d70a1fd27baec385afff4e1c5a263833cd3a6209","impliedFormat":99},{"version":"5b79199cc47afa9651ecb52ba1375030d25536b0a583812b07d0c222f09a623c","impliedFormat":99},{"version":"b9e27be0b0a93387bb0f1ece48462125c355cb6cb4e7595868ca74f506797289","impliedFormat":99},{"version":"f0fd0a020bfbeae98865aa7faee29ac827de677c6818d7b261ca61b384ad46c1","impliedFormat":99},{"version":"22c8b5b2189ab6f98b7471f41545c831283b1826130fba01ac1eaa7fff470696","impliedFormat":99},{"version":"bbb26da5902680bb3fad67ac062cbe045d2489a933ab00eee3b14710ef9fece5","impliedFormat":99},{"version":"8fdcd5ae10fa26109db683659d83c2b79915f302b099e9ac301940947707e282","impliedFormat":99},{"version":"6ae471bbc7acfa79402d5c15bf7069dfabd071dcf978471037a6f7d8b64ba33e","impliedFormat":99},{"version":"92cb6c485bb82310640a2916bb5b80f950d1f82902f78ad401d0c1edc83f792b","impliedFormat":99},{"version":"bb126288b679cf6afee4cd3d71f26ef74d6ee8c7b00ac6a748f2ece47c2ead83","impliedFormat":99},{"version":"7d9e8fbee45e969e4d5b7b73962139b9b6401bfa5508bb9b26c0de27b88a0c4a","impliedFormat":99},{"version":"9bf7e490b1db270aaf2972eab5103439e284a5c058764e3439f2cf86d5db4ee2","impliedFormat":99},{"version":"b76f3c9c799d3438be2b460ef81f4391aeb49cc5ca04fdd172b4f645cc475199","impliedFormat":99},{"version":"1628d237ab8865b2963e68b0051a3864065c07ab2f56a8172f7e2e9bfbcf68c0","impliedFormat":99},{"version":"16a9809f48a2cb7c0d40447bc1bc46035538c910a7f38d030c12baf9831ba995","impliedFormat":99},{"version":"106a3a7026e3ffc5f5f955b9988b8e1318d4b69c2e68d8931231497efe654f61","impliedFormat":99},{"version":"7767d897a13349379a94c0dc0a105c3d1a50e14a7fc9b8a004126386fc1c32fb","impliedFormat":99},{"version":"1b14f7843c04d5ebe476beef8f51af18015f7a53e0075ffcbb631f5e84b7b38c","impliedFormat":99},{"version":"348c012fbffb0b323b61c8c9b4f2941b60479749087d02a2fcfa406355d38fe2","impliedFormat":99},{"version":"f5288fbd5cf3665216606be5022df2ee38c7d0a8b31883837bcce626e1a60815","impliedFormat":99},{"version":"881720d92a91e8b1a737eb897da5d78f7bb23dcd4a01a618e7f0f504aa5e89c0","impliedFormat":99},{"version":"07c1cbffaa1e3fbfa16ce66f6c72dcaf24a8942750ae11ac21c463c4f9eb2590","impliedFormat":99},{"version":"9e3aea77f0fbb094e0f0ccfaba42a7f74be9af4ed6155bc4608c149faafe67f0","impliedFormat":99},{"version":"7ffb823feb815ea652e497921bf1957e1217fd67435fd6b3e36a08b4e63bce2a","impliedFormat":99},{"version":"bec8e9bec3208faf07a13e562b08d7cf46b8da230f4b513e4fab6321d43e88b4","impliedFormat":99},{"version":"584fa0522a2af9e930d53f2ea9fd08720c7692380b8d5200653c613f0800c949","impliedFormat":99},{"version":"a50820dd3817ba6a13617c54206cbd658e7317be75bb73549dc862a3b59f8d99","impliedFormat":99},{"version":"e3974c17c459b9e2ee41cb4ff89694be8b9597ab39ffccfc933b79d2ee6cdc88","impliedFormat":99},{"version":"5000ae4f56f5d7ff967eaac99c0ea1200060f60a6caffac093d56afad829b13e","impliedFormat":99},{"version":"ad90d3ec2e4b1315fbbcbd66f519425e3be34f2a9c8117a33e3e3c4f1bf3ede3","impliedFormat":99},{"version":"125caa77d5c92ed0bce963223d5f0991f41a4247ceefacc71ed1fcf033d33012","impliedFormat":99},{"version":"176c985c0f4dce3d37c816687d2364e17f721c78d6fd8cc8c8e1d136d2b1b5ce","impliedFormat":99},{"version":"d5379f5ea5e8e33a2876436c1d6f99515e051e03ed1d633192a154f20272b67d","impliedFormat":99},{"version":"da972b315f5be58f2d65355c88c4e4ae103e5f231c181159f9ae30622f7b150b","impliedFormat":99},{"version":"378d39f2088cdaf1bd4ad0585673ae643fd209289696fef06ba76743a203d922","impliedFormat":99},{"version":"4df6cba4d0be585e506de782f55ac94a88f305c3bf22256d3f71b1c0b0aeb612","impliedFormat":99},{"version":"55a178643de9cdc6b7bd5ef75334775403506ffe4911c3d06869c8b556f02936","impliedFormat":99},{"version":"8642144dc470dd207832c66da180d276d23c1df7fb5273a0b0c9be91cbf3348e","impliedFormat":99},{"version":"5269764bb1f97de5042d2a29e49f8b6d772dc93b8749dbfc13268faa3fa27172","impliedFormat":99},{"version":"87b475ecb77606907b0ffa060bdd3f2792aff9933d643c956d2c588db393da72","impliedFormat":99},{"version":"39e9ff6db30d898b7caee616cc323bb3be1eebbec30ed5ee74d40695afa6b31b","impliedFormat":99},{"version":"30587575e1c91cd0b7782973c1450bff5c10bb85c78c0e85fd2d5c07fb9369cd","impliedFormat":99},{"version":"49dc420dd4566e04d646ecd9c970e140aec546aa93803423d9db5d74c3d73284","impliedFormat":99},{"version":"1e0d4b7d386174f3251405e45d7e59ada60b61387ceb3e688af407dd069ea5ba","impliedFormat":99},{"version":"f3f065410eaa065ddbb6855dc484e8c7ecd2c0ce1c41d9ef690922f07154161f","impliedFormat":99},{"version":"8e82488d1c2432037d8e4bca0ac07eaaa35a205ae46be2b0b63496f4d2052003","impliedFormat":99},{"version":"b5fa09e31a3729d765db680c51a0495acc02de79f4e8a25013ea4555f0166e3c","impliedFormat":99},{"version":"9a8b4dab81b1d11d4c4c32f32134dd2b856eaad945fcb31c4ebdf3ccd0836ad0","impliedFormat":99},{"version":"06e276bd9b50595805f5963fadb6becc0acdd3b9375c25eada67fd7661d462c5","impliedFormat":99},{"version":"6bd6994232886364e9df4f095e45d301f95ba9e10565b759c4842d0c88605494","impliedFormat":99},{"version":"5eba0c32dd3e63c9172e86e934cbb37cd770ed7660e4eb8f25e1deab089a8d0f","impliedFormat":99},{"version":"f73b596cb4b4860fd0a3ea8cab67a42ad344d95a392ca986ca4588f59ea8c2cf","impliedFormat":99},{"version":"6294dca6a2274ae452a8538c4cd77fb4351d5f8c549de0b06f3077f7365e971a","impliedFormat":99},{"version":"c22d73a1f99b645af8f89a1eed8928e69c02d28cfba4ecff6412214f29bea5c2","impliedFormat":99},{"version":"69838b322bc48c477bd1ea030a032266ea4532f4e282798f9110ee3188107459","impliedFormat":99},{"version":"83b3de5cf3a1125dff81dcbab45dbfab44880bc9487d043c5ce1fcb170e65fe8","impliedFormat":99},{"version":"4f84ac70b4e55fa01177054cb713de3904dcdc7f690212d1259f3dc4259191c7","impliedFormat":99},{"version":"a2140f790bd63ed7c5ede90f1a224c65fd36c079c9072d6b8f9f0551b7379b87","impliedFormat":99},{"version":"b455895fded917c4ebe67cd39ac6f085883fd32c7b007ecb020c7301955f26bd","impliedFormat":99},{"version":"9664480c5c0c79ef95b0ffacac950af648f3e2c2a55ea3152eeec85b1e875e5c","impliedFormat":99},{"version":"d97d2371bbf1f7147d76221e0f65a1320d51852861c1645c5c116ea0e6593093","impliedFormat":99},{"version":"d15cf197e8730d1977e37f0c11c255fcad73408526525ce8da21c7292a02c00f","impliedFormat":99},{"version":"738aa8679233c06c3d2632feae1f1e578484c0db7787db43d0273b81bb4ec2c8","impliedFormat":99},{"version":"dff3bfd38970ba4bb13bfd70b11ec89b4c1ab950d9a17aed1a0e06e59ad60a29","impliedFormat":99},{"version":"c8ddc3e4520c477fbd560a0f77884c24220801039911c3656ee88fc431121c19","impliedFormat":99},{"version":"338ae2db14a0db870d09f574bc41d37c45ebad8acd97ee483d9ccdd77dc6a37c","impliedFormat":99},{"version":"ee083b355085d100be23d1decf29d53d4ddefdda6ae215abc7cbbf131735ceef","impliedFormat":99},{"version":"28499d4c54bfa8998668758200ac67fc43c063fb7c0642e36556b43d5c17cbb4","impliedFormat":99},{"version":"da30f6c1e1455f1d4a03d6c5bcb28aaa582a7a674bec673a4780d58f8c41e3f9","impliedFormat":99},{"version":"600d36b454a977e94cd520f171702f9773bd7d4eb119043af7e8a7e8d87e7833","impliedFormat":99},{"version":"5177409669ac6b8c94e597a74183bcad072f1c2e6e29ce95a7f11bb4849f2957","impliedFormat":99},{"version":"d34f60f64c4b5e2efe2a2568ae6f11ce2ae0a7a53b5d997000ac868aace941d7","impliedFormat":99},{"version":"6d8fd1c9a6d1e2cdaade584c8c6e52d7d91a5b6e2473cb9a234fa61a5a2527ae","impliedFormat":99},{"version":"6480cb463c99dfbb169c82cc6e0e3dee78bf539496b3dd902d1cbce1e7b114c7","impliedFormat":99},{"version":"edf4e285a99078381d0554743cff7914c6f3592e6a0d3570bcfc3c78486e38b3","impliedFormat":99},{"version":"2607536b50311a951416651c88f7f1703f474c0aa2099f62edd70cc0c1731ebd","impliedFormat":99},{"version":"4f91921d45cb66a707d93209669cb1b50a656a1185a6ff26985dcaba28ab20c0","impliedFormat":99},{"version":"7e223adc6c5e7788a62a483fde16a77efcf4b5d60698c175ecfc5c162ecc2ddc","impliedFormat":99},{"version":"71339ed026a7a8db587491e432355c568c81b883eb70043c4dc2f6b1b573dda4","impliedFormat":99},{"version":"bc2d2054dad29d49903c3e8b906fef1f6f4fd59c9369835cb4e4ecea4b3340e7","impliedFormat":99},{"version":"8581ac7ff6b3c6e03ca79463dabdfff6aea47467b516d8f6c8409d8a71083566","impliedFormat":99},{"version":"628501f45c8a9f580467ebe00476a04b73af764310e15ce8c912dba00bd26346","impliedFormat":99},{"version":"a7f5a13be68652580dec8a3d343510fe1a35a0b48df833d5ac51c04571b5c0aa","impliedFormat":99},{"version":"f79fc21b4786999e4af802f93372ce020258a231c5822a17ede6220e3dc9e6a8","impliedFormat":99},{"version":"d0149446b519916b13bcd730e9fd95765bdac55d7699fdd5cf4b3b047e98d6e7","impliedFormat":99},{"version":"2b0e8c71e3c827ef0483fcabf3e72b3554bd921723b500ad85d3b66d55d66b50","impliedFormat":99},{"version":"eed67af93bc110cb6d1462e986d1251fcb2283b44c6c78e49574523b654553d6","impliedFormat":99},{"version":"0f8310874bb6529cfa189ba8ea92b71b047048584747caa421653bfcdb9d75ad","impliedFormat":99},{"version":"23247c8e1555f21c09bf33a131aafe023ad1f4b79c52bffa737aab9069e4c8e0","impliedFormat":99},{"version":"ce8f103efb85858cc20f1749be51b48878e2b73f4f7b6e37b6b4a8e83fd233bd","impliedFormat":99},{"version":"0f1dc424056c1fedd313c05a2c6178ffe0fb6221fa7ceae6c5278c416a78f1e5","impliedFormat":99},{"version":"1055ab329107f5416f88dfed11b6a2a3b111104ff0922936cb7e421bcdf3c7d6","impliedFormat":99},{"version":"b6541733ee36872d780320c48887fa30516f565154940da690c4a6b75efe6134","impliedFormat":99},{"version":"b30e09decff24878eaa274e1dbfc4ef30171e2835becc2118e2d0ccd0654c13a","impliedFormat":99},{"version":"a1c67513966879b3349ccb3afdf4e914aa14264951522de85792f2a8ba296fb8","impliedFormat":99},{"version":"7437e57dc3052871aeab0a7306c066b0f20bb944afb08f4eec86c41928355857","impliedFormat":99},{"version":"9588297190323fef3cb42df0e6004c4350b04a74463d7d7356e453604fa3bbb2","impliedFormat":99},{"version":"68f2cb1c33fc79c43bd9de040aa19521a516bbb31207823fb982f9ffbdbdf1ff","impliedFormat":99},{"version":"21b2126f44a0f22f48c681a0a420944e463344475fe116f6fdbdea94a2146530","impliedFormat":99},{"version":"653227fdae1da69df2e87cee64a9a78bcad2f489f47c0a658058bdbef6a27465","impliedFormat":99},{"version":"223eba92724748f8814ba5a175003be0aacf5ed103cfb3cff704baf0fd86bc05","impliedFormat":99},{"version":"de0682a22ffb74e129ee7290949c04a4b6ef5b8a9cab9778238b20c8f31f4b74","impliedFormat":99},{"version":"7e3e2259a262ab4f968d5b332a339d908e56a2655e261b3905a53b88eb11286d","impliedFormat":99},{"version":"e93e8edee56ed528c6d6def93ed3174b19b25ec193e77c12a52e14c9c420324f","impliedFormat":99},{"version":"00490150758e6c6b12e2aea17c06c1cfb8830e52d638ce6ba9e547073e3594dc","impliedFormat":99},{"version":"97f0f7cf61f114ac72f4cbd2c684d2c0e5b2603d68f324ff2723c7f28e35a99d","impliedFormat":99},{"version":"b296a90977addebed894e0d44e4ad1936454ee41a61f965b9b47fd760d3f2107","impliedFormat":99},{"version":"cf65240c705c35651d7434b5abf84c43e8b03a52a3f73557bf07d31ff70aa68c","impliedFormat":99},{"version":"17624903aa01f7ea7514356e69c5379757b89bf8ab226ccf9dbf000433ab4c84","impliedFormat":99},{"version":"80cc8f45894638735cd1fcb362904f975a3aede9cf61dc84a439b3700c18b126","impliedFormat":99},{"version":"b956139ddcad5b3e6be64dd57c0ff18166d77d8e750441b12f5419ca98e21cb5","impliedFormat":99},{"version":"380153614a4056dfdbb854cf2f7e662dec7f40b9db5ff87a0b4821f2954d9a3f","impliedFormat":99},{"version":"fe8b988abf30ed288b9b8501c2e21947be6974b85d32742a8151be2d92b33341","impliedFormat":99},{"version":"7fa0348c042f576a7182b1c2163480c11f9ddd3619087f41ed2de9fc825ada41","impliedFormat":99},{"version":"c5d15aba2cc8d6262aa5cb8533f9385c91926aa706bfcd4f8aaadcc68abebca6","impliedFormat":99},{"version":"dbc01d9e9d303eba2fa4230b963ca0671bc4fd1c3dcea6a4a4e1541856c020d5","impliedFormat":99},{"version":"e63acbc4a484ae9d1df60416b3babd9b22efd06b6551471ef369e67078159a9c","impliedFormat":99},{"version":"4b273b9d4f552993904f8bb20b78df54c8b67d48e6596b48faea111fec8f0042","impliedFormat":99},{"version":"2299ff349bcbc58b468aec0de742bf9b0e9014a2c8db8166cd3f3c934695953b","impliedFormat":99},{"version":"d594b5b4ba323f3e88b160c6a02da933aca223634136a95b72d7546e4e2a4c8f","impliedFormat":99},{"version":"2eb6e08dcf589b8152705e53f52aa039ae01996ca75450f7436a8bbfcadf1428","impliedFormat":99},{"version":"fd18b1440b8d663cb12a32f27ede5af1eed9c1f0aaa724874ee1b6ba59d59b01","impliedFormat":99},{"version":"6836f55136d60bac4f84785a5eccb87be35b1dd59b04520f24ad198d805b497e","impliedFormat":99},{"version":"2d063f66097f9a65ba424bd73d22c6d1c45d71d66c7bdc041e117bc5380f69cf","impliedFormat":99},{"version":"6769780d7897c98ccf95a164fb389053f7033ab76096d7707bad918b6379b3d9","impliedFormat":99},{"version":"691f132d976d44148ba5d26323921b72b29f346fecafb8f0c1d51f895b3b2c3f","impliedFormat":99},{"version":"f5b0e8482c965653f8805b8f412c3f6079742b55a74b2f546404a94f78ff9f6d","impliedFormat":99},{"version":"777194bb4a2731a1c24cff73ddd229d60f2adef93c14bf8ee3fa137db0068741","impliedFormat":99},{"version":"6ce48b57bacd940bed49463a8acbf9ed681159c7461ea3c90ad35ec352185506","impliedFormat":99},{"version":"c69205e3c14bdf127206d3a40948124c04aa13c9e0084255fe42799c88ba4ba7","impliedFormat":99},{"version":"94b70dd428a01c2e319da09280d902a1a21f9c2a3fd58bc35cb1f1973d5309bb","impliedFormat":99},{"version":"53236c333db9ecd6dca20dbb8ca9696d28b22b9eb9e9f956a49baabc1e2eefc9","impliedFormat":99},{"version":"a5cbe0017407477fa609dc831b8bca53c3e0d78095b1d0a84b09c34e204166bf","impliedFormat":99},{"version":"00a84dc3bf5b0d9b5a4df17d7a87006180033a79d66d2f3ca466b4cdb59c8205","impliedFormat":99},{"version":"8df11f7ce2a339d50f9f83531a71cba7dc1bb158b4a37d411607e9075b3854e1","impliedFormat":99},{"version":"18db5f3bf12adea76c9085aabf6a28a8d45e901fb660d894d460922881b603c5","impliedFormat":99},{"version":"25819ba0cb05d3f35f8380840dbe5225913e6963e1d4861d780c168d8918ab77","impliedFormat":99},{"version":"a16f18b44b6a2dd3923807db46adf04fcf76b46137974a90cd2b0c291f9272dc","impliedFormat":99},{"version":"3f7a1936deba37995f18928f2ecb2a9c6946107a5c04bedea00171f0cdc988e9","impliedFormat":99},{"version":"ceb5bd95f9125e1917fc857d930b36018dbcad9de78ad85d9e60459a6ae4cf3b","impliedFormat":99},{"version":"6029ff0137475dfbe86578e6c96f4b1d18c33b07c7766f6576ef09b3c8a9e0b5","impliedFormat":99},{"version":"37606e5d6e861fd3140c8d01e6689b03b44c58be91a9081702e3a27f11d187e6","impliedFormat":99},{"version":"6c2c736157151b4124f5b529bf4df8a27508e668657c386fec7a6d3c69401965","impliedFormat":99},{"version":"081dec2c24c705839546e3e8ce630e1e171e07ec844a2d6a8bb45a36c9482949","impliedFormat":99},{"version":"d8f93f062b21912ffc00cc6e19f890a5dfe85b67889d7aaf11698fb4195b2492","impliedFormat":99},{"version":"eb777bf2501c4da79f158c59de904de7460405f2c318a73a3eceb06dfd5e161b","impliedFormat":99},{"version":"afcdb59a9be52b433560b595c2f814c09b4060d0bbb54e5d2bacde4dcb5cc7b4","impliedFormat":99},{"version":"90cb7f9b3a253e70d74a7aabac4871aa01bc1b4c03ea82b91c01ce88ea356111","impliedFormat":99},{"version":"ef0374ae519a63abf52b1e38dde5aa3af43f60dcd3f068c9726180b098b1192b","impliedFormat":99},{"version":"4715cd51fd59417e9c1eb96da509dc7336840f33c433a961c039e5f287768c5e","impliedFormat":99},{"version":"90d83c148c862dc4512d9184256d519e48a2e447059b7ff84fb72eefeacfa1a2","impliedFormat":99},{"version":"805afc38dcff39b844c0b487a09f3d052e1a0dffe0b7f957429003e4afaf266a","impliedFormat":99},{"version":"9b2b04904da27ee3ab62cbf8f59aee6faaf67ea8fdeb0c0d8f1b63b57529da35","impliedFormat":99},{"version":"fc2d5e62b823f516277b5f4ad8e4d2a8c43baf085182d83144462373c992b019","impliedFormat":99},{"version":"c95785f7e7961f851adecf83848905ea7c31cb8abb4562307db48275a459ac65","impliedFormat":99},{"version":"833273d9b069d37244bc7f16c68b5eab4f944b776056f0617a6e073bc3b5c136","impliedFormat":99},{"version":"c67a240e0c343a3c42d9253526e0d5d25e970c7a348b41b146dc4846a99af48d","impliedFormat":99},{"version":"a0bab5bc612fec640a6062a868bf08da1309918104305ded49758aea4d7eae1d","impliedFormat":99},{"version":"d1372c723d43a57f3d6a67d992a1b48bb10f1bfc905c9615026ed49205baf2b1","impliedFormat":99},{"version":"896357cbad293720707dc31523b09fe73462279aa0c8caea360e9833359d07ff","impliedFormat":99},{"version":"ad5a9e847621194852a2d95d50d5b9b749a58f32455339464b84415d92bf799d","impliedFormat":99},{"version":"66f9a4ad45f9884cf5a27e7fb21289751d800bd37840881ee8149fab0ed8f3f0","impliedFormat":99},{"version":"4bc25ab81633ce0b93657c3d10f09813d2a85a9c7fc71d575cb37f370a9fed72","impliedFormat":99},{"version":"92343ed45fb0717af681e11461ffd01a67fba055bb3693535bfb47903b8374ba","impliedFormat":99},{"version":"0b07a27bf349abb004906db2bc9218a90d1ef2e716648d59a0746c8bb8cc819a","impliedFormat":99},{"version":"2169d3d570061500ba638dacf6c5676b513eeb6e45b3719f1dfb3d56f0c718ae","impliedFormat":99},{"version":"ced9d132f27b0546bf8fd44529295fa2a2fab20aa0163747fdf15317a6eb9a54","impliedFormat":99},{"version":"22ec815196c2730052d4825a00d0142d34875e1f1d6796ad4285413feef84844","impliedFormat":99},{"version":"0660e4298efd5213f0ae8b96828e26ae478194c0cef5d03377ddc47bd9e99055","impliedFormat":99},{"version":"449646df77d3fd12ca8ffc77cc5805fc68c503587846edbee0873064427f8a12","impliedFormat":99},{"version":"f4786fc470d54a29805b3c78ebdcdd7c7cf8d487b96eed4d34b1dd14b317347f","impliedFormat":99},{"version":"1a1e5ba656062ceb33ad0e53b2161f152b67ae1a8718b702a62273cf362de056","impliedFormat":99},{"version":"db3bf2c6451ae155eab361cf1f44c42b0f7c99e524ea6433d864abdacc454360","impliedFormat":99},{"version":"2dfa99203385f4f2e161f7dcc15a277cdaf2348a900a66aaee90af6a822ef7e1","impliedFormat":99},{"version":"0dab42d854756024d8d697e3f49d23c79cbb406717d06b65c1237b8c5eee0e4e","impliedFormat":99},{"version":"0d8f2bda5b09c41b4d2ffa99877e842f1a8f14ec8a35bf9b6654df9c7de90ba6","impliedFormat":99},{"version":"f3c44992bcb8dadd0601cd86401eeced2d5de9d61dd04442da431f2abebd8aad","impliedFormat":99},{"version":"5207bf1b65b7d48487b163bbcb26178581d463c8cbb9fb16e688a99f66227369","impliedFormat":99},{"version":"bdd56499af4cf393b063f63533f5aa9509c577694f2d4b7cb476641db61b6e7c","impliedFormat":99},{"version":"852c4f6f4e659efaf9739b601d49c7e92a0178e08155a65825fbe548eed70ef6","impliedFormat":99},{"version":"3bc6a2f0bcb95b7f3f461428f329d8d6cb6550daa00b0d8f3d44c10f13cbba3e","impliedFormat":99},{"version":"35d149eda6d07c7f4a0745e34f8f9f27f98a1800f49f60681f3b12a7b659818c","impliedFormat":99},{"version":"da440c7d00265c157eba9885b3e3e452217a822cff98d53f5b81b9861a7089df","impliedFormat":99},{"version":"a5dfca018292a8392060c7af8847062aa8c3ba098d97c015b05a9d3697398057","impliedFormat":99},{"version":"450e3a7612a066a2bc2deda1acbaa9ec846d4efe64cc1c1839bd2d41d30548b2","impliedFormat":99},{"version":"eab0e1d138c914f64d7bade1cc3ec85e31225bf1d8749f092c056be459213faf","impliedFormat":99},{"version":"b9c2122a54f97cac245ba6beaded1552feda913a258057f1d71259f71b7c8294","impliedFormat":99},{"version":"62c6fc6ea09d1dde5e61e94f1e1a58c13966a1b6d1c62a5df3e0555867ffa2e9","impliedFormat":99},{"version":"4c23188ee3e9c36cfeb65b2c955cbafccd526a5d873a73ae16240cb1f020f718","impliedFormat":99},{"version":"3e4dd23171e3df9654ef94a0318b61dbc9d1275ae53c33fa1b850cd2f5f56927","impliedFormat":99},{"version":"74543701fd61b1e5c90ae42e351f84682d15064a89062660f84f5d46b968252a","impliedFormat":99},{"version":"3e8b8bc717f927c3dd781998105391a77309cc3c91e898c4098f1674ec475e75","impliedFormat":99},{"version":"77e538a3009c2c99f6a8f2cc23aae1c58ca0027453460340eb41ae08bf8078ad","impliedFormat":99},{"version":"3f3d6f9af5fa5fe59859d996579668d025f282fa626b2cb8fe9fdbfc6b3be5f8","impliedFormat":99},{"version":"1e16795997292995240600c6e704bcb9464ed772abaeb1d0888d3ccddefc567a","impliedFormat":99},{"version":"3b40ef29b0c0ac2a8e0975e770dd64f7d71a2f71a8c860eacb7d25c32a5b8be6","impliedFormat":99},{"version":"b1142976ecc79bc0bc2f9a26554a224cd0828fe86ab1ef7fd27eb09c1bdb3b6f","impliedFormat":99},{"version":"2c0696602ae38ce55b12cd9a5abe9d1cd4f382604dab673f2a7d6e8c5bf75219","impliedFormat":99},{"version":"85a0cd0273f2da118e4cd6fee552fde332ce980409e37bc599f41883d5fac8cd","impliedFormat":99},{"version":"e7db58033d637e29a069a2ccf1bd792e1378c2a96eb4fe5705482475fc380e11","impliedFormat":99},{"version":"bc495a164111ece95e2107f37d5c76173d884ca08ec034a925657304709b1ed7","impliedFormat":99},{"version":"073a11f0c2a6f82f235ac9dff48cd113473b201da06400605cca05df2b54e9e2","impliedFormat":99},{"version":"2a2d08847cd21656caec726f0e46de5d06fe82e373c9509f53511787ce2332e0","impliedFormat":99},{"version":"00d6c5a0151f4feb6ad8246b2d30cbf3472ea3809eecccaeae1d57a25500e0ac","impliedFormat":99},{"version":"17c03e7ab6233d52815a32d547e8ca8accf4f49a6cb73840b12782db85983be2","impliedFormat":99},{"version":"823640e6dea2263c121a33926a890ef3ecf207a0573fa14f5d52ce8897945fb3","impliedFormat":99},{"version":"5f578e22583e329036c0fc0881be94a958221a41d191448a51439ff4042b9c45","impliedFormat":99},{"version":"346686f5a8d481977aca4f063073430995a4535478a879d6383a6c93849084ac","impliedFormat":99},{"version":"74a22d905c12d004abf43b6dd1b2f3bb94c5011c79506f2c7b0a1b48da481ceb","impliedFormat":99},{"version":"709935c58878fdc80bf5490bce3685aa62d797f0589a63af896de79b8f206024","impliedFormat":99},{"version":"b0fb88f92d1c669829d717fce0a66aa2132a22b91e09c8ab40111c4c230eabce","impliedFormat":99},{"version":"d64678f7674526d878b60e1ae16103f5f6a1017d78e5aa7b1071f6d2ed00e916","impliedFormat":99},{"version":"63f89e1bb3ad27857d52bafa8a0d8579758ee5b13b303f3e66b9ef91f2117b41","impliedFormat":99},{"version":"c0b4bcecf3d33d89769be80959e68e0bda710eff16b1d67188db6a31e181663f","impliedFormat":99},{"version":"7bb4181c823790c9013a70d348765230c5ebf8740f6f5f7e9a1b0cdb56cea3f4","impliedFormat":99},{"version":"56a522a87ba3970a79fbde182eb526209d9152dbc3a8d3df0d90a4dbc8639721","impliedFormat":99},{"version":"8b5339809914311fc7f76d17e827d491d6d9138fb74358507375a7f24da8859c","impliedFormat":99},{"version":"f810da16b2b78b2381aa1c36646d21aa39484e38fba68868edffcd0f713837ba","impliedFormat":99},{"version":"7e94685fda2290d65aaa20dec3609b6bdd54cb0a9f69ea9b16744374eefe05be","impliedFormat":99},{"version":"76ab8049725f85cab48ef94b89f565f4527de6c0cde6a3af4bf7466a0ec0162e","impliedFormat":99},{"version":"a9f16b029f672a071f7d804474081c670244685cb6baf3ed05bcfcfaa3267552","impliedFormat":99},{"version":"f3e18e0ed45045cee24dab3e41bdca99019717438efd0fce1d7902dc10d8e977","impliedFormat":99},{"version":"da48818098d63604ed891a087feaeeaf84eb041ee36ec83281b365ae206064a4","impliedFormat":99},{"version":"8e689f3fdc9a0233c20ce136226def699a580c34e814a6f135294bf53dbdf18a","impliedFormat":99},{"version":"99b75a76d6404f478c6ebdac1bcc92e9886fff74640176e7b039b3f2f45d0a7f","impliedFormat":99},{"version":"125a4e60e8164df7407159834e30e91c0e28852596c2d5662f09ec4f1e7bc5db","impliedFormat":99},{"version":"41f0402e3c091e9a924df58750ef2dd285a7396bccd8ecb19091c523bdf4d8d4","impliedFormat":99},{"version":"4563f14610d35bc9c0bf392ae81bebc2ea90260ea089495e771c7fe5caa933bc","impliedFormat":99},{"version":"b4b92d3aefcdcf7559fd318a078e2ec46c674dd423a2362e22c134737a9bbd18","impliedFormat":99},{"version":"6c7ccd051f6e0604a945765dad2cc27080091234035e1abb6051821f1b49a31f","impliedFormat":99},{"version":"72c31b6cf88dacde372f6c7a835cde91a01a7886429e5628778db5d16c954462","impliedFormat":99},{"version":"9cc9a0093c648d172b30d0f83e989fba99b6ce1cf0914e35ffd79288ca6f43a4","impliedFormat":99},{"version":"71bdd5f7ab5dd09a8c981eec69394fb782dbbeedd27b2ee13f9bf1a739c259cc","impliedFormat":99},{"version":"529196a38581e512f4ebef2e2dbc708c0d8bb043613c3b138784b99b246ca3d0","impliedFormat":99},{"version":"c5fa9e112e12b49afe24295a03a9f0cf38e4f4b88721e7f5c2fa944d1a867847","impliedFormat":99},{"version":"0019b2d02a556013ce27513b50050c04763b8d785044a1b3fe5f52a1551f8248","impliedFormat":99},{"version":"2978c31837fb25ff2af6eb83e0f1b0f77becb5143a5d6243b25e66a56071ac4a","impliedFormat":99},{"version":"7c9e34670fc6edc910ce89b8875feed2b4bc779f35b8f9c02fa1d398a10098c3","impliedFormat":99},{"version":"285f804ff83df581096e8805af1de5fa800cf7bdcbff7bfb7f0437bc7d2b8e9e","impliedFormat":99},{"version":"c19f79ba3d4a95c82584fb5ff8b89b86a12040043a036271512f300e4559f546","impliedFormat":99},{"version":"1d4f4981c0b3eee27181a9b599e3fa84e82042def1180dcc6b9afd882881be7a","impliedFormat":99},{"version":"2b64abe98ffe44460e9caa4f5a79198924d0413fb8242e59c4f6a847dac49958","impliedFormat":99},{"version":"df8ea614b6047fe9b2ebe419d88f5ec8bb1bf812db2d17ad9472d2c6ddd19dbd","impliedFormat":99},{"version":"5e3498334712afc9bbcdb484825a3da40911818749be86007cee90d974022f2f","impliedFormat":99},{"version":"7743fa7975975fa0636955e7b8a06754b4caf15d9f4d521f5548a9da109dc59b","impliedFormat":99},{"version":"36b06221013bdb9a3f7a73254ec1cbc7bb89c9331557735d7d716a6e662a108c","impliedFormat":99},{"version":"ce5efd31feeba2f2c05a5faa9a7bb7f23e69d50a301c0444806168be26fc63d0","impliedFormat":99},{"version":"aa01377fda20c7a6bd5c84b28cf8ae6d4621e77ab3df0193990da660dfd45188","impliedFormat":99},{"version":"e89c5a5b98825946feb3ce19dc6ae926602f9d252ab9f2b7b24561d4d0430817","impliedFormat":99},{"version":"52bd3a7f4aa0c8a3d6ee8d4fcd20e61d4efd90c2389b1339fa1f4f76087a1d6a","impliedFormat":99},{"version":"d2f9818f3f0e2be24cd2431abe29d63cb1e2854c536e7cf3876c99313e383bf9","impliedFormat":99},{"version":"92294e1577cda8955c7cb938b15adf5b895d6e218b6c84c72a70c6e68f3ece88","impliedFormat":99},{"version":"a7ac6d95037b73dd40c785603cef9d16242dc6875e0a28f9deffefba72447c37","impliedFormat":99},{"version":"c0089b59c404e1418393e8cf096ff5656e2e6fd0088a44a19c05dccd56019fa6","impliedFormat":99},{"version":"1cbaf869ad0f1ee9a0f5da663313b85eabbfaec061ed980532fc76efe4065009","impliedFormat":99},{"version":"3cfb983ebb8c301b1d250acf9db14d06e62a7f521949803b6dfc7e1428612677","impliedFormat":99},{"version":"cff6eb4f5f691ae4590c780b34047f12994f136c18cdbecc16fb28532c8906d6","impliedFormat":99},{"version":"05d859263812f870a5e6e243c4ab67a295abc846e2c39e059755e00ccc1a78f2","impliedFormat":99},{"version":"a955e47bb331a5408717883ee3e0372546147c1dc1f13188c145102d13bed8fd","impliedFormat":99},{"version":"556e8928dcbcdf87d9d91de2f08de50ca1c982d693c2a0a7afb988e1eab349c6","impliedFormat":99},{"version":"f550075a65740664dc278d3b0a4d501b47249dac73bb4367ac967be51a45070f","impliedFormat":99},{"version":"95dbb4966f1e27c5f3bf4569eb458a50563c9aedcc6c031a1ed22495f44cc462","impliedFormat":99},{"version":"2f047d5ae885ac6f51ca1e626ba12015c0e5898050db1b89806ae0ff73254172","impliedFormat":99},{"version":"068e3c9ecfa663034d02d1dc14783d5bc4ef797014ab46582499d3dd0796e0cb","impliedFormat":99},{"version":"c82fbbccff9bfaf0813f2c01307d892f6bce9966d2955c6367bfcd5cb47bdcbd","impliedFormat":99},{"version":"046ae5db0c7d90200965c84cfe192c4aabbf652d054d42570c2a2540d48b2f77","impliedFormat":99},{"version":"d7277c9a32b62de91c31bf2b493b0088727760b633595999798ca3828b1b8de3","impliedFormat":99},{"version":"22f394535864a4bf8aef37baaaf6151e3327e9e16fc9eff2ab9a21e0743640bd","impliedFormat":99},{"version":"2e2fc9c1d4449cad8b76c29391f2e2bb07c2feee9e361c8dd6452484d90753c9","impliedFormat":99},{"version":"e0ee0bdb18ba1865ce7b102aa62629201d8c79547bfbde727004d9a5dad53157","impliedFormat":99},{"version":"b67193f74fd974e77a7b859aabdcfddd40f99f6cf067ea5b2ef760bbe25d2581","impliedFormat":99},{"version":"f6f80c0a87f07ff38ec9272c39f25d9a9841d5ce6af018e678b816d59bcb8a5b","impliedFormat":99},{"version":"71ff90d9a81864594be1cfc06955282d086824f1c1a9cba8e95fedaafc5c65c6","impliedFormat":99},{"version":"1bc614a8d4cb851c0edd1aeff9827f1a91ae63d90eb1598a96c8cca6e57257d4","impliedFormat":99},{"version":"96df1c692f6440f2c6ea3ca9440f25d7560ea23e9fcf22ee8d138a7f47eca7de","impliedFormat":99},{"version":"76b0dff5168b7cf4ef79b58b45526ad520436317b8560b0f8c533675d71cfacb","impliedFormat":99},{"version":"ab52985427e20c618065d500c5eb647afb8a58972e530ddbba70976a46f215ff","impliedFormat":99},{"version":"95335b76a5448db05c3fe13834b7591844507b2d6ec4d3b5d657d448a06c92b8","impliedFormat":99},{"version":"3045fa53d076765ba73a1a6246b731ac16fb5117b3d8e26d614cd6a76603b99f","impliedFormat":99},{"version":"f5c9079f6561e470c147b327d00ec8e2506b999f841f401e316ee7b8585c5111","impliedFormat":99},{"version":"dae2053dd68caf404f5d497470925b38fa396ef8e7325ede7bede13933cfb3df","impliedFormat":99},{"version":"6a0a9f9e0daba3473844518e3bc9787265d0a4b071530c7ea8f1601df906ddf3","impliedFormat":99},{"version":"0afb884a893ed01d3cf43e38ec5aca8f2e9824fafd35957452d8010e43132e9e","impliedFormat":99},{"version":"62783383203d170ecefff9c4b1c9c4b56fbf396128e8952f63fc989bf1006cec","impliedFormat":99},{"version":"24e7519be7109e557ecc5f3e0740d14f12e552d7e52fbcdd942f0bb425054a21","impliedFormat":99},{"version":"cfe8a79dcc793c48c1ee9a6fa34cd880fb9294dc4867a39cfd5dff6e1368799f","impliedFormat":99},{"version":"2d07e29074493383c14ace5c50f094fb9b8b8eeeb21c68164f234820ac257153","impliedFormat":99},{"version":"a8063c16d824869b013a0b879e782c5720256c950f590691c9e5a37c40bc0071","impliedFormat":99},{"version":"0bdda34cb34357954de7ded0bd32603290d0cedf846292e16eb1e9bec34356ec","impliedFormat":99},{"version":"98b697d29c73aafd6dfb97f349532d22c7d740b5dcfc1140358918fd9bbea83b","impliedFormat":99},{"version":"2a861b9d82915e1abda89c48bb912e5e05d6630729ebd6fb91a6d14b2945ac6c","impliedFormat":99},{"version":"c7e805c079bb1ddf0d04e31e3c30fd34f6de24c3f45ad496a9b50501e63adedf","impliedFormat":99},{"version":"14248b66802310257f5e02d8c8259656b9b9c4db4d7b4cd002361437e55b678f","impliedFormat":99},{"version":"664957cb0013aec7ff6bd1ea24cf4f8048ae02b0df425a49c2d5b334bc9fed16","impliedFormat":99},{"version":"6dfd1d2b48b7c9e83d9b33200529cadc4eb7b2464e2b4e0a55d1e5d55ed016a9","impliedFormat":99},{"version":"37996a818282951acbf64643056c3b9b2e53f18ef4e748632cf1f5a7943f3f61","impliedFormat":99},{"version":"debe5394262f8c7d801cd035f13bee4ea5bd9bb936b8a938f2bdc680738d31d7","impliedFormat":99},{"version":"936d2a4f26b5db084840db14feb6d28748032d2b52383e947a254b68ba27a4ba","impliedFormat":99},{"version":"d8ff7633786bf6d7e7606634d894184aac70973c73400054d87bd29ae939935b","impliedFormat":99},{"version":"be5b4ebd246817fd31d5fb8b37d02d8271d8e315e4623427389db7ce07cebaf6","impliedFormat":99},{"version":"0c2bfa763f40341373e493ad7e5b38b9ee25a10cda239db3154d3d30f1b8f190","impliedFormat":99},{"version":"0bbd1169c50dbc091c959443cb3e912fadd461d978620c859448858e77f1f657","impliedFormat":99},{"version":"c2586e5a3ab8483f51bffed12aaecb0f14145cf1e11557e3fceda32b91c8f675","impliedFormat":99},{"version":"89337c7ac621dbbb7790e32f6af4c6b5a4e063a952f01c31a71dbf413a6f4e56","impliedFormat":99},{"version":"c994fbf9a06b82dcb2a3de6c33b4cf527bb17474a653e63193d43a6748ecc159","impliedFormat":99},{"version":"4402b54679830457d4c680e66b95f43c3769c95adbc57ffd1bc1d4b0ead722b2","impliedFormat":99},{"version":"c1a8d11af1421e31f695b3773978ab6d64302efb4cae541bce18ab9ccc6b9c91","impliedFormat":99},{"version":"7afa405b7a10faebac8d4fc2ed6069635eccec85d0f92bf336e995b371d22061","impliedFormat":99},{"version":"7d50ecb2dd54fdeb92b5cd261a1880d9cddce836286988db48237409212b2276","impliedFormat":99},{"version":"f11d45bfd09a784f66ba732587e29473bc097822409355affa01cde1e38c5171","impliedFormat":99},{"version":"f5ddb0bcf1af8b5c0467d197129c198e5a01eea44701ff5735ea7bd4c5ebf3cd","impliedFormat":99},{"version":"a4afe7fd76d0029c4b6c932cfff73d174007616b24361388f5ac6e2e3a012c5d","impliedFormat":99},{"version":"4ddd27cb10aa0141c28bf9f3dcf8f057e4fc0c8acc905b24bec75467cd67c820","impliedFormat":99},{"version":"edde52e14fa026ec8ea627011ea62a10ece1076c720f494df56c85792c7a5ce9","impliedFormat":99},{"version":"1fc33091d3245a8f60b1045219b7f77edb68c6e4827e341f4b4b3d61053d74d8","impliedFormat":99},{"version":"8d57f23d372a66ad8d9c75ddb4a13b983e085de5cd07293e267ffaa6ffc85393","impliedFormat":99},{"version":"79de175f4f20260f1903a63aad92b28a6941127a132ed2b4354b92d0741fcfbf","impliedFormat":99},{"version":"ff24cca4f6cf4d1e2282bf620f090130bfc8707d842c9d7fbab1b007aec22925","impliedFormat":99},{"version":"13176a9fb44a0d80c0941524edb6427e30e5f0126ff5a15f09c014425355b120","impliedFormat":99},{"version":"99ddfb1f0abdb424cadaee2ae13b530ff60996472ac993629c9821bbed853cb5","impliedFormat":99},{"version":"63261d1fcdecf7d9af63a406d4d0ec71af1fd35dfa2074c9c165b5f5a2a5617d","impliedFormat":99},{"version":"fb9cfe50b6bda1544d76baa6159a9db34fc87826e54e9d39dad13b774e89f191","impliedFormat":99},{"version":"ff68190a14e686b3be430d0c9c49dd2869f9b3a85866fcfc0faab950cef447e4","impliedFormat":99},{"version":"35361c4d2f66b4e829ef071c3aa0a5fe8497204661b438e85aca8948448edd27","impliedFormat":99},{"version":"2c8fb892aa5cd8df0f724b2493cab32b60d0869542ca500cff5645657aa23882","impliedFormat":99},{"version":"65422332277d6f32ea27864e97ef1fea5fac55271163e22b10ff12921382d488","impliedFormat":99},{"version":"9a47f3b1ceaae2cae64417ed5b8454870bc84e8f4086c973ba6297472d4184a4","impliedFormat":99},{"version":"9213ab8eb39c13a1b701d6d5d08b7d402349dd663a3a2ac8ebd171a82cc5a29b","impliedFormat":99},{"version":"0e00c0944efadca638bc6fc5e98836f55c5cdb9c71124541151782aa37b91fad","impliedFormat":99},{"version":"8a8b42f7aa8c12c92f85cdc613581646927d3a499d9fd24786eab3f577b0f9e9","impliedFormat":99},{"version":"389f69470090f421cb50e8bf7c9fbf309b70e7cc12e755435b6009c0a03bb893","impliedFormat":99},{"version":"854492113513da0283fd37cfe10d7e87fd12ac8d6c14a2d6cb02b4c9435ef940","impliedFormat":99},{"version":"2fc8572cdeb393ffdb70965041328ba9d042647e2e2ef29b10f727bbb21f552a","impliedFormat":99},{"version":"6739f27fde982969cc879a5e85daf10b45610d93f936f33fd2070ba102ee8706","impliedFormat":99},{"version":"5493b140b264a64f2228311246390e9b6b8087b40e61edd63e90aefa54935023","impliedFormat":99},{"version":"d96f5ebe89c8bc1e6040af481c571857f0f21e1be60553dd109bb5e17e032e96","impliedFormat":99},{"version":"3216f6dbb5fdb124308f5029d71d0aaec1fedbf4ea89ae1f7837be84d5b67652","impliedFormat":99},{"version":"9ce3b149e03a56bc0bec627b107860023835287fbbbcbe7c8d001d2d90564e05","impliedFormat":99},{"version":"ff245a64aa6d16bd3b9569fceacb0b4f21d3b62db97d46bf693493cf221af0ab","impliedFormat":99},{"version":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881","impliedFormat":99},{"version":"778f5ab91c27f94b4609c3e8214312c88e8fb36398ade9a1b1472eb0fc3d33ca","impliedFormat":99},{"version":"fa27ec9817667e52426640a7249d26183260f00dda24ec693291a5fbac06be47","impliedFormat":99},{"version":"dc90ac95b51c64f1830e554eb186f1de281b5566f440a5615ca2ed3569c3b6b3","impliedFormat":99},{"version":"c55d92be8f828f84f8dbf094d5919ead08513171f923649806b516ea0926d9ac","impliedFormat":99},{"version":"f68f64b50ccf0bc02d82bdebd2e692948c676f9e3c4c42c1061926ba8bd3404e","impliedFormat":99},{"version":"15fbaf5d7b71b74cac1133fd257a14aa2cfaa13ab65fc248cfd60650d9d4d2f8","impliedFormat":99},{"version":"3a0a5e6b675227963402e7b0926d78bf9eef7a7413600fe612972a34381d6f9d","impliedFormat":99},{"version":"760dc817f36d0a42fff11590b477da1738bd357c86fa369c227f76c84e712cc1","impliedFormat":99},{"version":"836726b34175a1216904cb2f8f48067e34d9e9de8feafb0b4e82caa7ad14feb5","impliedFormat":99},{"version":"20fbb51bb7dc0116a83cafc30beda54a7dd56accdb32d83bd1403ac5d77e1059","impliedFormat":99},{"version":"1cd901c95645be05af52c0a334e72ddae1a5f2184fb5efccf4cd86db30e2a22c","impliedFormat":99},{"version":"43975bef96655e244f8974d25988c545ba8d50be179e28e8ae55940f3b00e157","impliedFormat":99},{"version":"ca2169be6c0a5643b0f87c70e6483c98dc250a8124ee6051ebcdd8953c5f0ae3","impliedFormat":99},{"version":"cf745606b4fd1a6f758bdf1f087082a4324b66331a98288d334a2666ca71d823","impliedFormat":99},{"version":"eda98f96dafaafadc78fde77e4a65e1317429f2233faef87774216176d3d4e9d","impliedFormat":99},{"version":"350a1cee935d753aaa393e0b5a21223d4f844c234cf783acfd59427482a13e0b","impliedFormat":99},{"version":"1d096c5bfff2cb86def8d328d36e92b939e8b9214b0106c041a94636e6f4bad1","impliedFormat":99},{"version":"be9a2aa3a735d21d0060adef3b0713605815c94d18a89b98b5f04e91e922970a","impliedFormat":99},{"version":"36a3d77cbed18f6ca3e67cd94a86ec5d6b5fbcc15c8c33a89b7cae9c7dc4e9e2","impliedFormat":99},{"version":"6a3c1d0a42bed283a4d5cdf56963786010dcda8a129ad0424db15cef42096cd6","impliedFormat":99},{"version":"34ef2a31800b07841e4862394c06ec4bfa613890f745104b222129013e1a0bda","impliedFormat":99},{"version":"6165a161a0f4732121a26cc47fdedae1ba99a1c3295eb391401b1bb7640e8d76","impliedFormat":99},{"version":"1d2c94beefeaa0827a9e4178709d66e13c25a3d02623e5ef697120c9651ca95d","impliedFormat":99},{"version":"4f42a1c26b28e05cd3b51a77c5f7052ac3f82083b3bf2110d11ea13549ff389f","impliedFormat":99},{"version":"67b0fb8c6975ac4d1b725e64617e2a64627f22583f6881d1032d847a77cb0eb4","impliedFormat":99},{"version":"e61360cb7af7c2750de50cd6f1252b2e345496ed166ef40dbe4dd4e6a81a8c77","impliedFormat":99},{"version":"4ec2b140bd895593960c83f028098fcad05f10c3c86d2e8902e4a5767fb0ef24","impliedFormat":99},{"version":"043e74132338445ed9135d1dfe12423feaa3ee42fef5f58101cec7221c48b741","impliedFormat":99},{"version":"246c6a168137c2d78c781fba0934a2e1483af8f8bc947cc5fec606ecc489a9bc","impliedFormat":99},{"version":"7a0b07cdbd6f0245e902dba3e40cee580603fdcc7f95add32091edfaf7274c53","impliedFormat":99},{"version":"3db444f4dcbde9abe64dd8315812f5084f8fe6a72053e86ffb5ad7fd9f11c99f","impliedFormat":99},{"version":"16e444dd202179ce27e0add452be2186f7c003effd953be9200b561a66661003","impliedFormat":99},{"version":"327e92662d5f435f83315b68c32e9e0026a2729e6a6ffb4b641016820bf51ee7","impliedFormat":99},{"version":"e2635cd9cfb8814d100011eac9b07840e602a82a38cc3efc38a2a6644781e382","impliedFormat":99},{"version":"dca77bb42ee542a8b69426b62bd2a17b24e20de17001f83cd6899a48f017abc6","impliedFormat":99},{"version":"402099e2f988806157e38e0b0ae4d836e6616c41918035af902a75a79a444d98","impliedFormat":99},{"version":"52961d9f590d89974ba89629deeaad220dcd76be691a6690237e7806e4a4bfd8","impliedFormat":99},{"version":"e584f5dd00a378eb0a050f25f852d732de23114c75937332d8939dab412e143b","impliedFormat":99},{"version":"fa2ab579dd428924681b6c9d47ec6594ddabac5f683046cc34de22b4e3670e24","impliedFormat":99},{"version":"28eab4ebeb0caa01634b608ff7da3acaf51d598c14600e42694946dbe1f3901e","impliedFormat":99},{"version":"672a1f27d2961301c77d3200edddb1c0d2db6509e898f12ef0ccce5f3d03da29","impliedFormat":99},{"version":"2fd5e3160645f00c6424e77452bd751681df96179236e6929da119e5d765c6d1","impliedFormat":99},{"version":"883620b36418b711337562939443697e6737a2d2b83fde82e092dfd35129cdbb","impliedFormat":99},{"version":"a4cbdaa2e29bcc4de381c2e3c415901b05922c49e124c0151bfc9c5b0f3130ce","impliedFormat":99},{"version":"11dcb9419d0ea7e6004ac9c6e00e7d968a2e6658617c829e89cd6b5a1629e3b8","impliedFormat":99},{"version":"afd9d66b17605ceec6bc16eb6d81b22e60314f823747af85cc83512f7b22bc5a","impliedFormat":99},{"version":"179e2e6b5a5a5cb7b30bc5934849da264069a11ac66bf8a4918ac87a80b65301","impliedFormat":99},{"version":"6e0725901a588666b0c1989a53d6c63e7c8c69da54b452d4d9992f0ccfb0f4fc","impliedFormat":99},{"version":"f621dadfeed4284c09952b80d9a0cd9c9c2fe8e740050c674c030149297cb059","impliedFormat":99},{"version":"d9046b49b26924a518586fbeaceee0f3dabda738b631c181ddd73248c7fabd5a","impliedFormat":99},{"version":"a9a9bb9811921ab38a4ec2045ad6346d195a20e34152c9152cd6ca5ba31b3c4d","impliedFormat":99},{"version":"62a458e0bec7b0facdddb228392605373e4deb5a4c21d5a6149626b888d19739","impliedFormat":99},{"version":"4ff7b358002e866a7b888307fa2b506c04fc9062495c18f531254a9bfb372287","impliedFormat":99},{"version":"5d8d08ba489d90585bab71afb3fd41015b88ad85c445d2e54f32d04ed3f64229","impliedFormat":99},{"version":"506a310084396f0915d733cfc2342238ffdfbc55f6e6129b9ba52a059f36e453","impliedFormat":99},{"version":"2112e6baba03d56c4014083961653e1a29b0f2205cfedc6d1b0c907586f49be2","impliedFormat":99},{"version":"bdd2d0cac262749ee33bb9012267568b9948b1c7fc167351835f5292ce2540dd","impliedFormat":99},{"version":"e0230614ab1ab99a6e51da8db16019000e924c24daa1e02ebfb6c35d34eaa3fb","impliedFormat":99},{"version":"3820f844665a425c309475f287513e12436137e3ee198953eb79b0f40d709c3c","impliedFormat":99},{"version":"66712cc2e9e6578e54fb0de32a1983a307aafeb4e4590c4924687e9900ddf83e","impliedFormat":99},{"version":"c05bb6520820179fc1066c577c50e0014d57487cbd1a43b3626284006ce44d9c","impliedFormat":99},{"version":"0014f81fa753561f726992736ab487a1fd98a40a9c17a4c512ec2373f6eeb0bf","impliedFormat":99},{"version":"28ccd8eb5f31277c218a82dc6f674318b0daa12b27ce514655573b22ece12a68","impliedFormat":99},{"version":"d31b266035793c7cc86af65366bcb88d99cee1f8024889ba10125b97a2a9289b","impliedFormat":99},{"version":"36ce971dcc189943d1d9c60354b114576c89566ea103d285de28f1f8995c5031","impliedFormat":99},{"version":"456b84ded409506cb88d692cfc56c3b05c87a7197ef66ce7657fb56b28e6bf01","impliedFormat":99},{"version":"6d3d6392bf3bf8a388fe67783baba31751534ca1c13772855e57e94b0ffde8fb","impliedFormat":99},{"version":"e918cd62e301b270b4045ca7e96f5d4104a4100240e7bf0e3b0c99060193583e","impliedFormat":99},{"version":"abd863ab857e11819114d789c04a99dc227dfddfe278157672e8e8d5ef6ba705","impliedFormat":99},{"version":"da7057b47e14f46d60a499a3a5753922f42bf55de5e7a908e7ae92c29c5e38ea","impliedFormat":99},{"version":"fa5b8f5ba5a5c9c715ac83752b430010151d4b6465b16816db525bdedfa5536b","impliedFormat":99},{"version":"abeae51724ec207a97878b1816285f8b981e8dc89e7adae963e1bbb090c1508d","impliedFormat":99},{"version":"6e2edd479c4d819495d889e80c8dae3a07118eb1f009f664a2c5ed7a7930b189","impliedFormat":99},{"version":"6b7dbca938e7ff1eaee7fd9e397eb5b4a58d9d861f57b479ab334509a50387ac","impliedFormat":99},{"version":"ab4fc8d890b7e8cffdc43bdfd658f482573fd10a6145f52bf02ee8f8700ad99f","impliedFormat":99},{"version":"69f89f71a9dfeb59ec4b3039a486d5b529b9e86dec77257a291f379abb5b9c06","impliedFormat":99},{"version":"8f68552b9f9aeafdd69a1991737c3d0167d1ecad9c6af2114e42d53217c22c8d","impliedFormat":99},{"version":"797c354133dd0dc3e697d1a497dc624cf85d522645c92eb41e54c38955077df1","impliedFormat":99},{"version":"446bfb07abbc26572e524808c650548d1ad60e10ddb3a7c87d1f3581167d4299","impliedFormat":99},{"version":"51c202a86bd6c8401f932bd35bf614383c66aea3a7d1839b1f85a20f69b389c3","impliedFormat":99},{"version":"ee8c3c033dd1faa84337d55fa503c1d243f08cd1d277c1c1425865ad106735e0","impliedFormat":99},{"version":"5162282e72c22517585f587cd5ad4e537916735bde53f001e9991e71cefaf3b3","impliedFormat":99},{"version":"3e57eaf35b59552cd3d44ffcbce83f8f4570e1693e2505df1d025158f259cf31","impliedFormat":99},{"version":"73bf6fdb0aa1f00e260239b5d12586471471f53e8a12f715929705cb74c558ec","impliedFormat":99},{"version":"f338006738eb188fdf2286c4f24c834ff6b70a9fbb2d916b5e3b37a8962ad779","impliedFormat":99},{"version":"84c3bbc5684e3ac9c7a56c577df2c6c7f66e0fdeeb661bcb4ec0b5a3449ffd63","impliedFormat":99},{"version":"0ab4d3d86f461fc020efffc90b4185b6b03d834907eca0410377b7202423c0d1","impliedFormat":99},{"version":"b60454c93e1dd9ccdcd5ebe4dc831cf175f11518162e1e58806adb9a7ed6e8eb","impliedFormat":99},{"version":"e124bfde8e49facf3799a8c028b3c42b6249b54db28d8861c68d273410217568","impliedFormat":99},{"version":"feab90cc68f7210cdbfa1e17ad569b871674ad8b8398b4ff9f8f74283badf015","impliedFormat":99},{"version":"d24557fa5dfce467625546bbceda9b808262ef6153db19f5929a192c76b47b51","impliedFormat":99},{"version":"76d526a783c827f9adf26dbc0a6877f75fc40664f3bc6ad04e167311640e0c7b","impliedFormat":99},{"version":"c945f069c3b91bde46f7e88e23102dddad9829d82513fbeb2b3f0c96586c11cf","impliedFormat":99},{"version":"36e31a658d8eb4c8635d2587f4d508af37cf32132164bdd09f2febf47edc8ea7","impliedFormat":99},{"version":"30ea29e467caac085620f63603b1901044751c26e1d7d8e4009c802d0acdb7eb","impliedFormat":99},{"version":"d667b78a0eecefb5661fe975a3546635dc9116ab4e08797ea2b9df4a686db734","impliedFormat":99},{"version":"80419dc0a127b42f13ff9b49808f98ffd654f852067cdf6aa526726ec3f0c4fe","impliedFormat":99},{"version":"acef092fb42f913158b5690e624e92a11a56b761424575ba485ecb6074d51ee2","impliedFormat":99},{"version":"990f9d9a59e814e4b832d8386e1ea622436710213e30171577a14ad9e1b1b109","impliedFormat":99},{"version":"a2d3396522b00eacedb56efa94954e91cebc356234bd5d18dbaa18c56f31a928","impliedFormat":99},{"version":"87e3b37530fb1850f1c1a6322eaea467482dfd02f95ffdcaacf05c8fa8b1ec6b","impliedFormat":99},{"version":"a73967de475c2fe67788ac5e66ac3f573ee1b17771f74b2d0079255df39c7a5b","impliedFormat":99},{"version":"2095ad54faa54acfba1d89aa215785107c3b1f7a68cccd1df8c07bc4f231c019","impliedFormat":99},{"version":"d86710916c3e640f71ec1292e23227db39065ef48d31e05a80673f06a737b3c6","impliedFormat":99},{"version":"6420ef2bf04851a73c59b4c794ecc172ea3e9fb531750b9e3bd382698bea8ce4","impliedFormat":99},{"version":"c73112dc06934e992816183ea3ede150527600244fd6fc6c9dde38dcf09affcf","impliedFormat":99},{"version":"99a1d74a489181ea8c834838f1849e64a573f10b36c1c2515fca18eb5e879e90","impliedFormat":99},{"version":"009672ebb768d8c68929ee5de93c84efbc3d1b185ea1bbd6c531eb04fd300094","impliedFormat":99},{"version":"49e100aafb5e2984cf06b03564f6333031272d3831cb48e19983ae615f1f63de","impliedFormat":99},{"version":"46acf2306feb9aeb4633448f1b2850a27f174e21de9d464bc003d8fb453a97cc","impliedFormat":99},{"version":"80393caa0eb155e3454a9116cebb5ddb553474cc569757ce15909b439eb60115","impliedFormat":99},{"version":"311d4c18239c7aa665770dbe09198e2a7b1619243c8b6f6a4b7ff9d8aa944088","impliedFormat":99},{"version":"9d926ff3f1fa7433d0e7667289572adf1ed8fddc582a2f27907eb5e230527209","impliedFormat":99},{"version":"a20e13436a8ab6c0a790cda442acf36be4eb6659520211ebc1368742221f7486","impliedFormat":99},{"version":"717b8c7e65fbceb7ba534fbf60431a393da7479910f14595f229e9f58f20c128","impliedFormat":99},{"version":"0de1f751df15a611d865a9cfe645a90ad0113ebe3313dec9b57b9c379f15ab1c","impliedFormat":99},{"version":"1c67e3ed234cd6f07a5df4b8a00399230d5b3a5ffc4bacd2b419266c2c15e14c","impliedFormat":99},{"version":"faecb757c4698aa28f663188e11b6e2118fc79157e7c328af537cd90ce1c76e7","impliedFormat":99},{"version":"abc90501df7a1c904413fb1059cda668ed55595d3366de8c7317dee8975efc00","impliedFormat":99},{"version":"2b867ed04aef7ed0a4e9300bf2938d616e6a5243b92b93c657240a268f7948c4","impliedFormat":99},{"version":"167d524c23a6591f4e486573556ec0c8bce909554ab16f0fd00562a6e177e666","impliedFormat":99},{"version":"e1368408e5ab0ecd3310f68cd02e0673404d871001063be6389bcc933ddd5510","impliedFormat":99},{"version":"0593991a145593691a6dc7c04160121b0d84373088ad0fcee176ce90d3d7a7c6","impliedFormat":99},{"version":"cd1d90597edac77b5173087399d587c922635dad738da6999ff480451c1f1316","impliedFormat":99},{"version":"2a4cd4790883f47884e5228f480efaedea1ab3806a75a6437e35f511b3e4e622","impliedFormat":99},{"version":"cbb94318a36311f45c5199ae2a2ce4c74237c95db420d4d926508b394896d27d","impliedFormat":99},{"version":"cfe49326b4e7d383fe8f096d6c9eeb46bcc689422fa80471e980b78d536f5d4f","impliedFormat":99},{"version":"7a844f7711b023578f4659c81a24a294292ddc058c44e249334212a88c447e8d","impliedFormat":99},{"version":"d37c4a44e8c9ff8f530671e8ba511ee4cf75068a785500afcf0e0202c2f1b2e5","impliedFormat":99},{"version":"ec7dd63b00ee7b620c8538e21848cc3ecd05971c88daa3b28c0860fcbef37cf5","impliedFormat":99},{"version":"a196111dfb9553441717755010478ce153d2b6cf93092afc843d135a9e8ebe86","impliedFormat":99},{"version":"c4b4493510f1d4e9ae2f54e5f37c24fd5d66d0923939f43527128c043ba2953d","impliedFormat":99},{"version":"819760cc7db80afcba7f85da58fb4eb14eeb73675ca462dbc854770fa2d2815b","impliedFormat":99},{"version":"9a9a7c31fd01cc0575fa25d50e1d60da674e49aeeed369340e4a43266168a668","impliedFormat":99},{"version":"4040935013297b57db79385f8f3551d53fb1f532f0dfa336f79fe73f4eae04fe","impliedFormat":99},{"version":"1e7d7a9a5b2358041e2c6f858a10e5e9dea45e84a56ba2c0974077757ce4d2d8","impliedFormat":99},{"version":"fda03cf6c00b393c39e447862b8ba9fef8487810bf5ea7262995aa13663b6e2f","impliedFormat":99},{"version":"cfc6dabe58ff3a8679e29d0e8ce1cc528aedb039308abde99251de078b3238d0","impliedFormat":99},{"version":"db5f76cd70cd1acc3f037d508f146ccc708532638b767aa224c16b3ee564872d","impliedFormat":99},{"version":"137e112866b65d4fa7740c7af7d4d2a33d2ecfb3d96af4a4478741e59434e019","impliedFormat":99},{"version":"f02062934dd759651c4fb3043e48b9c51c5499079c626341955ba04c03e86fd8","impliedFormat":99},{"version":"ef02d18d4aee91e97bb3f09080c015bccbe81bf522ac3c7b2e2c7f222570c6d8","impliedFormat":99},{"version":"d9577435ed34d653d48948d8aece435504b46020a4b4f6f37362502d0b82923c","impliedFormat":99},{"version":"482f16164267b0f2dcded917a3e8c760facc18a8aee93ab4c8db277e24aedfa7","impliedFormat":99},{"version":"f41a8e323b5ca9bca4b243fd3515a153fecf5a1fdfb1ad630b378fc2cfe074c5","impliedFormat":99},{"version":"30c897859abe3b03870847aa69e6f94eeb32a9c1f5779957587947660fcdabd6","impliedFormat":99},{"version":"4d393c9320fc06f8b404e7982fe2288c203be731da0f1911c70c9e31649a11d8","impliedFormat":99},{"version":"08abee41f104de663f84f9bfa98874b81314f0a0e700553352a16bfc7a8d0dab","impliedFormat":99},{"version":"88d2342249aa8349f0253fb3307a1e05eeaa9bc71106f0bebadfaff76ac73670","impliedFormat":99},{"version":"58794f5019f44137b70e4bf89e12911011a75cd294b24e4233342c18a493d9f2","impliedFormat":99},{"version":"a27a472a165cac28e4424d94c44aa023c52de5230f7db5159177f79383e13bc1","impliedFormat":99},{"version":"a517f8e551c58606bb6355e46dad3ee0059892e0d7a0010c762cffa63d5a0b40","impliedFormat":99},{"version":"baed95dc7829bbe673da606327057a23fadd03c7002540bce68a17fb476c8470","impliedFormat":99},{"version":"fa88216cb907ebed2b54b371cc4e0bed7c2ffd1f6153521925f827ca2e1d3966","impliedFormat":99},{"version":"4b94aca741d99faccc681cbca873127fb41a9dd768b502c4f8ed9c2ada78b26c","impliedFormat":99},{"version":"cace2a02e3d7212e847742972311f3fe152e4832bd42fe61ae083c3ec4021944","impliedFormat":99},{"version":"37eb91660c9a80fb721d41b8b139e1e3d244a2dd844a033f488d38bfb6ff354b","impliedFormat":99},{"version":"3ab59d661e7a31e95d8a5e061a1aa1f3e3c54bd32b2e0a7ebf24bed0013294a2","impliedFormat":99},{"version":"fd369f36a4ff7281401e440c65f648ba6738586579fff6185a07fed4018d8d1b","impliedFormat":99},{"version":"d3c7c72da80da9152f1d0a337a4d2a91497e6c0c9c49a7e3e01572c70aa440b6","impliedFormat":99},{"version":"63411e1da13f28cfe230fc2bc7f11fd5db71af8c7beb101fa4f2c4ad0bd54f8f","impliedFormat":99},{"version":"dcc390f6690437e874bc53640815938dbc46246123087a515b7d3906559d89cf","impliedFormat":99},{"version":"bbcbb2f860c0eae33c834dd09e34bfa9fee231c095f5ad5018ba6105211021ec","impliedFormat":99},{"version":"3e4970d44c5b8f5e0f9d87210d276018ae3d0fb38e0d72c3912da0f3f3ec9e6c","impliedFormat":99},{"version":"b947feb67a8ec967ba176fac5a27739ae11347f1ff9efd99b0e438e8deb2e429","impliedFormat":99},{"version":"6f24ced83df6fb50ddde931402a00b3cce31fa32ac5b3abe1cab66b39738e4e4","impliedFormat":99},{"version":"44f4a3912dde542ad919b0c0bde6cbb380a120795d48f12f6c79b0c24c12eb6b","impliedFormat":99},{"version":"9c5ca21c0f8d7c611d8836e81c532009f67ce8ed17d0e62ca26a0f9d12d3356e","impliedFormat":99},{"version":"5057d5321d53c9286f281099c67e2402edffed48361909f9ee8cd926d7ee7aec","impliedFormat":99},{"version":"c8382033bf711172f15e4ff1304308f83547c954a53b4f40b64a4e1eb16a18dd","impliedFormat":99},{"version":"6ee02850739ef76e45294f561b10c0bda69ee7ed756cdcf92b4178d0417ef310","impliedFormat":99},{"version":"5fa1e193973d9756a6c6542e8e85b0a2f8f8bdb29604b6d0a37c5a4ba0180abc","impliedFormat":99},{"version":"af6be738e394c3d2e7362e204c5c4966ff49dd4523752242041c7f2ba1f92e56","impliedFormat":99},{"version":"d423822ed5c5f1f473866c14c6c07017a9ead57fedb1aaaeb3cdc169b843e095","impliedFormat":99},{"version":"abf272d8919f002e1f568ea1a93550b6f14d7a06115d19a5e179c9b22bfc7878","impliedFormat":99},{"version":"1054d7f277df08d4728eec5db0247937013ecb937310d649a6934c4ec601a962","impliedFormat":99},{"version":"b3f2e83eab2b77a69c30330067343aa6b5329a84874359473b5a7619e6425f4c","impliedFormat":99},{"version":"c91ca6dc70aebc04c02d234ba86d2f998c521ead6dc0b80f6b820d58707ce5d6","impliedFormat":99},{"version":"e87cd62a547ddfc101fe6aa00c4643cda0f67b9b3ba13f67cb42801c406796f5","impliedFormat":99},{"version":"f22adfde5271a0e26633d1c4b8648111a121e8641fa97ed55dbafba3dca6ade1","impliedFormat":99},{"version":"5195d18d4a8612170b078f027291d2f8e62b54baeb135263beb8535240aed4bf","impliedFormat":99},{"version":"174c79aa3677c7bfd8f1f2ea08c9d13f2c8977a1487c52fd33b58ff2bfb5f2b6","impliedFormat":99},{"version":"d99fff872d60fb33f0e55f62e911644d868b95bc95fb48f0b1a391907e795964","impliedFormat":99},{"version":"a723391e56f3efb1e2cf1b7e1b248e0b066fce22112ec7f8c96375604f902b3b","impliedFormat":99},{"version":"0a5f9e0edf61150303ed3ebd400050885733638e846b8a23a5a62b49945fe888","impliedFormat":99},{"version":"ed09134d53a5271a870eec90a453fe9b7b054919c57c7331c132f4553c1f4409","impliedFormat":99},{"version":"7c1c042d63c2bf1091f6e87694d99afda27aa75fa524f25280c5670f17b21669","impliedFormat":99},{"version":"0cc24317a692cb646e48ffb24317256dae35566a6b9c8e5b34608aab858e4a51","impliedFormat":99},{"version":"a19b1967ea1305ec882930b81793fcf14b53150ca7e409449cd2084c5b37146c","impliedFormat":99},{"version":"3c37207ef812147689e616af93094e890d5f56d6eb408f250d79c4e23d44b3d0","impliedFormat":99},{"version":"cc36f96d0198eb1ddca690f6242df481b7fb626022e04c0da262df455075c943","impliedFormat":99},{"version":"112dd68d3ce3633c1e3d3e152f18c12f641297987c1d694f1f75bda904e7cdce","impliedFormat":99},{"version":"08955a210c63ab8cd7e27028403a54760dcf9010b401946664627acc8d14cd4c","impliedFormat":1},{"version":"0baf3b364a794c5d00e97fdfa6da7298ce3533cbf4c7b0b3d831f85936d75aef","impliedFormat":1},{"version":"6c9bb2e6a6bbd1f2a97d23ffa80f9b583f6883a92e670e6f02ebe20234e2509a","impliedFormat":1},{"version":"0a93a88c97b04ae8f7e5260b18b369241ab292032d7622afa7a914cc07eba3ee","impliedFormat":1},{"version":"09b369e0621728733772ab1277891812cbfc71f0a0e520c21b55c3bdf4e94464","impliedFormat":1},{"version":"d0c3475089ca6e0e4db3b6f2f07e613c6ce44fe48dac112c8b4e13953a8b13ba","impliedFormat":1},{"version":"161e73719adcf55a378341b87611b146ff76b96c53c228ad0c9e48c876bcbf40","impliedFormat":1},{"version":"024d77dfe9faa588e031051d5cc667bdc77ff521f84ee0d39186140fa1704149","impliedFormat":1},{"version":"c95f7fc243bd30b30ce21fa0712a198f5d24c86d5fbdb43dc6563942141b67a0","impliedFormat":1},{"version":"b17a560a212278c7637d389caeddea89a382e03abfe62606be49a1baedaf8dfc","impliedFormat":1},{"version":"fabf8c56ae89c20931cdb1b73ce6f616d0278dd6cfc307989f1da0dfb8f55825","impliedFormat":1},{"version":"0d0e527597ed839aa40470e76d74986bc7efa845b0d518c1f16efc2bb05b11cc","impliedFormat":1},{"version":"a2d9d943eef68669e7718cd1de4f27dd25415265518dd5da5402666119a75a88","impliedFormat":1},{"version":"e3bd4f7fca64f279413d04eb09ac103b5f2881f6c57588d81413a217ffc9398b","impliedFormat":1},{"version":"446f332f928d0dce38a3fdbcadca1736bd0cd803cfd922c91c230d9f0015914c","impliedFormat":1},{"version":"a7f33b03586f5c94752d25c5d21487eb5561cd420bc983bc9f697bbdbef57509","impliedFormat":1},{"version":"08a80c8e6621da115605805b13ed0ffd38fb93f9ac4e38f10263c21deda53e2c","impliedFormat":1},{"version":"9f52a7a1692f4728eed184232c433e2d02873c395a45166c81b143c41a091000","impliedFormat":1},{"version":"4f827fe2ab5958e2196213d5f4503391ca2d57e4f3a4d5193821abb83eaf6f6f","impliedFormat":1},{"version":"57366c8ef1c5f0ece5bbd3378cce12f69f082c10433908b7fb467d3b2b923d6a","impliedFormat":1},{"version":"511401f94123d90d1b40b0e4bb43e4cc4fcf30ae639c77f77de89e56b51bde6b","impliedFormat":1},{"version":"f1dfe31d916ca12605fa8321c4b0017343da60a44c38f77e0a085aec3fff6596","impliedFormat":1},{"version":"f37c80beefc29b419d2c629d70f59d07de44633b29bbb83e4268766767c8743a","impliedFormat":1},{"version":"7cd98b229fc1468f5db89d2ddc984bebe04e4e913b2f1abe2e69897b422a04ef","impliedFormat":1},{"version":"6613ed5787bdeed3011f1269e777ef42ff14ea8cc4cd60289488f69116c57a17","impliedFormat":1},{"version":"312b897b37ef2fc79c0634417f46bba8fa051f68be5764d0ac84320489ad997c","impliedFormat":1},{"version":"2d04c96dd0c33b806a21d604e91a8f666072d8e2dd7fdbbce497c687be6f3448","impliedFormat":1},{"version":"b803e9235eeb9a25ff002cf0d5054d6753fae8604f192e91c67e2ae5ccf687b0","impliedFormat":1},{"version":"b4a5148ced5c12fbfe664336227432e7b01ee01f3796cd618b43048e359e238b","impliedFormat":1},{"version":"7e69a587e3a0d23523c637ca5849e01fdd7fbfd4c932a333c111dcf8125338b0","impliedFormat":1},{"version":"c53024fb4333f518e8273211f6bde7a7886f76679a3209bfbb74c655c5b5ebb2","impliedFormat":1},{"version":"8711e8a21637875da5e2281f048faaa9d3fd85ef52e2b5718693ae7e1dc7d4d5","impliedFormat":1},{"version":"7e72c7e8c38f4b575f0590e515397ae3307f7a30b6e5e71f4ed6d06318ea95fd","impliedFormat":1},{"version":"4db40784f0bf20449f1e5c138f52dc7354b753925a43e05067ec7968333b6ba2","impliedFormat":99},{"version":"436be2ec86536e5e018974d5032fc276388894992d84fc1b7fd8b36704c415e2","impliedFormat":99},{"version":"71066bdb4fec5e0e888dc7daf0c36dc1be4ba9341bab6c48a04c7eb0e8591f12","impliedFormat":99},{"version":"4a8ba1a6bef93ca75d636009fb23207d69187a749bbe647ad7de26c99cce86b7","impliedFormat":99},{"version":"3e952aa05e4491df5b44e5fa2d62090a454a1146cbca6b771b314faf8ab8222a","impliedFormat":99},{"version":"20b75b4435ecd279da442bd7d4950cb576bbb0f834b07e31a97951e500721f92","impliedFormat":99},{"version":"9cbd02fd3b6f4e3fe36d6d03e869dfcf830ed8371c7ff7c7f77c0fe98c26467e","impliedFormat":99},{"version":"be851d47bbd72a1757a110d690e2d97507866035f9f0e03eb4be20782ea4bdcb","impliedFormat":99},{"version":"44f7f28d189f193f3f8b0baa97a6ce501f2cf48aedde410646f89d782791d0db","impliedFormat":99},{"version":"8b8284059d0b2d935c4619648d652083daf4bb73346b08d283ae1d20eb593ffe","impliedFormat":99},{"version":"5f2201679e4a2b8d1cbf2f689800805862725145fa86bf076cfc289813fa2608","impliedFormat":99},{"version":"492c847d085f46da923296bfd2ee23749e235b7b1d269c850e7f3bf5b3241958","impliedFormat":99},{"version":"c0015ebdf6916a8f030ca9b46b0b62dcbd9db172ea7cc80bf6435326cffe6377","impliedFormat":99},{"version":"0c858bd22df096c90fe036ae8fc7fb9516aa9da80e72f357b077a75947411c92","impliedFormat":99},{"version":"6744b9c1625dc91156321d4918dbdaa62f0e663e51fb13e5cfd056095dae7996","impliedFormat":99},{"version":"9fbf9db51d6b0894a4aac2514530a8b772240cb23fe1e757579a0bd7c7f96e5f","impliedFormat":99},{"version":"8ad123549d71f1db2a52f0833337b75a13cc277bb9d5f9e3f3c5e179084cfe68","impliedFormat":99},{"version":"3b3c1b30742702585bfee81c7b41d3901b4d80bcced9b10e8c0a332c0deb4271","impliedFormat":99},{"version":"846410c05e11a8bdf955aa82ca6587b8b8a10de990f293e722b4332f58dfb1fb","impliedFormat":99},{"version":"c01116edf0181d48f085c1ad81dd1cac2c6ec6605c897804096c029b110b9b0e","impliedFormat":99},{"version":"b7c5a407c2ceea7271617fb28e5827e1fd9ccfac02d0aacb84e2a82e6a6d292f","impliedFormat":99},{"version":"fc9fbafaf70c52fb9ec67e7a4e3e2d3aa9cf81e3543e18e059eedda330db7cac","impliedFormat":99},{"version":"677b6f54cd8ee95cf7adc22f28556453b36eb5a117324ed1edc55b649baae528","impliedFormat":99},{"version":"c520bc4aa15933d5fe36a49eabdff2247f53ba5cdd881664ec91f6db97e5bf0c","impliedFormat":99},{"version":"5206239f833daca41f621b7f2a455e25973dc6a52753c663ead3614f67f614c3","impliedFormat":99},{"version":"583428e81683308ef47d940358e9cff9092f12d88a47e8cf0bbeea883015dc0c","impliedFormat":99},{"version":"f4cd484b3dffd993f4e20e9f3a50d44871a4bc3b2fe22bf08e78068d013dca17","impliedFormat":99},{"version":"12845476367b2bcd144b4c7be68f1e33a2e9a8722280758f74bef4b9db83a369","impliedFormat":99},{"version":"707ce6c88d3d8abb853c27d2e469354b45793bc558a6a6ea69bb0d6f0fe522e9","impliedFormat":99},{"version":"2bce045ec10c7f67a0c6f74cb6ea12d8c3d3ab484acf892b8502d31769e29aed","impliedFormat":99},{"version":"8871b177f914fea24a43d637b70c3dfb694272e97d592152b52d7aefe5c416fb","impliedFormat":99},{"version":"ed8f80a5a90c1968f181e2af7cbe8f17d42b4a6014a04bb4ca5fd53e0bda4bc2","impliedFormat":99},{"version":"5953b0d438addd51e61c0e1aec3c2bddcb42b01a95e716287e2f8db9d33134af","impliedFormat":99},{"version":"e9ea8fd776deea99ebfe55cca42c4b6efc363cefb6b0a3f3964f097c16511875","impliedFormat":99},{"version":"5b98784b1220df892cbc2688d1584f735833f7e679459319b2d2f5f682fb5177","impliedFormat":99},{"version":"0c437acc2f2fced6905b295488d4e91aeebc81008fd3a556d25e797e6d363097","impliedFormat":99},{"version":"4c94fc69ff3a14b1edf654c1e46880f1cbeabd3cf61091f9000918f6e325df55","impliedFormat":99},{"version":"66512676dd2939dbfd61b046507c7a3c4db4a7216c1f3a9acd7be40d2430b1c1","impliedFormat":99},{"version":"1f6f29f6a78b6e862defd0c06b18751de9b5804e9e4c4601fc54500bc79b3e6f","impliedFormat":99},{"version":"083bce0cfe9b70f02f1c72e84bec9efc90b0cb500c3b76c1fa4d9072940dc2b2","impliedFormat":99},{"version":"4e15d586c09c839c66d2adb52ddbc15550790f79bf1c0d263b15964253f1e811","impliedFormat":99},{"version":"e21c7eab911bb76dca8fa039800524d6a2d9fe7bce705bf6c7a2b5339cdebd04","impliedFormat":99},{"version":"9817529e486af53b048dc7edb1e7b1bd8006b23bfcddedc013890bba8d6bc9af","impliedFormat":99},{"version":"e3a1f7e47b7b5ff1c52fed5caf4f8488bffa3d91c68242ae4b6a9522ea58e2c6","impliedFormat":99},{"version":"4efb6021ca2af0c19411f5860525c9cdd3307a5b009c1dafd7e531f8899b365e","impliedFormat":99},{"version":"b49ba165ba75f3b39b3fd27388309354680bcd1277744579a0b5524f79bea1b8","impliedFormat":99},{"version":"80df827dd44075d98b0c545dfc0af24e8b21484606a28b4bdea5bb8c95fe6e8e","impliedFormat":99},{"version":"1c84cb678fe4655e364f10c1a3ff6ea8d565eebd8f79428695095abb5295f15b","impliedFormat":99},{"version":"69e67d0bae3ca670463f374f08a58d4710cd89916541bd1048a20b5996f3564d","impliedFormat":99},{"version":"b2acca8c9c3036796244bce0556febc2e96a1531d55e09670c8ccd1d91235d84","impliedFormat":99},{"version":"768fad513157c620436675a012d63646b9bfcd7fbb3bf489de32e515800166aa","impliedFormat":99},{"version":"28d6bf244d9e2c16ff04387de94eb4dc7c55f674432b8f1cae68c9e987b09b34","impliedFormat":99},{"version":"fec7bcc55e7050cdafd2d88d2aba39b3edb83ee03999048d2a6b3f6be6ad0cfe","impliedFormat":99},{"version":"faeaf46820cb68637fbf87f194b6da819092618d8de55c8cc31298fb2e47e7a5","impliedFormat":99},{"version":"ef33c7166ac5c966d9439408a99aa476e32f3703f8d218a60092e5320e608ba3","impliedFormat":99},{"version":"2836ba166d354b24e919826669edc055599d9a5506d1802227eab7289781c313","impliedFormat":99},{"version":"bd9eeae92dc74a2597e9908a737dd3780f319d63e3c916062aa136901adc9dc2","impliedFormat":99},{"version":"0cf0a78d50f7f325b4e89d8367e6627dd5f7ba6b27fb8008670a573c8d71c136","impliedFormat":99},{"version":"25b1333cb2729ca86e7ba17d38a38bb88a5530d8f5d558d7cfc5cfe26ef5f27c","impliedFormat":99},{"version":"36cc02cffb0f8229032cb81ce4518649d25757b227c7bf1b9a042d586144fe1a","impliedFormat":99},{"version":"e8afbaa162ef9400d3fc995b9b4d9f8fbfd067b6ae092b518215e9bea04ddca6","impliedFormat":99},{"version":"483f012e8e976c73416d18ad42263806743dab3a2b319851f5e121424bbba0d6","impliedFormat":99},{"version":"30229374ebf3f12a6da05aec84c8c4131b25fed631e0532a62bd12aeb035d986","impliedFormat":99},{"version":"9462ab2785b6c287c9a4fe0681212ead12014906779009d1c9dc9975a027c0f1","impliedFormat":99},{"version":"7f08b09ea3e0654f8453ab75074b26b38cd583c125c36a194650659cf7f54315","impliedFormat":99},{"version":"9fbeea2d7745a250087335b4478a9bf383d0353438c85b19ecfdda9ce63961b8","impliedFormat":99},{"version":"3f74e11ac146a733602360ae186e8fe09f8b61f8bc7707b28743e43e15b6d5b1","impliedFormat":99},{"version":"61b147809c3ee0bc5bf32d5e582765737d05f1ade743e6a70a6e241295b293f0","impliedFormat":99},{"version":"f1a9c6d496d88257dd07b8a8473ce863a5000f7c49184895b50fcf354cca8d29","impliedFormat":99},{"version":"94292440b077b6085438bc792eddb529f61f12e8167fe1f7bed1c1eae6d1cc2b","impliedFormat":99},{"version":"edfe70c4a5cfec2829f38351694e18481f4cad45581477f28eac88a8ec57118c","impliedFormat":99},{"version":"90b65f5c4c732ceb6797e79c2c402bfc45c7b36a91c34a65db79f51f149dbe57","impliedFormat":99},{"version":"ebe4367bf267618d9b5be6bbb253aa38961324670e2fa6038b262de5a77c6d05","impliedFormat":99},{"version":"b5f46005f252b789fa135d2d8877ad7dedae7ead56ac67cd31873e7d6bee48f0","impliedFormat":99},{"version":"0703145d94844f2bb664a879a321d9ba60a6c2e29a83c340fd26aacaa743765d","impliedFormat":99},{"version":"fdee18d82a230af891ec5c1a86f44bb7718291fc9f669f4acdc70cda38431018","impliedFormat":99},{"version":"2f3aec073568a7579052142ba189cda16658d340c72c5ac48f680fa5a04387d3","impliedFormat":99},{"version":"21c10f74f42436a23024d27ee53132a607b3c88d1816e5936a0a227b9fa355c4","impliedFormat":99},{"version":"9ecbecaee5ae46a59e42346d1c7683c2409bb4dcb4042f693ccb901a8b2e40f8","impliedFormat":99},{"version":"952301f0f1df3d554e8ba53b2fdfa6d992c7896b1d4dd8d7bf780d8a2a308885","impliedFormat":99},{"version":"846f8b384c546f0b54b871cb583042b59d426991c53f494f683915d0d64db100","impliedFormat":99},{"version":"6818a9c2e1c89ac94e1b57dbc8ebe20a6429197ea780cb71f24334563255ac01","impliedFormat":99},{"version":"8f0ac2302686889df2a9a4f349b08c66ce697be204c8c7bfdeda4592fa654f02","impliedFormat":99},{"version":"5568ea1fc8513215dad7405c609268fc15049c3887b793b3c8469f73c2021b9c","impliedFormat":99},{"version":"2aacd5e272a640c5a1643dffd7cd7e54391fce726bc13cf92f62ad1d131bc1f6","impliedFormat":99},{"version":"d87d5bd7846ec2fb15a3b95aa5cad8121c39090b51431d68af4a6b729055f8bd","impliedFormat":99},{"version":"192ff4e590834f4846990213e8f5f0e5e64c75c8c341caa629a871e7e19b9a68","impliedFormat":99},{"version":"0f787c482d9bd7d12c4be5981c1a13dc049a74eadcf01a41c49b5b31ebbf59ed","impliedFormat":99},{"version":"24a8632aecf807033873d72496ad442cb1a59e185c9e5c6b13d2ccc44fc9639e","impliedFormat":99},{"version":"d9aba34b8b3d18f3bb56ef277cfdccfad45c7f38b167fcf1f3edf68e488cb62f","impliedFormat":99},{"version":"6ede247cbe081d52465308e7f1dd308279cebbe47796ca2de185e496469ae7d1","impliedFormat":99},{"version":"cced49bff20b4edac596078ef3bf78fb2cdd106d7af70add993bd1a7c18ea635","impliedFormat":99},{"version":"e604c86597e4acf90401205c6c94ea2330214c63c769b9a03989eca95d7c0624","impliedFormat":99},{"version":"6e0e857e04c016882aa09a90d3501025c08a749f4b1cf5a01424e02deea89a99","impliedFormat":99},{"version":"aecc58895500b05cbf64df53bd5cc3f3784316522df375aec6962ac104417860","impliedFormat":99},{"version":"76b738329290a2b3f668c6e00eec520d196e6875adcd0c5124822a9a781be3fe","impliedFormat":99},{"version":"4721a52b7457e38e0ec5a4eebd7211cb45e50471b41f734a80f74e5bdd1b1512","impliedFormat":99},{"version":"06271261da7ac9f20753bb0b16bcf668b5b531402a860cb4ce22acc615faa12a","impliedFormat":99},{"version":"9b44c8f553ae51d0c2fc5e27860cf6c073213e8084108cda9c3c75c1c748b2ce","impliedFormat":99},{"version":"5a14f152e785d48fe88c3e135162b78791a5f576982ef53ee7031db377d0f496","impliedFormat":99},{"version":"f9584ba6179e708d0f7a99c839991f53c529342f466521392401c8f3942e2e8a","impliedFormat":99},{"version":"003ef0e8b4bed78a606ca54401f158b8411f4a833c63214d30a1e8736c50f8f9","impliedFormat":99},{"version":"05c398f2db0b0655a3ee36d5b117062a0f05f57012b9819641f055376f51878f","impliedFormat":99},{"version":"ba23536ad88533a39d312794ae02577d90184dc994c5273f6375cfe306de8f55","impliedFormat":99},{"version":"e586edcd263082edf0edf11ca1ad5f95c78fa93215e2ce3a55c73ee05e390964","impliedFormat":99},{"version":"05b2c81c2415eeff9108791136f327b4a47a45a8802a7a6f4eaac1e44043271e","impliedFormat":99},{"version":"b347bec65591b669902a6c294093db763975fa64298d646e843b6633c1c0c5f2","impliedFormat":99},{"version":"d848a1ccc5100cc8433581ab1968c45418787557b20f3bad315e2a7c1482af7a","impliedFormat":99},{"version":"aa53cd123895e45990059b2005be38669475245979b00e1ae4afb4b341bb1e5b","impliedFormat":99},{"version":"40b6da4aec64d38fdcb07e1f48b8f74c3f3ca833c801b00090e21ba80e1179bf","impliedFormat":99},{"version":"d1d5a67459d9a8756c9bc7a6a84bf9bcc0f5c3d4d03146844ff00591f5220439","impliedFormat":99},{"version":"aefdd6818d54254664958ed59174e83e47ca653c0ed158513346d0403916c4d5","impliedFormat":99},{"version":"aaf2cfc751c59f38e957c46caa157508e8c78816cbaac95d78e4eb8f5e898221","impliedFormat":99},{"version":"4d176f9fe436a361f0920b55f527a7189f8a2c5a6001ca5821a6dc517ab1c468","impliedFormat":99},{"version":"91fbe8a023c7edbff6262f7b30efcfea18e74931d28939c42f829bcf7882213b","impliedFormat":99},{"version":"ca7d62c56fce54fb0c88e48d93b810cd3e8d86f178ca0f1135d0fcd44efbce5b","impliedFormat":99},{"version":"19a65ab8b82d5b2989ac08b6a85b5263eaa27cafa82e86b09ee268146b6d01e9","impliedFormat":99},{"version":"5e4fdab4c67ba08c2b256058c4aa8132c5c85b740546e313b188613d6b712e88","impliedFormat":99},{"version":"5250383840b2abf4d75331da2a943c112c845313bd4f14612415638cd19e3321","impliedFormat":99},{"version":"4c6ec2a59eb5bdc9a77918deaf8fb4e7dc537900bfb5c3c196d5755b1e30ca23","impliedFormat":99},{"version":"e625955d1d8e5cac2ef32f662a7500ea189bf7b5ac7ba27cea6f9fb39e765d15","impliedFormat":99},{"version":"ed5941ea6162682dfd6a60223143a856c0a0a91b1d772207819b5691bb02df7d","impliedFormat":99},{"version":"1b630b64b52b942c29a957a7b0db47530d7244f3085d10181e21de79f06ddf64","impliedFormat":99},{"version":"94b51d44c67ec635d5c2c3ddc5fd025df607b18ec3c4447a6c67c5f92aac0309","impliedFormat":99},"f9dc02bb95725205bbdb4c22c505642a517bb663f0172f64a2895adef54d234d","2178b96a6ab12a9089ec2f885088a65e4de602d1fa196fc488a8e705d9a4a141","cd03d324b9cfd7dafee3967734b670013f2a2278f1030be809bbed26a332ae15","faa9efdd87eae8faeb9b8dcd8f652cc6894e90dba0bc5af815cb212e31651926",{"version":"68219da40672405b0632a0a544d1319b5bfe3fa0401f1283d4c9854b0cc114ce","impliedFormat":99},{"version":"ee40ce45ec7c5888f0c1042abc595649d08f51e509af2c78c77403f1db75482a","impliedFormat":99},{"version":"7841bca23a8296afd82fd036fc8d3b1fed3c1e0c82ee614254693ccd47e916fc","impliedFormat":99},{"version":"b09c433ed46538d0dc7e40f49a9bf532712221219761a0f389e60349c59b3932","impliedFormat":99},{"version":"06360da67958e51b36f6f2545214dca3f1bf61c9aef6e451294fcc9aca230690","impliedFormat":99},{"version":"50bc55fc955fa799a4a1a11c3484077f06cc87033c68f5da6466b520876cb12f","impliedFormat":99},{"version":"07cbc706c24fa086bcc20daee910b9afa5dc5294e14771355861686c9d5235fd","impliedFormat":1},{"version":"18eb7233650bddcd9a453c59c5b1e771b372b555db62188544e443917c8ecb69","impliedFormat":99},"01b22c11c8a84189ef1737fa393120d50b9cd2aef17bc1c9bdf3a404c4adae96","8447738d3984b829006bf971ec27c0da377ee9ced18adaeea676506db7e2bd10","369ae453e32719097332c9711b29d00ce1555e78269bb083c9a8b74db8c3502d","8a16fb7ddf09fd4d472bdc715f769ad03457af24a028725c7501f8535afda1b6",{"version":"fe93c474ab38ac02e30e3af073412b4f92b740152cf3a751fdaee8cbea982341","impliedFormat":1},{"version":"6dc25f6d56cfb757dd1fdf38eb6a2059b812a13fbd81ade8e0cbbd93295c5987","impliedFormat":1},{"version":"1e00b8bf9e3766c958218cd6144ffe08418286f89ff44ba5a2cc830c03dd22c7","impliedFormat":1},"d64c3e010cb9fefe412b91a5cbb2114f91cb2e9cd92c2acf3eca4862c243377b","ba81860e743d57a54a34422415b5052f0c1c68fc952818451f1b3e5cd8724246","6564d48b87e45f46822fa0816f182dc0a631c6af329d56bf50d992ea8f4513f5",{"version":"a80ec72f5e178862476deaeed532c305bdfcd3627014ae7ac2901356d794fc93","impliedFormat":99},"82403231e33fd3d45b111e5e819df194cdfa7cef9a726770185724a60bd20932","414c135fd3da147748c43337032e7ab0653052d528d6d2b45afdfcf1fb20e2c7","f41c11fc13e9a1f1b849349cb51b137ddd27de0a17c5339675c789d58f556cc4","d574ea375ebc0c34ebedb37653537fa31e2d95afa94e947e25dba4a61e83b821",{"version":"9c580c6eae94f8c9a38373566e59d5c3282dc194aa266b23a50686fe10560159","impliedFormat":99},"0d6a733367a0e1087adcb5ef62cf442907ee3224ca59f1373765a2c4317421c3","2636ef7fdacc5461135aeb250c379546508667babf138a6f0f3bc9768fa9e2f4",{"version":"99d1a601593495371e798da1850b52877bf63d0678f15722d5f048e404f002e4","impliedFormat":99},"a0d16ce1b567f1919c3a0aa3aa9f173af847dc8288d6b3eaf622b8f0284e0025","cdc5d882012f641adc94dc4ce7eb9c94a866a6eee47f46643c2624272068e0c2","72c9f0b82e33b4982b286153b20fdb2b7ecb0b1491adcdc99e7665a04b0d2884","4f60dc2a7c94a0d476f330e207790273ff30ead3a5df29915683cddfaf4abb22",{"version":"8dd450de6d756cee0761f277c6dc58b0b5a66b8c274b980949318b8cad26d712","impliedFormat":99},{"version":"6b5f886fe41e2e767168e491fe6048398ed6439d44e006d9f51cc31265f08978","impliedFormat":99},{"version":"56a87e37f91f5625eb7d5f8394904f3f1e2a90fb08f347161dc94f1ae586bdd0","impliedFormat":99},{"version":"6b863463764ae572b9ada405bf77aac37b5e5089a3ab420d0862e4471051393b","impliedFormat":99},{"version":"904d6ad970b6bd825449480488a73d9b98432357ab38cf8d31ffd651ae376ff5","impliedFormat":99},{"version":"68b6a7501a56babd7bcd840e0d638ee7ec582f1e70b3c36ebf32e5e5836913c8","impliedFormat":99},{"version":"89783bd45ab35df55203b522f8271500189c3526976af533a599a86caaf31362","impliedFormat":99},{"version":"26e6c521a290630ea31f0205a46a87cab35faac96e2b30606f37bae7bcda4f9d","impliedFormat":99},"65826642a4e6368f71c0701748b1fbd2939723e13803dad50cbe9b92a28038d5","4cc6079cde3c2c8ccd910c4c683c3a53ed016d7a6ac7b9d73d61ee995381eb4b","1a4d985a03eed8bbba02f7ee60ac32607ab4388470deaebb2e27d75848e7dbcc","704bad248d46a66556a1ac4bc931443b870e223a706058a674c0b1e8f1a42f2f","857f1fdc9233150bc1530b1c2e8eac2c0e9bb4f1dab289c3ba562c6f7026e902","774b50df8d189fd20278474093ad8da5dbc8cc41a2b5e75f700a619ab02ae956",{"version":"dfcf16e716338e9fe8cf790ac7756f61c85b83b699861df970661e97bf482692","impliedFormat":99},"424b67201ff1674c9414fbb264234aa19a9d396abcfafe583de55cca8cd3a8f9","2e790a28cdad37d1304fce89d34644c0a76d224e5297bab4ab8c26fac392712b","6628e8fde207857b9ba08910d386eeea8213d7d745b4e0ae8b95332b52730db9",{"version":"cbfd5ef0c8fdb4983202252b5f5758a579f4500edc3b9ad413da60cffb5c3564","impliedFormat":99},"178fc69501dbe964c1481abfac7d8144fedf509d4932496a73a4ec948bc2e925","c5e3519e51235a429c8dfc1555c69fc4c887f75830d2162c3bdd5f5eb646e45b","94ef6387795bdddc777706e47488dce625f20b23a2143f2798759672a7ec1f73","1c40d3e1bfad025b0c7b15de84a4945e5cbd95a10eeb15dfde40a8fed9b43303","97d17bc9cd81d46572ba8600fee798d3d6fd712bdae4fe6625aaa30cd9e5f0bc","1984aa6dcd65af97da9d6449fed25d23814e71fcc1cf2f1ffa0485ae1c065bf2","de4e9fb0fd8e8ed10ea2e475ffe202a922ffe77e3f3edb2c517b0781447ad1b4",{"version":"2535fc1a5fe64892783ff8f61321b181c24f824e688a4a05ae738da33466605b","impliedFormat":99},"00702c92103d2bf0752fac030c9fc6f671c55a5732534a6fc306df618f30e652","63501a4716e3f57c2756773825c298d5da0dce946546d0d8c2d5003234335991","58b3737f01d9b1dce9645dd47d96f228f9de9ab711a7ffe868aead0ce73bb69d","0089770fad64e4e03fd3839fee1270fcfa08b6afd3ea0b64acae114526c3fcd7","4f7cce53ce3656763487ad3ad0f6c25898dd7c066ca1a099879d65cd9373e456","7c509c7e87704de4b801816dc780970a7e7a38e84eb48c57c82c986ce8e4ee45","383d0759d00333252a98aeb5346b4f4bd7858bc8a1bf0eb5528e4edd47c59b91","dbe0cbb27099ede26c3d5209679470e23439187974aa93c1a18fd8ced055e069","e7e72c6fbef5e7b1e2e13150fdcd78b0c0457c8a0547e4e8fac3c1a57bdc9aa8","5237de5960d4455db25e75d013e213392947b2b88c6858b607e98a01eceec0ad","3f357ba7b71e875c6b855670108cf49cfc29695d8f3b69310e9838ed1ad4779f","d632501cfdb41432ba796902f41a63c2df19311fb8a038520c4d62ac66a666c3","d45d66a5361d2724e00007bc6abf63dc481b978fa448793a42157cd7d1fc309a",{"version":"71acd198e19fa38447a3cbc5c33f2f5a719d933fccf314aaff0e8b0593271324","impliedFormat":99},"5603f0eb76a9b28cdd23b1dc11787870c9782e4b0be460b19d9f337d5f40e785",{"version":"7a14bf21ae8a29d64c42173c08f026928daf418bed1b97b37ac4bb2aa197b89b","impliedFormat":99},"04898729c7430adad2dc2095d401a09fcaa0d1beb9441e4ff90747e3d200871d",{"version":"8085954ba165e611c6230596078063627f3656fed3fb68ad1e36a414c4d7599a","impliedFormat":99},"e8672934f1c315f36cdae39380454ba8c2da62aca420dfb827d96693091419c4","e6cea9a9f8dc365fdc2c0d452ab2edd0ead9b53d6faf3a2bec9d69c4a50ec391","216a4d98d1f64349b7a000a113babc1943712292ffba357968673ab53270f230","3e9d4d2e206755f45ec683f5fcc66ec2cd9a4390a30ff714df49a02e8c83dbe2","a5d47ca25cc6f7eb242d4d8698c15225a9922ca635a5c8afd72f9834534f5467","09418931d1d539fe62eac2a3a74c6e3ed6f168f813d4850b5731f191952cecda","88bcd6479bfbce8406e9cb94b02bf8f130a67ea6e382ad684a07664b0c9438a0",{"version":"1179ef8174e0e4a09d35576199df04803b1db17c0fb35b9326442884bc0b0cce","impliedFormat":99},"550e7d09dda6d7d9f6740f60d95c178e9520fe63291533aa55c818e79b79660f","9e9457641ac2dcf262f8e148acdaba62009a752127be4a4095256ef11d229a9d","e8f042c5c343fe20cd0c258f157beef3c6baa0260802692ccfb00abd4949eb32","f7f4f78d1c9ac7a86650f7e771984f915f33fce1b28044346389bc62fac274f2","ad1a94591e67171f1a0fcbe46b559d29f2cabfafbda03633f911578ac7aa7f53","dbbd43bb61c7c6d97850bc2ecde8b87c3288c837bea86a80726ca1c14f39d1c7","6932bebc9453abf2715d8830c4543ff39c5c32758ac29a0fa27b53dc9185d6a2","8b2af7b9cef072907d79ee518d307ce8653e7cf94d1ca5a2350f50e518c45526","64206e2bacebccfabf5a1623baec44a14b21c0108df7cb56ff6f3dfd56f80dda",{"version":"975fd88efbc05185c9da91a7d3c63867da3d9c9b7a48a55c4081462c1eab3609","impliedFormat":99},{"version":"0dcb288859aaa54d0827010f73bcfbb4354ff644f15b4fb3782213579d0597b4","impliedFormat":99},{"version":"130732ac19879a76e89db5fa3ec75ca665a61e89bac03dcbaa8e97cff042ff9e","impliedFormat":99},{"version":"f568a765b5da538a45256b0df9888bc2baea92e8643c735380ba673ae7840fff","impliedFormat":99},{"version":"f7c73dbe95e2ae8475e20633fa2eedaa2b1c8004cae08e30a9534761352c7410","impliedFormat":99},{"version":"03a4facd4eb2fe452d64718d3a52db39de8ecdf395a0b0d6d57a500f52e88065","impliedFormat":99},{"version":"b75d56703daaffcb31a7cdebf190856e07739a9481f01c2919f95bde99be9424","impliedFormat":99},{"version":"882b28abe64dae4932c83ebb71e4155da340929fe08a2055f3e573ef17f70fc3","impliedFormat":1},{"version":"4a3e425808751200a7709671667ad3d7e7cbfd0a06d469cab42adf06c2601f4a","impliedFormat":1},{"version":"401da46338f5b4f97c2a5f8a0faaace045c51aabd751d2dc704159f64feafe89","impliedFormat":1},{"version":"4e6da006f3a74377f1801ef8cbd771f82ead12d4326d4429661524aca2e21493","impliedFormat":1},"336bdb260f0fbaba534b598ec88c43f7444e6d5f214e023d8177a0a2777dfb8e","68bc8da9e1856dc140a0b08b9c4464c9652cf28de673cfd747e1196416588d89","009f25d4543139998943d991bb52b6a9d302b86764e6e5b361daff9deffa573d","b4078faf17f03085696264c3dca4a31e51a24d324f135facaca6d9b61ae06034","a077c6c008001f3bf96d8358c06b6a9628a54131947662c6cbde18c4ba06291d","2fb0e0586839de10a2edd04a965646f6ead82351b2c0568b952e50e5e1790f61","0f4a2f9636885f4d031341e95bab0231dfa6ff4fe1bab1b85702721c5e3318e9","befec9a266c3829b611359723a34d41164c5fb0abe7d4cf1e81e68a51afb699e","f562253c39ac3e9e1d805cdc49896d834a61e0bfb6d1076d0145bf01b0d766cc","ebb359894311c2cbf4993f2e914107a83cf620636d2cba53d3815e685fbfb15b","23406e080d5ef654d219bdf89771ff9ada7a4219bbbaf9fcafcbf4b77e4f6a77","6789cb106a6d24f17ef4da3b8bc83e60b4bf619d0608278cab2d9596c7755d1d","d8577388693c6649426ecd1cff3ee33a996cbcd2f45276a1bd905b33a8d85dbd","24933e634466448d59f9d60a2674ba5843474479d7c90e70642a0aebca195ac6","6008d7d41c803976ba49e1af18fe1cfeff5ecbb82495573066baf008b3330dbd","cc620bf444642aa47aed021cb81d63065ff5eef5d0dd34c743fdce3630ed42db","772994b21f0253aa361b76e70635be2b113d09f7ad83ae7bc65ffb6657c2e8ea",{"version":"6c05d0fcee91437571513c404e62396ee798ff37a2d8bef2104accdc79deb9c0","impliedFormat":1},"2efa0d7a486040099382241782147d4ffb89e59f22f6d61afd5cab8b7ac53ddc","ff2dcd74e3a69ac674dbff952807ac79814e880c32b731532c36b3055318d300","d44672e6692121f5d02c50b84837f9fd144da332c1ee8f189569240730ba7158","6300e3ebeab507dd926fb8534c36df437cc6226f0417eea939d88bb83e907a82","a06992408d82758eb2a303ed3e32b03d33408619434388872b25da38b7aec545","df80a56ff0d33c734a13b86f938f3e40bbd46cdce068e945b77c0710ff762d7c","ed20b8b2a34b2cdadc293173542c877d9f0473ed2c10e62170b1ffb31ccf670b","9810180eba6e1edd89f6e2149a7267e14b9631e43bebf9c868941826bed90958","7fd271475ba8a6ec0372837ca85123201fb47eb748930feb1d061ccdc6ec8a73","2b2a8b512bd03f1e5df12ca23253357b0415141b3ed7f99c26c8004a280a70a9",{"version":"4b44a78900c844368d8f27ce485bb55bd17ba164cb31e3b8bbc64c6800da506c","impliedFormat":1},{"version":"ea7b47bc357858506e6161065b1a8997cfbc5d1dcdf233966da9d01d74721ef8","impliedFormat":1},{"version":"2dff9940d5b17919f37f7b104329a32b041a6ed9aad6fb898814e3c1a1b2ca52","impliedFormat":99},"a724050dc4dc596fd9c394009915a1cb2c1aab4fc2e4c8d8c2967937662b5919","f2aea81d8baf2b621945382aabac150e3db40f20d19ac1abea7aff805f1dc33c","7551f06532cd97f4a406f329d0abc27945bfb56433b1f200d35a72b197769989","ecfd04d50daa2d7efeb0866c1d5a4a5df1aee3999b974be96f7de9d8769dd002",{"version":"6da2e0928bdab05861abc4e4abebea0c7cf0b67e25374ba35a94df2269563dd8","impliedFormat":99},"a5e4608f5f35b3c6ccd89fbdc03a6af52df02fb8b8ad8cbe1fa06cf532b23193","e4b552daf9e07aeea05bcf5b075f766dd484945daa93f75a1ba7917eaa8fe0ca",{"version":"002509a5233dfcc040562048a8bc0d1f46fd127dd41b643b3ca60516cf72c5e5","affectsGlobalScope":true,"impliedFormat":1},{"version":"b83f5829e4daf45624214b7e415ea11c5fc8e199420fb7e74e7e5b682f7e07e4","impliedFormat":1}],"root":[486,[511,518],[528,534],538,[540,547],[1793,1796],[1805,1808],[1812,1814],[1816,1819],1821,1822,[1824,1827],[1836,1841],[1843,1845],[1847,1853],[1855,1867],1869,1871,[1873,1879],[1881,1889],[1901,1917],[1919,1928],[1932,1935],1937,1938],"options":{"allowJs":true,"esModuleInterop":true,"jsx":1,"module":99,"skipLibCheck":true,"strict":false,"target":4},"referencedMap":[[1057,1],[1066,2],[1068,3],[1067,3],[1069,4],[1070,5],[1071,6],[1058,7],[1059,7],[1064,8],[1063,7],[1061,7],[1062,7],[1060,7],[1072,9],[1065,5],[829,10],[828,5],[959,11],[947,12],[950,13],[951,14],[952,15],[953,16],[956,17],[957,18],[954,19],[955,20],[958,21],[949,22],[948,23],[862,24],[863,25],[861,26],[864,27],[801,28],[802,29],[803,30],[553,5],[555,31],[554,5],[556,5],[557,5],[559,32],[558,5],[560,5],[561,5],[562,5],[563,5],[564,5],[567,33],[568,5],[569,5],[590,34],[591,5],[592,5],[593,35],[595,36],[596,37],[601,38],[598,39],[602,40],[603,5],[597,36],[604,41],[607,42],[610,43],[612,44],[611,5],[585,5],[586,5],[587,45],[613,43],[615,46],[619,47],[575,5],[620,48],[621,5],[622,5],[623,5],[624,5],[625,5],[626,5],[599,5],[627,5],[600,5],[628,35],[630,49],[631,35],[632,5],[576,5],[633,5],[634,5],[635,5],[636,5],[637,5],[638,5],[639,5],[640,5],[641,5],[642,5],[643,5],[644,50],[647,51],[651,52],[649,53],[648,5],[654,54],[655,5],[577,5],[656,55],[658,56],[657,5],[659,5],[660,5],[661,5],[662,5],[663,5],[664,5],[665,5],[666,57],[616,58],[617,59],[583,60],[570,5],[618,5],[588,5],[671,61],[669,62],[673,63],[674,64],[675,64],[676,65],[670,5],[677,5],[678,66],[679,5],[684,67],[683,68],[686,69],[687,65],[688,65],[689,65],[690,5],[693,70],[691,5],[692,71],[694,72],[695,73],[696,5],[584,5],[697,74],[698,5],[699,5],[571,5],[701,75],[700,5],[702,5],[703,5],[704,76],[705,77],[645,5],[706,5],[707,5],[708,5],[709,48],[710,5],[711,5],[712,48],[713,5],[714,5],[716,78],[715,5],[717,48],[650,5],[672,79],[685,80],[594,81],[652,5],[578,5],[718,82],[719,5],[747,83],[720,84],[724,85],[721,5],[722,5],[723,5],[725,5],[589,86],[726,5],[742,87],[727,5],[729,88],[732,89],[735,90],[736,5],[743,91],[746,92],[744,5],[579,5],[572,5],[580,5],[745,5],[668,93],[680,93],[681,5],[667,5],[682,5],[749,94],[748,5],[646,5],[750,5],[751,5],[565,5],[752,5],[753,5],[754,95],[629,34],[741,96],[739,97],[737,5],[738,5],[740,5],[755,98],[756,99],[728,5],[757,5],[759,100],[760,101],[761,5],[762,102],[605,5],[763,5],[764,5],[765,5],[766,5],[734,103],[733,5],[758,5],[767,5],[768,5],[769,104],[730,5],[731,105],[771,106],[770,5],[614,5],[772,5],[773,5],[776,107],[775,108],[778,109],[777,5],[609,110],[608,5],[774,5],[779,111],[780,5],[783,112],[781,5],[782,113],[784,43],[785,114],[786,115],[787,5],[788,5],[789,116],[790,5],[791,117],[792,5],[606,5],[793,5],[653,118],[566,5],[794,5],[795,5],[796,5],[797,119],[798,120],[799,5],[574,121],[573,5],[581,122],[582,5],[800,123],[552,5],[1792,124],[1152,125],[1151,1],[1153,126],[1149,127],[1148,128],[1150,129],[1154,130],[1155,131],[1157,132],[1156,133],[1158,134],[1161,135],[1160,136],[1162,137],[1164,138],[1163,1],[1165,139],[1167,140],[1166,1],[1168,141],[1169,1],[1170,142],[1171,143],[1172,144],[1173,1],[1174,145],[1175,1],[1176,146],[1177,147],[1178,148],[1179,128],[1180,149],[1181,133],[1182,150],[1340,128],[1341,151],[1183,1],[1184,152],[1188,153],[1187,1],[1189,154],[1190,133],[1191,155],[1192,1],[1193,156],[1194,1],[1195,157],[1197,158],[1196,1],[1198,159],[1202,160],[1203,161],[1204,162],[1205,163],[1206,133],[1207,164],[1208,133],[1209,165],[1210,128],[1211,166],[1215,1],[1212,133],[1213,167],[1214,168],[1216,169],[1218,170],[1217,133],[1219,171],[1220,1],[1221,172],[1200,173],[1199,133],[1201,174],[1222,1],[1223,175],[1226,176],[1227,177],[1228,176],[1229,178],[1230,179],[1185,1],[1186,180],[1231,136],[1232,181],[1233,1],[1234,182],[1236,183],[1235,1],[1237,184],[1238,1],[1239,185],[1240,1],[1241,186],[1242,1],[1243,187],[1344,1],[1345,188],[1078,1],[1244,189],[1247,190],[1248,191],[1246,192],[1245,193],[1250,194],[1251,195],[1249,1],[1224,5],[1225,196],[1252,197],[1253,1],[1254,198],[1255,199],[1258,200],[1259,201],[1260,1],[1261,202],[1262,1],[1263,203],[1264,143],[1265,204],[1266,1],[1267,205],[1268,1],[1269,206],[1270,1],[1271,207],[1272,1],[1273,208],[1275,209],[1274,1],[1276,210],[1277,211],[1278,212],[1280,213],[1279,1],[1281,214],[1282,1],[1283,215],[1284,1],[1285,216],[1286,1],[1287,217],[1300,218],[1301,219],[1302,1],[1304,220],[1303,221],[1342,1],[1343,222],[1305,1],[1306,223],[1307,1],[1308,224],[1309,5],[1310,225],[1311,5],[1312,226],[1346,5],[1347,227],[1313,133],[1314,228],[1315,1],[1316,229],[1317,1],[1318,230],[1319,133],[1320,231],[1321,5],[1322,232],[1323,233],[1324,234],[1328,235],[1327,136],[1326,136],[1330,236],[1329,136],[1331,237],[1325,136],[1332,238],[1159,1],[1334,239],[1333,240],[1335,241],[1336,242],[1337,243],[1348,5],[1349,244],[1338,133],[1339,245],[1350,246],[1781,1],[1784,247],[1782,26],[1783,248],[1130,249],[1103,250],[1013,251],[1012,252],[1011,5],[1015,253],[1014,211],[1092,254],[1090,255],[1091,256],[1102,257],[1101,5],[1094,258],[1093,259],[1098,260],[1097,189],[1096,261],[1095,133],[1089,262],[1088,249],[1100,263],[1099,264],[1131,265],[1086,266],[1085,267],[1083,268],[1084,5],[1082,269],[1087,270],[1081,271],[1079,272],[1080,273],[1141,274],[1139,249],[1140,275],[1133,276],[1135,277],[1134,276],[1136,278],[1137,278],[1138,279],[1132,1],[1777,1],[1780,280],[1779,281],[1778,5],[1522,282],[1523,283],[1787,1],[1788,284],[1775,285],[1774,5],[1776,286],[1076,287],[1077,288],[1524,289],[1075,5],[1144,133],[1145,290],[1507,291],[1508,292],[1506,293],[1789,13],[1580,13],[1581,294],[1583,295],[1584,296],[1582,297],[1585,298],[1586,299],[1604,300],[1588,301],[1587,13],[1590,302],[1589,303],[1592,304],[1591,13],[1594,305],[1593,306],[1596,307],[1595,13],[1598,308],[1597,13],[1600,309],[1599,303],[1601,5],[1603,310],[1602,311],[1605,312],[965,26],[1533,313],[1525,314],[1534,315],[1531,23],[1526,26],[1527,316],[1528,5],[1532,5],[1529,5],[1530,317],[1053,5],[1056,318],[1055,319],[1054,320],[1123,321],[1122,1],[1124,322],[1126,323],[1125,324],[964,297],[967,325],[968,326],[969,5],[970,5],[973,327],[971,5],[972,1],[966,297],[975,5],[974,322],[976,328],[984,5],[985,329],[960,13],[961,330],[962,13],[963,331],[980,322],[981,332],[998,5],[999,333],[549,5],[550,334],[979,5],[992,322],[993,335],[1002,26],[1003,336],[1004,26],[1005,337],[1006,338],[991,339],[990,5],[989,340],[988,5],[987,341],[986,5],[995,342],[994,13],[983,343],[982,5],[1001,344],[1000,23],[997,345],[996,5],[977,346],[978,347],[1120,348],[1008,349],[1007,1],[1119,350],[1118,5],[1010,351],[1009,1],[1106,352],[1105,353],[1108,354],[1107,5],[1110,355],[1109,5],[1111,1],[1117,356],[1116,5],[1113,357],[1112,5],[1115,358],[1114,5],[1121,359],[1538,360],[1537,5],[1539,361],[1128,5],[1129,362],[1540,23],[1541,363],[1073,364],[1074,365],[1791,366],[1790,26],[1536,367],[1535,26],[1542,368],[1773,369],[1766,370],[1765,23],[1770,371],[1769,23],[1772,372],[1771,373],[1768,374],[1767,23],[1554,375],[1547,5],[1549,376],[1548,377],[1551,378],[1550,379],[1553,380],[1552,5],[1764,381],[1021,382],[1018,383],[1016,384],[1017,385],[1020,386],[1019,5],[1761,387],[1760,23],[1556,388],[1555,5],[1558,389],[1557,5],[1561,390],[1560,391],[1559,1],[1104,392],[1562,5],[1564,393],[1563,394],[1683,395],[1682,396],[1746,397],[1745,5],[1709,398],[1708,1],[1143,399],[1142,5],[1566,400],[1565,1],[1693,401],[1692,384],[1757,402],[1747,403],[1756,404],[1755,405],[1754,297],[1753,406],[1748,5],[1752,407],[1749,408],[1751,409],[1750,297],[1699,410],[1698,23],[1703,411],[1702,5],[1742,412],[1741,5],[1732,413],[1731,298],[1568,414],[1567,5],[1570,415],[1569,416],[1572,417],[1571,5],[1715,418],[1714,26],[1609,419],[1608,420],[1574,421],[1573,5],[1697,422],[1696,368],[1575,5],[1577,423],[1576,5],[1579,424],[1578,5],[1610,1],[1612,425],[1611,5],[1615,426],[1614,427],[1613,5],[1719,428],[1718,13],[1717,429],[1716,13],[1617,430],[1616,5],[1707,431],[1706,264],[1713,432],[1712,5],[1619,433],[1618,5],[1621,434],[1620,435],[1623,436],[1622,5],[1626,437],[1625,438],[1624,1],[1734,439],[1733,26],[1763,440],[1762,5],[1628,441],[1627,1],[1677,442],[1676,443],[1711,444],[1710,445],[1705,446],[1704,384],[1630,447],[1629,448],[1740,449],[1739,23],[1632,450],[1631,451],[1786,452],[1785,384],[1726,453],[1725,5],[1728,454],[1727,5],[1738,455],[1737,5],[1730,456],[1729,384],[1744,457],[1743,5],[1633,5],[1721,458],[1720,13],[1257,459],[1256,5],[1635,460],[1634,1],[1759,461],[1758,5],[1724,462],[1723,463],[1722,464],[1670,465],[1669,466],[1675,467],[1607,468],[1606,13],[1673,469],[1671,13],[1672,470],[1674,471],[1679,472],[1678,5],[1681,473],[1680,474],[1701,475],[1700,476],[1695,477],[1694,23],[1685,478],[1684,479],[1688,480],[1687,481],[1686,23],[1736,482],[1735,384],[1691,483],[1690,484],[1689,5],[1146,1],[1147,485],[1374,1],[1375,486],[1390,1],[1376,1],[1377,487],[1396,1],[1391,1],[1386,1],[1387,488],[1393,1],[1394,489],[1395,1],[1289,490],[1290,491],[1288,13],[1291,492],[1292,493],[1293,494],[1294,495],[1295,1],[1296,496],[1297,492],[1298,497],[1299,498],[1505,494],[1504,499],[1509,500],[1510,1],[1511,501],[1512,494],[1513,502],[1514,494],[1515,503],[1388,1],[1389,504],[1378,1],[1379,505],[1372,1],[1373,506],[1392,507],[1516,508],[1517,509],[1518,1],[1519,143],[1380,1],[1381,510],[1382,1],[1383,511],[1384,1],[1127,512],[1385,513],[1521,514],[1520,515],[1351,1],[1352,516],[1354,517],[1355,518],[1356,517],[1357,519],[1358,517],[1353,5],[1359,520],[1367,1],[1368,521],[1360,1],[1361,1],[1362,1],[1363,522],[1545,523],[1544,524],[1546,525],[1371,526],[1370,5],[1364,527],[1543,1],[1365,1],[1366,528],[1369,529],[548,5],[551,5],[849,530],[850,5],[860,531],[851,13],[852,13],[848,5],[859,5],[854,532],[853,5],[855,13],[857,13],[858,533],[856,534],[1437,5],[1438,535],[1452,5],[1453,536],[1443,5],[1444,537],[1464,5],[1465,538],[1499,5],[1500,539],[1470,540],[1471,541],[1428,542],[1401,542],[1402,542],[1427,542],[1399,5],[1426,542],[1400,543],[1404,542],[1405,542],[1406,542],[1429,542],[1435,542],[1432,542],[1407,542],[1408,542],[1424,542],[1425,544],[1430,542],[1431,542],[1409,542],[1410,542],[1411,542],[1412,542],[1413,5],[1403,542],[1414,542],[1415,542],[1422,542],[1416,542],[1417,542],[1434,542],[1421,542],[1418,542],[1423,542],[1433,542],[1419,542],[1420,542],[1436,545],[1462,5],[1463,546],[1488,5],[1489,547],[1446,5],[1458,5],[1459,548],[1454,5],[1455,549],[1490,5],[1491,550],[1503,551],[1440,552],[1439,5],[1493,553],[1492,5],[1502,554],[1501,5],[1468,13],[1441,5],[1445,5],[1442,5],[1469,5],[1397,5],[1398,26],[1461,555],[1460,5],[1449,324],[1473,556],[1472,5],[1480,557],[1481,558],[1479,5],[1482,451],[1483,559],[1484,560],[1485,561],[1475,562],[1476,562],[1477,563],[1478,564],[1474,5],[1495,565],[1496,566],[1497,567],[1498,568],[1494,5],[1448,569],[1447,5],[1487,570],[1486,5],[1467,571],[1466,5],[1457,572],[1456,5],[1451,573],[1450,5],[845,574],[844,575],[843,1],[846,576],[840,574],[827,577],[833,577],[836,578],[835,577],[834,5],[823,577],[832,578],[822,577],[824,577],[825,577],[839,579],[838,577],[837,577],[830,324],[826,5],[842,580],[841,5],[847,581],[821,582],[818,583],[820,583],[831,583],[819,583],[946,584],[879,585],[880,586],[883,587],[875,588],[874,589],[881,23],[876,589],[882,590],[887,589],[885,591],[886,586],[877,592],[878,589],[884,586],[865,593],[873,594],[866,586],[872,595],[871,596],[888,597],[867,589],[868,598],[869,599],[870,600],[889,5],[891,5],[892,601],[905,602],[925,603],[893,586],[894,604],[943,605],[944,606],[930,26],[931,607],[906,586],[945,608],[920,609],[919,586],[922,610],[921,586],[916,611],[915,586],[933,612],[932,586],[896,613],[895,586],[898,614],[897,586],[912,615],[911,586],[924,616],[923,586],[927,617],[926,5],[914,618],[913,586],[918,619],[917,586],[929,620],[928,586],[902,621],[901,5],[937,622],[936,623],[942,624],[939,625],[938,600],[941,626],[940,627],[904,628],[903,586],[900,629],[899,586],[935,630],[934,586],[890,324],[907,5],[910,631],[909,632],[908,593],[243,5],[1829,633],[1872,634],[1936,635],[519,1],[1842,636],[521,633],[1835,635],[1828,633],[1868,633],[1834,637],[1854,638],[1831,639],[1832,633],[520,1],[1846,634],[1833,634],[1823,634],[1880,638],[1820,633],[1815,1],[1870,640],[522,641],[1830,5],[1939,5],[138,642],[139,642],[140,643],[98,644],[141,645],[142,646],[143,647],[93,5],[96,648],[94,5],[95,5],[144,649],[145,650],[146,651],[147,652],[148,653],[149,654],[150,654],[152,5],[151,655],[153,656],[154,657],[155,658],[137,659],[97,5],[156,660],[157,661],[158,662],[193,663],[159,664],[160,665],[161,666],[162,667],[163,668],[164,669],[168,670],[169,671],[170,672],[171,673],[172,673],[173,674],[174,5],[175,675],[177,676],[176,677],[178,678],[179,679],[180,680],[181,681],[182,682],[183,683],[184,684],[185,685],[186,686],[187,687],[188,688],[189,689],[190,690],[191,691],[192,692],[83,5],[197,693],[345,1],[198,694],[196,1],[346,695],[1940,696],[194,697],[195,698],[81,5],[84,699],[343,1],[318,1],[99,5],[525,700],[524,701],[523,5],[82,5],[804,5],[1898,702],[1897,5],[1899,703],[1665,1],[1667,704],[1659,705],[1662,705],[1660,1],[1658,705],[1666,705],[1664,705],[1668,706],[1657,1],[1663,1],[1661,705],[1052,707],[1049,5],[1050,708],[1051,709],[1803,5],[526,1],[1918,1],[91,710],[433,711],[438,712],[440,713],[219,714],[247,715],[416,716],[242,717],[230,5],[211,5],[217,5],[406,718],[271,719],[218,5],[385,720],[252,721],[253,722],[342,723],[403,724],[358,725],[410,726],[411,727],[409,728],[408,5],[407,729],[249,730],[220,731],[292,5],[293,732],[215,5],[231,733],[221,734],[276,733],[273,733],[204,733],[245,735],[244,5],[415,736],[425,5],[210,5],[319,737],[320,738],[313,1],[461,5],[322,5],[323,739],[314,740],[335,1],[466,741],[465,742],[460,5],[402,743],[401,5],[459,744],[315,1],[354,745],[352,746],[462,5],[464,747],[463,5],[353,748],[454,749],[457,750],[283,751],[282,752],[281,753],[469,1],[280,754],[265,5],[472,5],[1810,755],[1809,5],[475,5],[474,1],[476,756],[200,5],[412,757],[413,758],[414,759],[233,5],[209,760],[199,5],[202,761],[334,762],[333,763],[324,5],[325,5],[332,5],[327,5],[330,764],[326,5],[328,765],[331,766],[329,765],[216,5],[207,5],[208,733],[255,5],[340,739],[360,739],[432,767],[441,768],[445,769],[419,770],[418,5],[268,5],[477,771],[428,772],[316,773],[317,774],[308,775],[298,5],[339,776],[299,777],[341,778],[337,779],[336,5],[338,5],[351,780],[420,781],[421,782],[300,783],[305,784],[296,785],[398,786],[427,787],[275,788],[375,789],[205,790],[426,791],[201,717],[256,5],[257,792],[387,793],[254,5],[386,794],[92,5],[380,795],[232,5],[294,796],[376,5],[206,5],[258,5],[384,797],[214,5],[263,798],[304,799],[417,800],[303,5],[383,5],[389,801],[390,802],[212,5],[392,803],[394,804],[393,805],[235,5],[382,790],[396,806],[381,807],[388,808],[223,5],[226,5],[224,5],[228,5],[225,5],[227,5],[229,809],[222,5],[368,810],[367,5],[373,811],[369,812],[372,813],[371,813],[374,811],[370,812],[262,814],[361,815],[424,816],[479,5],[449,817],[451,818],[302,5],[450,819],[422,781],[478,820],[321,781],[213,5],[301,821],[259,822],[260,823],[261,824],[291,825],[397,825],[277,825],[362,826],[278,826],[251,827],[250,5],[366,828],[365,829],[364,830],[363,831],[423,832],[312,833],[348,834],[311,835],[344,836],[347,837],[405,838],[404,839],[400,840],[357,841],[359,842],[356,843],[395,844],[350,5],[437,5],[349,845],[399,5],[264,846],[297,757],[295,847],[266,848],[269,849],[473,5],[267,850],[270,850],[435,5],[434,5],[436,5],[471,5],[272,851],[310,1],[90,5],[355,852],[248,5],[237,853],[306,5],[443,1],[453,854],[290,1],[447,739],[289,855],[430,856],[288,854],[203,5],[455,857],[286,1],[287,1],[279,5],[236,5],[285,858],[284,859],[234,860],[307,672],[274,672],[391,5],[378,861],[377,5],[439,5],[309,1],[431,862],[85,1],[88,863],[89,864],[86,1],[87,5],[246,865],[241,866],[240,5],[239,867],[238,5],[429,868],[442,869],[444,870],[446,871],[1811,872],[448,873],[452,874],[485,875],[456,875],[484,876],[458,877],[467,878],[468,879],[470,880],[480,881],[483,760],[482,5],[481,602],[503,882],[501,883],[502,884],[490,885],[491,883],[498,886],[489,887],[494,888],[504,5],[495,889],[500,890],[506,891],[505,892],[488,893],[496,894],[497,895],[492,896],[499,882],[493,897],[165,5],[166,5],[167,898],[1900,899],[1892,900],[1891,1],[1895,901],[1890,1],[1893,5],[1894,902],[1896,903],[1024,904],[1023,905],[1025,1],[1026,905],[1028,906],[1029,907],[1027,905],[1048,908],[1022,5],[1030,5],[1034,909],[1031,5],[1032,5],[1033,5],[1035,907],[1036,907],[1037,907],[1038,907],[1040,910],[1039,907],[1047,911],[1041,5],[1042,5],[1043,5],[1046,912],[1044,5],[1045,5],[1929,1],[1931,913],[1930,914],[379,915],[487,5],[527,5],[509,916],[508,5],[507,5],[510,917],[539,5],[115,918],[125,919],[114,918],[135,920],[106,921],[105,922],[134,602],[128,923],[133,924],[108,925],[122,926],[107,927],[131,928],[103,929],[102,602],[132,930],[104,931],[109,932],[110,5],[113,932],[100,5],[136,933],[126,934],[117,935],[118,936],[120,937],[116,938],[119,939],[129,602],[111,940],[112,941],[121,942],[101,943],[124,934],[123,932],[127,5],[130,944],[1637,945],[1643,946],[1636,947],[1638,5],[1652,948],[1647,949],[1650,950],[1656,951],[1645,952],[1646,949],[1649,950],[1651,948],[1642,953],[1655,954],[1648,950],[1644,955],[1641,956],[1639,957],[1654,952],[1653,5],[1640,5],[817,958],[807,959],[809,960],[815,961],[811,5],[812,5],[810,962],[813,958],[805,5],[806,5],[816,963],[808,964],[814,965],[537,966],[1802,967],[1800,968],[1798,968],[1804,969],[1801,968],[1797,968],[1799,968],[536,968],[535,5],[486,970],[512,971],[513,971],[514,971],[515,971],[516,971],[518,972],[1822,973],[1857,974],[1859,975],[1814,976],[1861,977],[1862,5],[1819,978],[1863,979],[1865,980],[1866,1],[1867,981],[1874,982],[1875,1],[1879,983],[1883,984],[1876,985],[1884,5],[1885,5],[1886,5],[1825,986],[1887,987],[1878,988],[1888,989],[1852,990],[1889,5],[1905,991],[1906,992],[1849,993],[1837,990],[1840,994],[1907,995],[1850,996],[1908,5],[1909,997],[1910,5],[1911,998],[1912,989],[1913,999],[1914,1000],[1915,1001],[1904,1002],[1917,1003],[1882,1004],[1839,1005],[1856,1006],[1877,1007],[1864,979],[1838,1008],[1848,1009],[1851,1010],[1827,1011],[1844,1012],[1919,1013],[1826,1011],[1921,1014],[1922,1015],[1923,1016],[1924,1],[1926,1017],[1927,1018],[1903,1019],[1928,1020],[1932,1021],[1916,1022],[1934,1023],[1920,5],[1858,1],[1902,1024],[1901,1011],[1935,1025],[1873,1026],[1818,1027],[1816,1027],[1817,1028],[1937,1029],[1843,1030],[1836,1031],[1845,1028],[1869,1032],[1855,1033],[1847,1034],[1824,1035],[1881,1036],[1821,1037],[1933,1038],[1860,1028],[1871,1039],[1853,1028],[529,1040],[1813,1041],[1841,1],[530,1042],[1925,1043],[1812,1],[1938,1044],[534,1045],[541,1046],[542,1],[540,1047],[543,1],[538,1048],[545,1049],[517,1050],[532,1051],[546,5],[547,5],[1793,298],[528,1052],[544,5],[1794,1053],[1796,1054],[1805,1055],[531,5],[1806,1056],[533,1],[1807,5],[1795,5],[511,1057],[1808,5],[79,5],[80,5],[13,5],[14,5],[16,5],[15,5],[2,5],[17,5],[18,5],[19,5],[20,5],[21,5],[22,5],[23,5],[24,5],[3,5],[25,5],[26,5],[4,5],[27,5],[31,5],[28,5],[29,5],[30,5],[32,5],[33,5],[34,5],[5,5],[35,5],[36,5],[37,5],[38,5],[6,5],[42,5],[39,5],[40,5],[41,5],[43,5],[7,5],[44,5],[49,5],[50,5],[45,5],[46,5],[47,5],[48,5],[8,5],[54,5],[51,5],[52,5],[53,5],[55,5],[9,5],[56,5],[57,5],[58,5],[60,5],[59,5],[61,5],[62,5],[10,5],[63,5],[64,5],[65,5],[11,5],[66,5],[67,5],[68,5],[69,5],[70,5],[1,5],[71,5],[72,5],[12,5],[76,5],[74,5],[78,5],[73,5],[77,5],[75,5]],"semanticDiagnosticsPerFile":[[531,[{"start":1225,"length":6,"messageText":"Cannot find name 'Source'.","category":1,"code":2304},{"start":1660,"length":4,"messageText":"Cannot find name 'User'.","category":1,"code":2304},{"start":1682,"length":12,"messageText":"Cannot find name 'Subscription'. Did you mean 'PushSubscription'?","category":1,"code":2552,"canonicalHead":{"code":2304,"messageText":"Cannot find name 'Subscription'."},"relatedInformation":[{"file":"../node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.dom.d.ts","start":830013,"length":16,"messageText":"'PushSubscription' is declared here.","category":3,"code":2728}]},{"start":2143,"length":12,"messageText":"Cannot find name 'Conversation'.","category":1,"code":2304}]],[532,[{"start":22,"length":8,"messageText":"Import declaration conflicts with local declaration of 'ApiError'.","category":1,"code":2440},{"start":5379,"length":5,"code":2322,"category":1,"messageText":{"messageText":"Type 'import(\"/mnt/d/handywriterzai/frontend/src/lib/api-client\").ApiError' is not assignable to type 'import(\"/mnt/d/handywriterzai/frontend/src/types/api\").ApiError'.","category":1,"code":2322,"next":[{"messageText":"Property 'timestamp' is optional in type 'ApiError' but required in type 'ApiError'.","category":1,"code":2327}]}},{"start":6019,"length":5,"code":2322,"category":1,"messageText":{"messageText":"Type 'import(\"/mnt/d/handywriterzai/frontend/src/lib/api-client\").ApiError' is not assignable to type 'import(\"/mnt/d/handywriterzai/frontend/src/types/api\").ApiError'.","category":1,"code":2322,"next":[{"messageText":"Property 'timestamp' is optional in type 'ApiError' but required in type 'ApiError'.","category":1,"code":2327}]}}]],[533,[{"start":6429,"length":10,"messageText":"Cannot find name 'FileUpload'.","category":1,"code":2304},{"start":6694,"length":10,"messageText":"Cannot find name 'FileUpload'.","category":1,"code":2304},{"start":6791,"length":10,"messageText":"Cannot find name 'FileUpload'.","category":1,"code":2304}]],[534,[{"start":2430,"length":5,"code":2339,"category":1,"messageText":{"messageText":"Property 'error' does not exist on type 'ApiResponse<T>'.","category":1,"code":2339,"next":[{"messageText":"Property 'error' does not exist on type 'ApiSuccessResponse<T>'.","category":1,"code":2339}]}},{"start":5098,"length":7,"code":2322,"category":1,"messageText":{"messageText":"Type '() => Promise<T>' is not assignable to type '() => Promise<void>'.","category":1,"code":2322,"next":[{"messageText":"Type 'Promise<T>' is not assignable to type 'Promise<void>'.","category":1,"code":2322,"next":[{"messageText":"Type 'T' is not assignable to type 'void'.","category":1,"code":2322}],"canonicalHead":{"code":2322,"messageText":"Type '() => Promise<T>' is not assignable to type '() => Promise<void>'."}}]},"relatedInformation":[{"start":421,"length":1,"messageText":"This type parameter might need an `extends void` constraint.","category":1,"code":2208},{"file":"./src/types/hooks.ts","start":508,"length":7,"messageText":"The expected type comes from property 'refetch' which is declared here on type 'UseApiState<T>'","category":3,"code":6500}]},{"start":6030,"length":5,"code":2339,"category":1,"messageText":{"messageText":"Property 'error' does not exist on type 'ApiResponse<TData>'.","category":1,"code":2339,"next":[{"messageText":"Property 'error' does not exist on type 'ApiSuccessResponse<TData>'.","category":1,"code":2339}]}},{"start":9886,"length":5,"code":2339,"category":1,"messageText":{"messageText":"Property 'error' does not exist on type 'ApiResponse<{ items: T[]; hasMore: boolean; total: number; }>'.","category":1,"code":2339,"next":[{"messageText":"Property 'error' does not exist on type 'ApiSuccessResponse<{ items: T[]; hasMore: boolean; total: number; }>'.","category":1,"code":2339}]}}]],[541,[{"start":120,"length":23,"messageText":"Cannot find module '@tanstack/react-query' or its corresponding type declarations.","category":1,"code":2307},{"start":2897,"length":15,"messageText":"Property 'connectionError' does not exist on type '{ events: TimelineEvent[]; streamingText: string; reasoningText: string; totalCost: number; plagiarismScore: number; qualityScore: number; derivatives: { kind: string; url: string; }[]; ... 6 more ...; isConnected: boolean; }'.","category":1,"code":2339},{"start":3545,"length":7,"code":2353,"category":1,"messageText":"Object literal may only specify known properties, and 'onError' does not exist in type 'UseStreamOptions'."}]],[1794,[{"start":15487,"length":9,"messageText":"Export declaration conflicts with exported declaration of 'ApiConfig'.","category":1,"code":2484},{"start":15500,"length":8,"messageText":"Export declaration conflicts with exported declaration of 'ApiError'.","category":1,"code":2484},{"start":15512,"length":11,"messageText":"Export declaration conflicts with exported declaration of 'ApiResponse'.","category":1,"code":2484},{"start":15527,"length":14,"messageText":"Export declaration conflicts with exported declaration of 'RequestOptions'.","category":1,"code":2484},{"start":15545,"length":10,"messageText":"Export declaration conflicts with exported declaration of 'ApiMetrics'.","category":1,"code":2484}]],[1806,[{"start":5841,"length":11,"messageText":"Cannot find name 'ChatMessage'.","category":1,"code":2304},{"start":6737,"length":10,"messageText":"Cannot find name 'FileUpload'.","category":1,"code":2304}]],[1808,[{"start":29,"length":18,"messageText":"Cannot find module '@playwright/test' or its corresponding type declarations.","category":1,"code":2307}]],[1814,[{"start":177,"length":15,"messageText":"Module '\"/mnt/d/handywriterzai/frontend/src/lib/dynamic\"' has no default export.","category":1,"code":1192}]],[1857,[{"start":754,"length":9,"messageText":"Cannot redeclare block-scoped variable 'isLoading'.","category":1,"code":2451},{"start":1908,"length":9,"messageText":"Cannot redeclare block-scoped variable 'isLoading'.","category":1,"code":2451}]],[1925,[{"start":1073,"length":18,"messageText":"Module '\"@/types/multimodal\"' has no exported member 'ProcessingProgress'.","category":1,"code":2305},{"start":6409,"length":14,"code":2339,"category":1,"messageText":"Property 'processingTime' does not exist on type 'FileProcessingEvent'."},{"start":6462,"length":8,"code":2339,"category":1,"messageText":"Property 'insights' does not exist on type 'FileProcessingEvent'."},{"start":7437,"length":18,"code":2345,"category":1,"messageText":{"messageText":"Argument of type '{ fileId: string; fileType: \"pdf\" | \"docx\" | \"youtube\" | \"txt\" | \"mp3\" | \"wav\" | \"mp4\" | \"xlsx\"; fileName: string; url: string; processingOptions: { useGeminiVision: boolean; extractCharts: boolean; identifySpeakers: boolean; preserveCitations: boolean; generateInsights: boolean; }; }[]' is not assignable to parameter of type 'MultimodalProcessingRequest[]'.","category":1,"code":2345,"next":[{"messageText":"Type '{ fileId: string; fileType: \"pdf\" | \"docx\" | \"youtube\" | \"txt\" | \"mp3\" | \"wav\" | \"mp4\" | \"xlsx\"; fileName: string; url: string; processingOptions: { useGeminiVision: boolean; extractCharts: boolean; identifySpeakers: boolean; preserveCitations: boolean; generateInsights: boolean; }; }' is not assignable to type 'MultimodalProcessingRequest'.","category":1,"code":2322,"next":[{"messageText":"Types of property 'fileType' are incompatible.","category":1,"code":2326,"next":[{"messageText":"Type '\"pdf\" | \"docx\" | \"youtube\" | \"txt\" | \"mp3\" | \"wav\" | \"mp4\" | \"xlsx\"' is not assignable to type '\"audio\" | \"video\" | \"text\" | \"pdf\" | \"docx\" | \"excel\"'.","category":1,"code":2322,"next":[{"messageText":"Type '\"youtube\"' is not assignable to type '\"audio\" | \"video\" | \"text\" | \"pdf\" | \"docx\" | \"excel\"'.","category":1,"code":2322}],"canonicalHead":{"code":2322,"messageText":"Type '{ fileId: string; fileType: \"pdf\" | \"docx\" | \"youtube\" | \"txt\" | \"mp3\" | \"wav\" | \"mp4\" | \"xlsx\"; fileName: string; url: string; processingOptions: { useGeminiVision: boolean; extractCharts: boolean; identifySpeakers: boolean; preserveCitations: boolean; generateInsights: boolean; }; }' is not assignable to type 'MultimodalProcessingRequest'."}}]}]}]}}]],[1927,[{"start":425,"length":8,"messageText":"Property 'timeline' does not exist on type '{ events: TimelineEvent[]; streamingText: string; reasoningText: string; totalCost: number; plagiarismScore: number; qualityScore: number; derivatives: { kind: string; url: string; }[]; ... 6 more ...; isConnected: boolean; }'.","category":1,"code":2339}]],[1934,[{"start":277,"length":23,"messageText":"Cannot find module '@tanstack/react-query' or its corresponding type declarations.","category":1,"code":2307}]],[1938,[{"start":1182,"length":15,"messageText":"Property 'isAuthenticated' does not exist on type 'UseDynamicContext'.","category":1,"code":2339},{"start":2243,"length":6,"code":2339,"category":1,"messageText":"Property 'avatar' does not exist on type 'UserProfile'."}]]],"affectedFilesPendingEmit":[512,513,514,515,516,518,1822,1857,1859,1814,1861,1862,1819,1863,1865,1866,1867,1874,1875,1879,1883,1876,1884,1885,1886,1825,1887,1878,1888,1852,1889,1905,1906,1849,1837,1840,1907,1850,1908,1909,1910,1911,1912,1913,1914,1915,1904,1917,1882,1839,1856,1877,1864,1838,1848,1851,1827,1844,1919,1826,1921,1922,1923,1924,1926,1927,1903,1928,1932,1916,1934,1920,1858,1902,1901,1935,1873,1818,1816,1817,1937,1843,1836,1845,1869,1855,1847,1824,1881,1821,1933,1860,1871,1853,529,1813,1841,530,1925,1812,1938,534,541,542,540,543,538,545,517,532,546,547,1793,528,544,1794,1796,1805,531,1806,533,1807,1795,511,1808],"version":"5.8.3"}


================================================
FILE: frontend/.env.example
================================================
# ===========================================
# HandyWriterz Environment Configuration
# ===========================================

# Environment
ENVIRONMENT=development
DEBUG=false
LOG_LEVEL=INFO

# API Configuration
API_HOST=0.0.0.0
API_PORT=8000
API_RELOAD=true

# Database Configuration
DATABASE_URL=postgresql://user:password@localhost:5432/handywriterz
REDIS_URL=redis://localhost:6379

# AI Provider API Keys
# LLM API Keys (replace with your real API keys)
GEMINI_API_KEY=your_gemini_api_key_here
OPENAI_API_KEY=your_openai_api_key_here
ANTHROPIC_API_KEY=your_anthropic_api_key_here
OPENROUTER_API_KEY=your_openrouter_api_key_here
PERPLEXITY_API_KEY=your_perplexity_api_key_here
DEEPSEEK_API_KEY=your_deepseek_api_key_here
QWEN_API_KEY=your_qwen_api_key_here

# Frontend Configuration
FRONTEND_URL=http://localhost:3000
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001

# Dynamic.xyz Authentication
NEXT_PUBLIC_DYNAMIC_ENVIRONMENT_ID=0ceb833c-f73e-4ba9-ab3f-4b749a88340e
DYNAMIC_PUBLIC_KEY=your_dynamic_public_key
DYNAMIC_WEBHOOK_URL=your_webhook_url
RAILWAY_TOKEN=9eb5157e-9e43-4125-9de5-9578d0bc34c2
# JWT Configuration
JWT_SECRET_KEY=your_super_secret_jwt_key_here
JWT_ALGORITHM=HS256
JWT_EXPIRATION_HOURS=24

# Payment Configuration
NEXT_PUBLIC_PAYSTACK_SECRET_KEY=sk_test_be235bf0fc040e9bc9536280dd7babe082b52de5
NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY=pk_test_293cd2139ea086618bc469a1d7d1ff893c9c9dc4

# Optional Integrations (for frontend)
NEXT_COINBASE_COMMERCE_API_KEY=0816037e-84d0-476b-aaa2-532c6e83ef9e
NEXT_PUBLIC_COINBASE_COMMERCE_API_KEY=8YjDEg09DL6BMSdtJuhKeKBO2RRe9idB
NEXT_COINBASE_COMMERCE_WEBHOOK_SECRET=ba082d16-41fb-4989-938e-92025ca00ffc
NEXT_ONCHAINKIT_API_KEY=8YjDEg09DL6BMSdtJuhKeKBO2RRe9idB

# Blockchain Configuration
BASE_RPC_URL=https://mainnet.base.org
BASE_CHAIN_ID=8453
USDC_BASE_ADDRESS=0x8bd94f446e5fd6857f1a1b4c3fb97507303b2f84

# File Storage (optional)
AWS_BUCKET_NAME=your_bucket_name
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
AWS_REGION=us-east-1

# Monitoring (optional)
SENTRY_DSN=your_sentry_dsn
APPLICATIONINSIGHTS_CONNECTION_STRING=your_app_insights_connection

# External Services (optional)
TELEGRAM_BOT_TOKEN=your_telegram_bot_token
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=handywriterz@gmail.com
SMTP_PASSWORD=d

# Frontend-specific Environment Variables
NEXT_PUBLIC_API_URL=http://localhost:3000
BACKEND_URL=http://localhost:8000

# Disable Next.js telemetry and tracing (Windows fix)
NEXT_TELEMETRY_DISABLED=1
DISABLE_OPENCOLLECTIVE=true






================================================
FILE: frontend/src/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: 0 0% 100%;
  --foreground: 0 0% 3.9%;
  --card: 0 0% 100%;
  --card-foreground: 0 0% 3.9%;
  --popover: 0 0% 100%;
  --popover-foreground: 0 0% 3.9%;
  --primary: 221.2 83.2% 53.3%;
  --primary-foreground: 0 0% 98%;
  --secondary: 0 0% 96.1%;
  --secondary-foreground: 0 0% 9%;
  --muted: 0 0% 96.1%;
  --muted-foreground: 0 0% 45.1%;
  --accent: 0 0% 96.1%;
  --accent-foreground: 0 0% 9%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;
  --border: 0 0% 89.8%;
  --input: 0 0% 89.8%;
  --ring: 221.2 83.2% 53.3%;
  --chart-1: 12 76% 61%;
  --chart-2: 173 58% 39%;
  --chart-3: 197 37% 24%;
  --chart-4: 43 74% 66%;
  --chart-5: 27 87% 67%;
  --radius: 0.5rem;
}

.dark {
  --background: 0 0% 3.9%;
  --foreground: 0 0% 98%;
  --card: 0 0% 3.9%;
  --card-foreground: 0 0% 98%;
  --popover: 0 0% 3.9%;
  --popover-foreground: 0 0% 98%;
  --primary: 217.2 91.2% 59.8%;
  --primary-foreground: 0 0% 9%;
  --secondary: 0 0% 14.9%;
  --secondary-foreground: 0 0% 98%;
  --muted: 0 0% 14.9%;
  --muted-foreground: 0 0% 63.9%;
  --accent: 0 0% 14.9%;
  --accent-foreground: 0 0% 98%;
  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 0% 98%;
  --border: 0 0% 14.9%;
  --input: 0 0% 14.9%;
  --ring: 217.2 91.2% 59.8%;
  --chart-1: 220 70% 50%;
  --chart-2: 160 60% 45%;
  --chart-3: 30 80% 55%;
  --chart-4: 280 65% 60%;
  --chart-5: 340 75% 55%;
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Light mode specific styles for chat UI */
.light {
  /* Backgrounds */
  .bg-gray-900 { @apply !bg-gray-50; }
  .bg-gray-800 { @apply !bg-white; }
  .bg-gray-700 { @apply !bg-gray-100; }
  .bg-gray-600 { @apply !bg-gray-200; }

  /* Text colors */
  .text-white { @apply !text-gray-900; }
  .text-gray-300 { @apply !text-gray-700; }
  .text-gray-400 { @apply !text-gray-600; }
  .text-gray-500 { @apply !text-gray-500; }

  /* Borders */
  .border-gray-800 { @apply !border-gray-200; }
  .border-gray-700 { @apply !border-gray-300; }
  .border-gray-600 { @apply !border-gray-400; }

  /* Hover states */
  .hover\:bg-gray-700:hover { @apply !bg-gray-100; }
  .hover\:bg-gray-800:hover { @apply !bg-gray-50; }

  /* Gradients */
  .from-gray-900 { @apply !from-gray-50; }
  .via-blue-900 { @apply !via-blue-50; }
  .to-purple-900 { @apply !to-purple-50; }

  /* Transparency adjustments */
  .bg-gray-900\/95 { @apply !bg-gray-50/95; }
  .bg-gray-800\/90 { @apply !bg-white/90; }
  .bg-gray-800\/80 { @apply !bg-white/80; }
  .bg-gray-700\/50 { @apply !bg-gray-100/50; }
}

/* Ensure smooth transitions */
* {
  @apply transition-colors duration-200;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background: rgb(75 85 99);
  border-radius: 9999px;
}

::-webkit-scrollbar-thumb:hover {
  background: rgb(107 114 128);
}

.dark ::-webkit-scrollbar-thumb {
  background: rgb(55 65 81);
}

.dark ::-webkit-scrollbar-thumb:hover {
  background: rgb(75 85 99);
}



================================================
FILE: frontend/src/app/layout.tsx
================================================
import { Inter } from 'next/font/google'
import './globals.css'
import { ThemeProvider } from '@/contexts/ThemeContext'
import { Toaster } from '@/components/ui/toaster'

const inter = Inter({ subsets: ['latin'] })

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <ThemeProvider>
          {children}
          <Toaster />
        </ThemeProvider>
      </body>
    </html>
  )
}



================================================
FILE: frontend/src/app/page.tsx
================================================
'use client';

import React from 'react';
import { useRouter } from 'next/navigation';
import { ArrowRight, Brain } from 'lucide-react';
import { Button } from '@/components/ui/button';

export default function LandingPage() {
  const router = useRouter();

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900/50 to-purple-900/50 text-white overflow-hidden">
      {/* Subtle background pattern */}
      <div className="absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg%20width=%2260%22%20height=%2260%22%20viewBox=%220%200%2060%2060%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cg%20fill=%22none%22%20fill-rule=%22evenodd%22%3E%3Cg%20fill=%22%239C92AC%22%20fill-opacity=%220.03%22%3E%3Cpath%20d=%22M36%2034v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6%2034v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6%204V0H4v4H0v2h4v4h2V6h4V4H6z%22/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')] opacity-20"></div>

      {/* Navigation - Ultra minimal */}
      <nav className="relative z-10 container mx-auto px-6 py-8">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Brain className="h-8 w-8 text-blue-400" />
            <span className="text-2xl font-bold">HandyWriterz</span>
          </div>
          <div className="flex items-center gap-6">
            <Button
              variant="ghost"
              onClick={() => router.push('/auth')}
              className="text-white/80 hover:text-white hover:bg-white/10"
            >
              Sign In
            </Button>
            <Button
              onClick={() => router.push('/chat')}
              className="bg-white text-gray-900 hover:bg-gray-100 font-medium"
            >
              Start Writing
            </Button>
          </div>
        </div>
      </nav>

      {/* Hero Section - Ultra Minimalist */}
      <section className="relative z-10 container mx-auto px-6 min-h-[calc(100vh-120px)] flex items-center justify-center">
        <div className="text-center max-w-4xl mx-auto">
          {/* Main heading with gradient */}
          <h1 className="text-5xl sm:text-6xl md:text-7xl lg:text-8xl font-bold mb-8 leading-tight">
            <span className="bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent">
              AI-powered
            </span>
            <br />
            <span className="text-white">academic writing</span>
          </h1>

          {/* Simple subtitle */}
          <p className="text-xl md:text-2xl text-gray-300 mb-12 font-light">
            30+ specialized agents. One powerful platform.
          </p>

          {/* CTA Button */}
          <Button
            size="lg"
            onClick={() => router.push('/chat')}
            className="bg-blue-600 hover:bg-blue-700 text-white text-lg px-10 py-6 rounded-full shadow-2xl shadow-blue-500/20 hover:shadow-blue-500/30 hover:scale-105 transition-all duration-300"
          >
            Start Writing Free
            <ArrowRight className="ml-3 h-5 w-5" />
          </Button>

          {/* Minimal social proof */}
          <div className="mt-16 flex items-center justify-center gap-8 text-sm text-gray-400">
            <div className="flex items-center gap-2">
              <span className="text-2xl">✨</span>
              <span>100K+ documents created</span>
            </div>
            <div className="hidden sm:block w-px h-6 bg-gray-600"></div>
            <div className="flex items-center gap-2">
              <span className="text-2xl">⚡</span>
              <span>Powered by GPT-4 & Claude</span>
            </div>
          </div>
        </div>
      </section>

      {/* Floating gradient orbs for visual interest */}
      <div className="absolute top-1/4 left-10 w-72 h-72 bg-blue-500 rounded-full mix-blend-multiply filter blur-3xl opacity-20 animate-blob"></div>
      <div className="absolute top-1/3 right-10 w-72 h-72 bg-purple-500 rounded-full mix-blend-multiply filter blur-3xl opacity-20 animate-blob animation-delay-2000"></div>
      <div className="absolute bottom-1/4 left-1/3 w-72 h-72 bg-pink-500 rounded-full mix-blend-multiply filter blur-3xl opacity-20 animate-blob animation-delay-4000"></div>

      <style jsx>{`
        @keyframes blob {
          0% {
            transform: translate(0px, 0px) scale(1);
          }
          33% {
            transform: translate(30px, -50px) scale(1.1);
          }
          66% {
            transform: translate(-20px, 20px) scale(0.9);
          }
          100% {
            transform: translate(0px, 0px) scale(1);
          }
        }
        .animate-blob {
          animation: blob 7s infinite;
        }
        .animation-delay-2000 {
          animation-delay: 2s;
        }
        .animation-delay-4000 {
          animation-delay: 4s;
        }
      `}</style>
    </div>
  );
}



================================================
FILE: frontend/src/app/api/billing/buy-credits/route.ts
================================================
import { NextResponse } from 'next/server';

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8000';

export async function POST(request: Request) {
  try {
    const requestBody = await request.json();
    const authHeader = request.headers.get('Authorization');
    
    if (!authHeader) {
      return NextResponse.json({ error: 'Authorization header required' }, { status: 401 });
    }

    const { package_id, provider, metadata } = requestBody;

    // Validate required fields
    if (!package_id || !provider) {
      return NextResponse.json({ 
        error: 'package_id and provider are required' 
      }, { status: 400 });
    }

    // Forward request to backend
    const response = await fetch(`${BACKEND_URL}/billing/buy-credits`, {
      method: 'POST',
      headers: {
        'Authorization': authHeader,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        package_id,
        provider,
        metadata: {
          frontend_version: '1.0.0',
          ...metadata
        }
      }),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      return NextResponse.json(
        { 
          success: false,
          error: errorData.detail || errorData.message || 'Credit purchase failed' 
        },
        { status: response.status }
      );
    }

    const data = await response.json();
    return NextResponse.json({
      success: true,
      payment_data: data
    });

  } catch (error) {
    console.error('Buy credits error:', error);
    return NextResponse.json(
      { 
        success: false,
        error: 'Internal server error' 
      },
      { status: 500 }
    );
  }
}


================================================
FILE: frontend/src/app/api/billing/summary/route.ts
================================================
import { NextResponse } from 'next/server';

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8000';

export async function GET(request: Request) {
  try {
    // Extract authorization header
    const authHeader = request.headers.get('Authorization');
    
    if (!authHeader) {
      return NextResponse.json({ error: 'Authorization header required' }, { status: 401 });
    }

    // Forward request to backend
    const response = await fetch(`${BACKEND_URL}/billing/summary`, {
      method: 'GET',
      headers: {
        'Authorization': authHeader,
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      // If backend fails, return mock data for now
      console.warn('Backend billing/summary failed, returning mock data');
      
      return NextResponse.json({
        plan: 'free',
        renew_date: 'N/A',
        usage_usd: 0,
        credits_remaining: 3,
        max_words: 1000,
        features: ['3 documents', 'Basic templates', 'Community support']
      });
    }

    const data = await response.json();
    return NextResponse.json(data);

  } catch (error) {
    console.error('Billing summary error:', error);
    
    // Return mock data as fallback
    return NextResponse.json({
      plan: 'free',
      renew_date: 'N/A',
      usage_usd: 0,
      credits_remaining: 3,
      max_words: 1000,
      features: ['3 documents', 'Basic templates', 'Community support']
    });
  }
}


================================================
FILE: frontend/src/app/api/billing/upgrade/route.ts
================================================
import { NextResponse } from 'next/server';

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8000';

export async function POST(request: Request) {
  try {
    const requestBody = await request.json();
    const authHeader = request.headers.get('Authorization');
    
    if (!authHeader) {
      return NextResponse.json({ error: 'Authorization header required' }, { status: 401 });
    }

    const { tier, provider, metadata } = requestBody;

    // Validate required fields
    if (!tier || !provider) {
      return NextResponse.json({ 
        error: 'tier and provider are required' 
      }, { status: 400 });
    }

    // Forward request to backend
    const response = await fetch(`${BACKEND_URL}/billing/upgrade`, {
      method: 'POST',
      headers: {
        'Authorization': authHeader,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        tier,
        provider,
        metadata: {
          frontend_version: '1.0.0',
          ...metadata
        }
      }),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      return NextResponse.json(
        { 
          success: false,
          error: errorData.detail || errorData.message || 'Upgrade request failed' 
        },
        { status: response.status }
      );
    }

    const data = await response.json();
    return NextResponse.json({
      success: true,
      payment_data: data
    });

  } catch (error) {
    console.error('Billing upgrade error:', error);
    return NextResponse.json(
      { 
        success: false,
        error: 'Internal server error' 
      },
      { status: 500 }
    );
  }
}


================================================
FILE: frontend/src/app/api/chat/route.ts
================================================
import { NextResponse } from 'next/server';

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8000';

export async function POST(request: Request) {
  try {
    const requestBody = await request.json();

    // Validate required fields
    if (!requestBody.prompt || typeof requestBody.prompt !== 'string') {
      return NextResponse.json(
        { error: 'prompt is required and must be a string' },
        { status: 400 }
      );
    }

    // Extract and validate request data
    const {
      prompt,
      mode = 'general',
      file_ids = [],
      user_params = {}
    } = requestBody;

    // Prepare payload for backend - matching the ChatRequest schema
    const backendPayload = {
      prompt,
      mode,
      file_ids: Array.isArray(file_ids) ? file_ids : [],
      user_params: {
        citationStyle: user_params.citationStyle || 'Harvard',
        wordCount: user_params.wordCount || 3000,
        model: user_params.model || 'gemini-2.0-flash-exp',
        user_id: user_params.user_id || 'anonymous',
        writeupType: mode,
        field: user_params.field || 'general',
        ...user_params
      }
    };

    console.log('Sending to backend:', backendPayload);

    // Forward request to backend chat service
    const backendResponse = await fetch(`${BACKEND_URL}/api/chat`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify(backendPayload),
    });

    const responseText = await backendResponse.text();
    console.log('Backend response:', backendResponse.status, responseText);

    if (!backendResponse.ok) {
      let errorMessage = `Backend error: ${backendResponse.status} ${backendResponse.statusText}`;

      try {
        const errorData = JSON.parse(responseText);
        errorMessage = errorData.detail || errorData.message || errorData.error || errorMessage;
      } catch {
        errorMessage = responseText || errorMessage;
      }

      return NextResponse.json(
        { error: errorMessage },
        { status: backendResponse.status }
      );
    }

    let result;
    try {
      result = JSON.parse(responseText);
    } catch (e) {
      console.error('Failed to parse backend response:', e);
      return NextResponse.json(
        { error: 'Invalid response from backend' },
        { status: 500 }
      );
    }

    // The backend returns trace_id in the response
    // Make sure we have it for streaming
    const trace_id = result.trace_id || result.conversation_id;

    if (!trace_id) {
      console.error('No trace_id in response:', result);
      return NextResponse.json(
        { error: 'Backend did not return a trace_id' },
        { status: 500 }
      );
    }

    // Return the expected format for the frontend
    return NextResponse.json({
      trace_id: trace_id,
      status: result.status || 'accepted',
      message: result.message || 'Request accepted, streaming will begin shortly',
      success: result.success !== false
    });

  } catch (error) {
    console.error('Chat API error:', error);

    if (error instanceof Error) {
      // Handle network errors
      if (error.message.includes('fetch')) {
        return NextResponse.json(
          { error: 'Unable to connect to backend service. Please ensure the backend is running on port 8000.' },
          { status: 503 }
        );
      }

      return NextResponse.json(
        { error: error.message },
        { status: 500 }
      );
    }

    return NextResponse.json(
      { error: 'An unexpected error occurred' },
      { status: 500 }
    );
  }
}



================================================
FILE: frontend/src/app/api/chat/send/route.ts
================================================
import { NextRequest } from 'next/server';

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8000';

export async function POST(request: NextRequest) {
  const body = await request.json();

  try {
    // First, make request to backend to start the chat
    const backendPayload = {
      prompt: body.content,
      mode: body.writeupType || 'general',
      file_ids: body.attachments?.filter((a: any) => a.uploaded).map((a: any) => a.url) || [],
      user_params: {
        model: 'gemini-2.0-flash-exp',
        user_id: 'demo-user',
        writeupType: body.writeupType || 'general',
        field: 'general'
      }
    };

    console.log('Starting backend chat with:', backendPayload);
    console.log('Backend URL:', BACKEND_URL);

    const chatResponse = await fetch(`${BACKEND_URL}/api/chat`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(backendPayload),
    });

    const responseText = await chatResponse.text();
    console.log('Backend response status:', chatResponse.status);
    console.log('Backend response body:', responseText);

    if (!chatResponse.ok) {
      console.error('Backend chat failed:', chatResponse.status, responseText);
      throw new Error(`Backend chat failed: ${chatResponse.status} - ${responseText}`);
    }

    let chatData;
    try {
      chatData = JSON.parse(responseText);
    } catch (e) {
      console.error('Failed to parse backend response:', responseText);
      throw new Error('Invalid JSON response from backend');
    }

    const traceId = chatData.trace_id;

    if (!traceId) {
      console.error('No trace_id in backend response:', chatData);
      throw new Error('No trace_id received from backend');
    }

    console.log('Got trace_id:', traceId, 'Now streaming from:', `${BACKEND_URL}/api/chat/stream/${traceId}`);

    // Create streaming response
    const encoder = new TextEncoder();
    const stream = new TransformStream();
    const writer = stream.writable.getWriter();

    // Start streaming from backend
    (async () => {
      try {
        await writer.write(encoder.encode('data: {"event": "connected"}\n\n'));

        // Stream from backend
        const streamResponse = await fetch(`${BACKEND_URL}/api/chat/stream/${traceId}`, {
          method: 'GET',
          headers: {
            'Accept': 'text/event-stream',
          },
        });

        if (!streamResponse.ok) {
          throw new Error(`Stream failed: ${streamResponse.status}`);
        }

        const reader = streamResponse.body?.getReader();
        const decoder = new TextDecoder();

        if (reader) {
          while (true) {
            const { done, value } = await reader.read();
            if (done) break;

            const chunk = decoder.decode(value, { stream: true });
            const lines = chunk.split('\n');

            for (const line of lines) {
              if (line.startsWith('data: ')) {
                const data = line.slice(6);
                if (data.trim() === '[DONE]') {
                  await writer.write(encoder.encode('data: [DONE]\n\n'));
                  return;
                }
                
                try {
                  const parsed = JSON.parse(data);
                  if (parsed.token || parsed.content) {
                    await writer.write(encoder.encode(`data: ${JSON.stringify({ token: parsed.token || parsed.content })}\n\n`));
                  }
                } catch (e) {
                  // If not JSON, treat as plain text token
                  if (data.trim()) {
                    await writer.write(encoder.encode(`data: ${JSON.stringify({ token: data.trim() })}\n\n`));
                  }
                }
              }
            }
          }
        }

        await writer.write(encoder.encode('data: [DONE]\n\n'));
      } catch (error) {
        console.error('Streaming error:', error);
        // Fallback to dynamic response
        const response = generateDynamicResponse(body.content, body.writeupType);
        const words = response.split(' ');

        for (let i = 0; i < words.length; i++) {
          const token = words[i] + (i < words.length - 1 ? ' ' : '');
          await writer.write(encoder.encode(`data: ${JSON.stringify({ token })}\n\n`));
          await new Promise(resolve => setTimeout(resolve, 50));
        }
        
        await writer.write(encoder.encode('data: [DONE]\n\n'));
      } finally {
        await writer.close();
      }
    })();

    return new Response(stream.readable, {
      headers: {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
      },
    });

  } catch (error) {
    console.error('Backend connection failed, using fallback:', error);
    
    // Fallback to local response if backend is unavailable
    const encoder = new TextEncoder();
    const stream = new TransformStream();
    const writer = stream.writable.getWriter();

    (async () => {
      try {
        await writer.write(encoder.encode('data: {"event": "connected"}\n\n'));
        
        const response = generateDynamicResponse(body.content, body.writeupType);
        const words = response.split(' ');

        for (let i = 0; i < words.length; i++) {
          const token = words[i] + (i < words.length - 1 ? ' ' : '');
          await writer.write(encoder.encode(`data: ${JSON.stringify({ token })}\n\n`));
          await new Promise(resolve => setTimeout(resolve, 50 + Math.random() * 50));
        }

        await writer.write(encoder.encode('data: [DONE]\n\n'));
      } catch (err) {
        console.error('Fallback streaming error:', err);
      } finally {
        await writer.close();
      }
    })();

    return new Response(stream.readable, {
      headers: {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
      },
    });
  }
}

function generateDynamicResponse(userContent: string, writeupType: string): string {
  const contentWords = userContent.toLowerCase();
  
  // Analyze user input for key topics and themes
  const hasResearch = contentWords.includes('research') || contentWords.includes('study') || contentWords.includes('analysis');
  const hasWriting = contentWords.includes('write') || contentWords.includes('essay') || contentWords.includes('article');
  const hasTechnical = contentWords.includes('technical') || contentWords.includes('code') || contentWords.includes('programming');
  const hasAcademic = contentWords.includes('academic') || contentWords.includes('dissertation') || contentWords.includes('thesis');
  
  // Generate contextual response based on writeup type and content
  if (writeupType === 'dissertation' || hasAcademic) {
    return `I'll help you develop a comprehensive academic work on this topic. Based on your request about "${userContent.slice(0, 100)}${userContent.length > 100 ? '...' : ''}", I can assist with:

## Proposed Structure

**Introduction & Background**
- Contextual framework and problem statement
- Literature review of existing research
- Research objectives and methodology

**Main Analysis**
- Detailed examination of key concepts
- Critical analysis of current approaches
- Data interpretation and findings

**Conclusions & Implications**
- Summary of key insights
- Practical applications and recommendations
- Future research directions

Would you like me to elaborate on any specific section or provide more detailed guidance for your academic work?`;
  }
  
  if (writeupType === 'report' || hasResearch) {
    return `I'll create a comprehensive report addressing your inquiry about "${userContent.slice(0, 80)}${userContent.length > 80 ? '...' : ''}". Here's my analysis:

## Executive Summary
Based on your requirements, this report examines the key aspects and provides actionable insights.

## Key Findings
• **Primary Analysis**: The core elements of your request indicate a need for thorough investigation
• **Data Insights**: Current trends and patterns suggest significant opportunities
• **Risk Assessment**: Potential challenges and mitigation strategies identified

## Recommendations
1. **Immediate Actions**: Priority steps to address your specific needs
2. **Strategic Approach**: Long-term planning considerations
3. **Implementation Timeline**: Suggested phases for optimal results

## Next Steps
I recommend focusing on the most critical aspects first while building a foundation for comprehensive implementation.

Would you like me to dive deeper into any specific area of this analysis?`;
  }
  
  if (hasTechnical) {
    return `I understand you're looking for technical assistance with "${userContent.slice(0, 100)}${userContent.length > 100 ? '...' : ''}". Let me provide a structured approach:

## Technical Analysis

**Current Situation**
Your request involves technical considerations that require careful planning and implementation.

**Recommended Approach**
- **Assessment Phase**: Evaluate current requirements and constraints
- **Design Considerations**: Architectural decisions and best practices
- **Implementation Strategy**: Step-by-step development approach
- **Testing & Validation**: Quality assurance and performance optimization

**Key Considerations**
• Scalability and performance requirements
• Security and compliance factors
• Integration with existing systems
• Maintenance and support needs

I can provide more specific technical details, code examples, or implementation guidance based on your particular requirements. What aspect would you like to explore further?`;
  }
  
  // Default response for general writing requests
  return `Thank you for your request about "${userContent.slice(0, 100)}${userContent.length > 100 ? '...' : ''}". I'm here to provide comprehensive writing assistance tailored to your specific needs.

## Understanding Your Request
Based on your input, I can help you develop this topic with:

**Content Development**
- Structured approach to your subject matter
- Research-backed insights and analysis
- Clear, engaging writing style

**Organization & Flow**
- Logical progression of ideas
- Smooth transitions between concepts
- Compelling introduction and conclusion

**Quality Enhancement**
- Professional tone and clarity
- Proper formatting and structure
- Citations and references where appropriate

## Next Steps
I'm ready to dive deeper into any specific aspect of your request. Would you like me to:
- Develop an outline for your content?
- Focus on a particular section or angle?
- Provide more detailed analysis on specific points?

Please let me know how you'd like to proceed, and I'll tailor my assistance to meet your exact requirements.`;
}



================================================
FILE: frontend/src/app/api/chat/stream/[traceId]/route.ts
================================================
import { NextRequest } from 'next/server';

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8000';

export async function GET(
  request: NextRequest,
  { params }: { params: { traceId: string } }
) {
  const { traceId } = params;

  // Create a TransformStream for SSE
  const encoder = new TextEncoder();
  const stream = new TransformStream();
  const writer = stream.writable.getWriter();

  // Connect to backend SSE endpoint
  const backendUrl = `${BACKEND_URL}/api/stream/${traceId}`;

  // Start the SSE connection to backend
  fetch(backendUrl, {
    headers: {
      'Accept': 'text/event-stream',
      'Cache-Control': 'no-cache',
    },
  })
    .then(async (response) => {
      if (!response.ok) {
        await writer.write(encoder.encode(`data: ${JSON.stringify({ type: 'error', message: 'Failed to connect to backend' })}\n\n`));
        await writer.close();
        return;
      }

      const reader = response.body?.getReader();
      if (!reader) {
        await writer.write(encoder.encode(`data: ${JSON.stringify({ type: 'error', message: 'No response body' })}\n\n`));
        await writer.close();
        return;
      }

      const decoder = new TextDecoder();
      let buffer = '';

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        buffer += decoder.decode(value, { stream: true });
        const lines = buffer.split('\n');
        buffer = lines.pop() || '';

        for (const line of lines) {
          if (line.trim()) {
            // Forward the SSE data
            await writer.write(encoder.encode(line + '\n'));
          }
        }

        // Ensure double newline for SSE format
        if (lines.length > 0) {
          await writer.write(encoder.encode('\n'));
        }
      }

      await writer.close();
    })
    .catch(async (error) => {
      console.error('SSE streaming error:', error);
      await writer.write(encoder.encode(`data: ${JSON.stringify({ type: 'error', message: error.message })}\n\n`));
      await writer.close();
    });

  // Return SSE response
  return new Response(stream.readable, {
    headers: {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive',
      'X-Accel-Buffering': 'no',
    },
  });
}



================================================
FILE: frontend/src/app/api/process-files/route.ts
================================================
import { NextResponse } from 'next/server';
import { agenticDocClient } from '@/lib/agentic-doc-client';

export async function POST(request: Request) {
  const { file_ids } = await request.json();

  if (!file_ids || !Array.isArray(file_ids)) {
    return NextResponse.json({ error: 'file_ids must be an array' }, { status: 400 });
  }

  try {
    // This is a simplified flow. In a real app, we'd get bucket/key from a DB lookup.
    // We also need to implement the async callback as per validation.md.
    const processingTasks = file_ids.map(file_id => {
        // TODO: Replace with actual bucket and key from a database lookup using file_id
        const bucket = 'handywriterz-uploads';
        const key = `user-uploads/user-123/${file_id}`;

        return agenticDocClient.processDocument({ bucket, key });
    });

    const results = await Promise.all(processingTasks);
    const task_ids = results.map(res => res.task_id);

    // TODO: Store these task_ids and wait for a callback from the service
    // before proceeding to the main chat/generate call.

    return NextResponse.json({ message: "Files are being processed", task_ids });

  } catch (error) {
    console.error('Error processing documents:', error);
    return NextResponse.json({ error: 'Failed to start file processing' }, { status: 500 });
  }
}



================================================
FILE: frontend/src/app/api/upload/route.ts
================================================
import { NextRequest, NextResponse } from 'next/server';

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8000';

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    
    // Forward the form data to the backend
    const backendResponse = await fetch(`${BACKEND_URL}/api/files`, {
      method: 'POST',
      body: formData,
    });

    if (!backendResponse.ok) {
      throw new Error(`Backend upload failed: ${backendResponse.status}`);
    }

    const result = await backendResponse.json();
    return NextResponse.json(result);

  } catch (error) {
    console.error('File upload error:', error);
    
    // Fallback - return mock file IDs
    const formData = await request.formData();
    const files = formData.getAll('files') as File[];
    
    const mockResult = {
      file_ids: files.map((file, index) => `mock-file-${file.name}-${Date.now()}-${index}`),
      message: 'Files uploaded successfully (mock)',
      success: true
    };
    
    return NextResponse.json(mockResult);
  }
}


================================================
FILE: frontend/src/app/api/writing-types/route.ts
================================================
import { NextResponse } from 'next/server';

export async function GET() {
  // Mock writing types - in production, this would come from a database
  const writingTypes = [
    { value: 'general', label: 'General' },
    { value: 'essay', label: 'Essay' },
    { value: 'report', label: 'Report' },
    { value: 'dissertation', label: 'PhD Dissertation' },
    { value: 'case_study', label: 'Case Study' },
    { value: 'market_research', label: 'Market Research' },
    { value: 'technical_report', label: 'Technical Report' },
    { value: 'presentation', label: 'Presentation' },
    { value: 'coding', label: 'Coding' },
  ];

  return NextResponse.json(writingTypes);
}



================================================
FILE: frontend/src/app/chat/page.tsx
================================================
'use client'

import { ChatPane } from '@/components/ChatPane';
import Sidebar from '@/components/Sidebar';
import { useState, useCallback } from 'react';

export default function ChatPage() {
  const [currentConversationId, setCurrentConversationId] = useState<string | null>(null);

  const handleNewChat = useCallback(() => {
    setCurrentConversationId(null);
  }, []);

  const handleSelectChat = useCallback((chatId: string) => {
    setCurrentConversationId(chatId);
  }, []);

  const handleDeleteChat = useCallback((chatId: string) => {
    if (currentConversationId === chatId) {
      handleNewChat();
    }
  }, [currentConversationId, handleNewChat]);

  const handleConversationCreate = useCallback((conversationId: string) => {
    setCurrentConversationId(conversationId);
  }, []);

  return (
    <div className="flex h-screen bg-background text-foreground overflow-hidden">
      <div className="flex-shrink-0">
        <Sidebar
          currentChatId={currentConversationId}
          onNewChat={handleNewChat}
          onSelectChat={handleSelectChat}
          onDeleteChat={handleDeleteChat}
          userId="demo-user"
        />
      </div>
      <main className="flex-1 flex flex-col min-w-0 overflow-hidden">
        <ChatPane 
          conversationId={currentConversationId || undefined} 
          onConversationCreate={handleConversationCreate}
        />
      </main>
    </div>
  );
}



================================================
FILE: frontend/src/app/dashboard/page.tsx
================================================
import React from 'react';
import AgentActivityDisplay, { AgentActivity } from '@/components/ui/AgentActivityDisplay';

const Dashboard: React.FC = () => {
  // Placeholder data - this will be replaced with real-time data from the backend
  const activities: AgentActivity[] = [
    { agentName: 'MasterOrchestrator', status: 'completed', timestamp: new Date().toISOString() },
    { agentName: 'EnhancedUserIntent', status: 'completed', timestamp: new Date().toISOString() },
    { agentName: 'GeminiSearchAgent', status: 'running', timestamp: new Date().toISOString() },
    { agentName: 'PerplexitySearchAgent', status: 'running', timestamp: new Date().toISOString() },
  ];

  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold mb-4">System Dashboard</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div>
          <h2 className="text-2xl font-semibold mb-4">Real-Time Agent Activity</h2>
          <AgentActivityDisplay activities={activities} />
        </div>
        <div>
          <h2 className="text-2xl font-semibold mb-4">Performance Metrics</h2>
          {/* Placeholder for performance charts */}
          <div className="p-4 border rounded-lg h-64 flex items-center justify-center">
            <p>Performance metrics will be displayed here.</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;


================================================
FILE: frontend/src/app/library/page.tsx
================================================
'use client'

import React, { useState, useEffect, useRef } from 'react';
import { 
  FileText, 
  Download, 
  Eye, 
  Trash2, 
  MessageSquare, 
  ArrowLeft, 
  Upload, 
  FolderPlus,
  Folder,
  FolderOpen,
  Plus,
  Search
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { useToast } from '@/components/ui/use-toast';
import { useRouter } from 'next/navigation';
import { StoredConversation } from '@/lib/conversationStore';
import { agenticDocClient } from '@/lib/agentic-doc-client';

interface LibraryFolder {
  id: string;
  name: string;
  created_at: string;
  parent_id?: string;
}

interface LibraryFile {
  id: string;
  name: string;
  type: 'conversation' | 'document';
  size: number;
  created_at: string;
  folder_id?: string;
  content?: StoredConversation;
}

export default function LibraryPage() {
  const [libraryItems, setLibraryItems] = useState<StoredConversation[]>([]);
  const [folders, setFolders] = useState<LibraryFolder[]>([
    { id: 'conversations', name: 'Conversations', created_at: new Date().toISOString() },
    { id: 'documents', name: 'Documents', created_at: new Date().toISOString() },
  ]);
  const [files, setFiles] = useState<LibraryFile[]>([]);
  const [selectedFolder, setSelectedFolder] = useState<string>('conversations');
  const [isLoading, setIsLoading] = useState(true);
  const [isUploading, setIsUploading] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();
  const router = useRouter();

  useEffect(() => {
    const loadLibraryData = async () => {
      try {
        const { ConversationStore } = await import('@/lib/conversationStore');
        const conversations = ConversationStore.getAllConversations();
        // Only show conversations with AI responses (completed conversations)
        const completedConversations = conversations.filter(
          conv => conv.message_count > 1 && conv.messages.some(m => m.type === 'ai')
        );
        setLibraryItems(completedConversations);

        // Convert conversations to library files format
        const conversationFiles: LibraryFile[] = completedConversations.map(conv => ({
          id: conv.id,
          name: conv.title,
          type: 'conversation' as const,
          size: conv.messages.reduce((acc, msg) => acc + (msg.content?.length || 0), 0) * 2,
          created_at: conv.created_at,
          folder_id: 'conversations',
          content: conv
        }));

        setFiles(conversationFiles);
      } catch (error) {
        console.error('Error loading library data:', error);
        toast({
          title: "Failed to load library",
          description: "Could not load your saved conversations.",
          variant: "destructive",
        });
      } finally {
        setIsLoading(false);
      }
    };

    loadLibraryData();
  }, [toast]);

  const handlePreview = (file: LibraryFile) => {
    if (file.type === 'conversation' && file.content) {
      router.push(`/chat?conversation=${file.id}`);
    }
  };

  const handleDownload = async (file: LibraryFile, format: 'pdf' | 'docx' | 'md' = 'pdf') => {
    try {
      if (file.type === 'conversation' && file.content) {
        // Create a simple text export of the conversation
        const content = file.content.messages
          .map(msg => `**${msg.type === 'human' ? 'You' : 'HandyWriterz'}:**\n${msg.content}\n\n`)
          .join('');
        
        const blob = new Blob([content], { type: 'text/plain' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${file.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.${format === 'md' ? 'md' : 'txt'}`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      }

      toast({
        title: "Download started",
        description: `Downloading "${file.name}"...`,
      });
    } catch (error) {
      toast({
        title: "Download failed",
        description: "Could not download the file.",
        variant: "destructive",
      });
    }
  };

  const handleDelete = async (file: LibraryFile) => {
    if (!confirm(`Are you sure you want to delete "${file.name}"?`)) return;

    try {
      if (file.type === 'conversation') {
        const { ConversationStore } = await import('@/lib/conversationStore');
        ConversationStore.deleteConversation(file.id);
        setLibraryItems(prev => prev.filter(item => item.id !== file.id));
      }
      
      setFiles(prev => prev.filter(f => f.id !== file.id));
      
      toast({
        title: "File deleted",
        description: `"${file.name}" has been removed from your library.`,
      });
    } catch (error) {
      toast({
        title: "Failed to delete",
        description: "Could not delete the file.",
        variant: "destructive",
      });
    }
  };

  const handleUpload = async (uploadFiles: FileList) => {
    if (!uploadFiles.length) return;

    setIsUploading(true);
    
    try {
      // Process each file
      for (const file of Array.from(uploadFiles)) {
        // For now, we'll just add them to the documents folder
        // In a real implementation, you'd upload to the backend
        const newFile: LibraryFile = {
          id: `upload_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          name: file.name,
          type: 'document',
          size: file.size,
          created_at: new Date().toISOString(),
          folder_id: 'documents'
        };
        
        setFiles(prev => [...prev, newFile]);
      }

      toast({
        title: "Upload successful",
        description: `${uploadFiles.length} file(s) uploaded to library.`,
      });
    } catch (error) {
      toast({
        title: "Upload failed",
        description: "Could not upload files.",
        variant: "destructive",
      });
    } finally {
      setIsUploading(false);
    }
  };

  const handleCreateFolder = () => {
    const folderName = prompt('Enter folder name:');
    if (!folderName || !folderName.trim()) return;

    const newFolder: LibraryFolder = {
      id: `folder_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      name: folderName.trim(),
      created_at: new Date().toISOString()
    };

    setFolders(prev => [...prev, newFolder]);
    toast({
      title: "Folder created",
      description: `"${folderName}" folder has been created.`,
    });
  };

  const getFileIcon = (file: LibraryFile) => {
    if (file.type === 'conversation') {
      return <MessageSquare className="h-5 w-5 text-blue-500" />;
    }
    return <FileText className="h-5 w-5 text-green-500" />;
  };

  const formatFileSize = (bytes: number) => {
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;
    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
  };

  // Filter files based on selected folder and search query
  const filteredFiles = files.filter(file => {
    const matchesFolder = file.folder_id === selectedFolder;
    const matchesSearch = searchQuery === '' || 
      file.name.toLowerCase().includes(searchQuery.toLowerCase());
    return matchesFolder && matchesSearch;
  });

  if (isLoading) {
    return (
      <div className="h-full bg-gray-900 text-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-400">Loading your library...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full bg-gray-900 text-white flex flex-col">
      {/* Header */}
      <header className="flex items-center justify-between p-4 border-b border-gray-800">
        <div className="flex items-center gap-4">
          <Button
            variant="ghost"
            onClick={() => router.push('/chat')}
            className="text-gray-400 hover:text-white hover:bg-gray-700/50"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Chat
          </Button>
          <div>
            <h1 className="text-2xl font-bold tracking-tight">My Library</h1>
            <p className="text-gray-400 text-sm">
              All your documents and conversations in one place
            </p>
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          <input
            ref={fileInputRef}
            type="file"
            multiple
            onChange={(e) => e.target.files && handleUpload(e.target.files)}
            className="hidden"
          />
          <Button
            variant="outline"
            onClick={() => fileInputRef.current?.click()}
            disabled={isUploading}
            className="border-gray-600 text-gray-300 hover:bg-gray-700 hover:text-white"
          >
            <Upload className="h-4 w-4 mr-2" />
            {isUploading ? 'Uploading...' : 'Upload'}
          </Button>
        </div>
      </header>

      {/* Two-column layout */}
      <div className="flex flex-1 overflow-hidden">
        {/* Left Sidebar - Folders */}
        <div className="w-64 border-r border-gray-800 flex flex-col">
          <div className="p-4 border-b border-gray-800">
            <div className="flex items-center justify-between mb-3">
              <h2 className="text-lg font-semibold">Folders</h2>
              <Button
                variant="ghost"
                size="icon"
                onClick={handleCreateFolder}
                className="h-8 w-8 text-gray-400 hover:text-white hover:bg-gray-700"
              >
                <Plus className="h-4 w-4" />
              </Button>
            </div>
          </div>
          
          <div className="flex-1 overflow-y-auto p-2">
            {folders.map((folder) => (
              <button
                key={folder.id}
                onClick={() => setSelectedFolder(folder.id)}
                className={`w-full flex items-center gap-3 px-3 py-2 rounded-md text-left transition-colors ${
                  selectedFolder === folder.id
                    ? 'bg-blue-600/20 text-blue-400 border border-blue-600/30'
                    : 'text-gray-300 hover:bg-gray-800'
                }`}
              >
                {selectedFolder === folder.id ? (
                  <FolderOpen className="h-4 w-4 flex-shrink-0" />
                ) : (
                  <Folder className="h-4 w-4 flex-shrink-0" />
                )}
                <span className="truncate">{folder.name}</span>
                <span className="text-xs text-gray-500 ml-auto">
                  {files.filter(f => f.folder_id === folder.id).length}
                </span>
              </button>
            ))}
          </div>
        </div>

        {/* Right Content - Files */}
        <div className="flex-1 flex flex-col">
          {/* Search and controls */}
          <div className="p-4 border-b border-gray-800">
            <div className="flex items-center gap-4">
              <div className="relative flex-1 max-w-md">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Search files..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10 bg-gray-800 border-gray-600 text-white"
                />
              </div>
              <div className="text-sm text-gray-400">
                {filteredFiles.length} items
              </div>
            </div>
          </div>

          {/* Files table */}
          <div className="flex-1 overflow-auto">
            {filteredFiles.length === 0 ? (
              <div className="text-center py-16">
                <div className="text-gray-600 mb-4">
                  {selectedFolder === 'conversations' ? (
                    <MessageSquare className="h-16 w-16 mx-auto" />
                  ) : (
                    <FileText className="h-16 w-16 mx-auto" />
                  )}
                </div>
                <h3 className="text-xl font-semibold text-gray-300 mb-2">
                  {searchQuery ? 'No files found' : 'No files in this folder'}
                </h3>
                <p className="text-gray-500 mb-6">
                  {selectedFolder === 'conversations' 
                    ? 'Start a conversation to see it saved here.'
                    : 'Upload documents to organize them here.'
                  }
                </p>
                {selectedFolder === 'conversations' ? (
                  <Button onClick={() => router.push('/chat')} className="bg-blue-600 hover:bg-blue-700">
                    Start New Conversation
                  </Button>
                ) : (
                  <Button onClick={() => fileInputRef.current?.click()} className="bg-blue-600 hover:bg-blue-700">
                    Upload Files
                  </Button>
                )}
              </div>
            ) : (
              <Table>
                <TableHeader>
                  <TableRow className="border-b-gray-700">
                    <TableHead className="w-[50px]"></TableHead>
                    <TableHead className="text-white font-semibold">Name</TableHead>
                    <TableHead className="text-white font-semibold">Created</TableHead>
                    <TableHead className="text-white font-semibold">Type</TableHead>
                    <TableHead className="text-white font-semibold">Size</TableHead>
                    <TableHead className="text-right text-white font-semibold">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredFiles.map((file) => (
                    <TableRow key={file.id} className="border-b-gray-700/50 hover:bg-gray-800/70">
                      <TableCell>{getFileIcon(file)}</TableCell>
                      <TableCell className="font-medium text-gray-200">
                        <div className="max-w-md">
                          <div className="truncate">{file.name}</div>
                          {file.type === 'conversation' && file.content?.last_message_preview && (
                            <div className="text-sm text-gray-500 truncate mt-1">
                              {file.content.last_message_preview}
                            </div>
                          )}
                        </div>
                      </TableCell>
                      <TableCell className="text-gray-400">
                        {new Date(file.created_at).toLocaleDateString()}
                      </TableCell>
                      <TableCell>
                        <Badge variant="outline" className="border-gray-600 text-gray-300">
                          {file.type === 'conversation' ? 'Conversation' : 'Document'}
                        </Badge>
                      </TableCell>
                      <TableCell className="text-gray-400">{formatFileSize(file.size)}</TableCell>
                      <TableCell className="text-right">
                        <div className="flex items-center justify-end gap-2">
                          <Button 
                            variant="ghost" 
                            size="icon" 
                            onClick={() => handlePreview(file)}
                            className="text-gray-400 hover:text-white hover:bg-gray-700/50"
                            title="Open file"
                          >
                            <Eye className="h-4 w-4" />
                          </Button>
                          <Button 
                            variant="ghost" 
                            size="icon" 
                            onClick={() => handleDownload(file)}
                            className="text-gray-400 hover:text-white hover:bg-gray-700/50"
                            title="Download file"
                          >
                            <Download className="h-4 w-4" />
                          </Button>
                          <Button 
                            variant="ghost" 
                            size="icon" 
                            onClick={() => handleDelete(file)}
                            className="text-red-500 hover:text-red-400 hover:bg-red-500/10"
                            title="Delete file"
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: frontend/src/app/originality/[traceId]/page.tsx
================================================
export default async function OriginalityPage({ params }: { params: Promise<{ traceId: string }> }) {
  const { traceId } = await params;
  
  return (
    <div>
      <h1 className="text-2xl font-bold">Originality Check</h1>
      <p>Trace ID: {traceId}</p>
    </div>
  );
}



================================================
FILE: frontend/src/app/payment/cancel/page.tsx
================================================
'use client';

import React from 'react';
import { useRouter } from 'next/navigation';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { XCircle } from 'lucide-react';

export default function PaymentCancelPage() {
  const router = useRouter();

  return (
    <div className="min-h-screen flex items-center justify-center bg-background p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div className="flex justify-center mb-4">
            <XCircle className="w-16 h-16 text-orange-600" />
          </div>
          <CardTitle className="text-2xl">Payment Cancelled</CardTitle>
          <CardDescription className="text-center">
            Your payment was cancelled. No charges have been made to your account.
          </CardDescription>
        </CardHeader>

        <CardContent className="text-center space-y-4">
          <div className="p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg">
            <p className="text-sm text-orange-800 dark:text-orange-200">
              You can try again anytime from your billing settings.
            </p>
          </div>

          <div className="flex gap-2">
            <Button
              onClick={() => router.push('/settings/billing')}
              className="flex-1"
            >
              Try Again
            </Button>
            
            <Button
              onClick={() => router.push('/chat')}
              variant="outline"
              className="flex-1"
            >
              Back to Chat
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: frontend/src/app/payment/success/page.tsx
================================================
import PaymentSuccess from '@/components/PaymentSuccess';

export default function PaymentSuccessPage() {
  return <PaymentSuccess />;
}


================================================
FILE: frontend/src/app/performance/page.tsx
================================================
'use client';

import React, { useState } from 'react';

const PerformanceBenchmark: React.FC = () => {
  const [overhead, setOverhead] = useState<number | null>(null);
  const [isTesting, setIsTesting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const runBenchmark = async () => {
    setIsTesting(true);
    setError(null);
    setOverhead(null);

    try {
      const startTime = performance.now();
      const response = await fetch('/api/analyze', {
        method: 'POST',
        body: new URLSearchParams({ message: 'Simple test query' }),
      });
      const endTime = performance.now();

      if (!response.ok) {
        throw new Error('Failed to run benchmark');
      }

      setOverhead(endTime - startTime);
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError('An unknown error occurred');
      }
    } finally {
      setIsTesting(false);
    }
  };

  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold mb-4">Routing Performance Benchmark</h1>
      <div className="flex items-center space-x-4">
        <button
          onClick={runBenchmark}
          disabled={isTesting}
          className="px-4 py-2 bg-blue-500 text-white rounded-lg disabled:bg-gray-400"
        >
          {isTesting ? 'Testing...' : 'Run Benchmark'}
        </button>
        {overhead !== null && (
          <div className="text-xl">
            Routing Overhead: <span className="font-bold">{overhead.toFixed(2)}ms</span>
          </div>
        )}
        {error && <div className="text-red-500">Error: {error}</div>}
      </div>
    </div>
  );
};

export default PerformanceBenchmark;


================================================
FILE: frontend/src/app/pricing/page.tsx
================================================
'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { 
  CheckCircle, 
  CreditCard, 
  Wallet, 
  ArrowLeft, 
  Star,
  Zap,
  Shield,
  Users
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/components/ui/use-toast';

interface PricingTier {
  id: string;
  name: string;
  price_usd: number;
  credits: number;
  features: string[];
  max_words: number;
  icon: React.ReactNode;
  description: string;
  popular?: boolean;
}

interface CreditPackage {
  id: string;
  name: string;
  credits: number;
  price_usd: number;
  bonus_credits?: number;
  description: string;
}

const PRICING_TIERS: PricingTier[] = [
  {
    id: 'free',
    name: 'Free',
    price_usd: 0,
    credits: 500,
    features: [
      'AI Writing Agents',
      'Document Generation',
      'Research Assistant',
      'Citation Manager',
      'Basic Templates',
      'File Upload (PDF, DOC)',
      'Export to PDF/DOCX/MD',
      'Basic Formatting',
      'Grammar Check',
      'Plagiarism Detection'
    ],
    max_words: 1000,
    icon: <Star className="w-6 h-6" />,
    description: '500 credits per month'
  },
  {
    id: 'plus',
    name: 'Plus',
    price_usd: 20,
    credits: 5000,
    features: [
      'AI Writing Agents',
      'Advanced Document Generation',
      'Research Assistant',
      'Citation Manager',
      'Premium Templates',
      'File Upload (PDF, DOC)',
      'Export to PDF/DOCX/MD',
      'Advanced Formatting',
      'Grammar & Style Check',
      'Plagiarism Detection',
      'Priority Support',
      'Collaboration Tools'
    ],
    max_words: 5000,
    icon: <Zap className="w-6 h-6" />,
    description: '5,000 credits per month',
    popular: true
  },
  {
    id: 'enterprise',
    name: 'Enterprise',
    price_usd: 0,
    credits: 0,
    features: [
      'AI Writing Agents',
      'Enterprise Document Generation',
      'Research Assistant',
      'Citation Manager',
      'Custom Templates',
      'Unlimited File Upload',
      'Export to PDF/DOCX/MD',
      'Advanced Formatting',
      'Grammar & Style Check',
      'Advanced Plagiarism Detection',
      'Priority Support',
      'Team Collaboration',
      'Custom Integrations',
      'White-label Options'
    ],
    max_words: 50000,
    icon: <Shield className="w-6 h-6" />,
    description: 'Custom credits per month'
  }
];

const CREDIT_PACKAGES: CreditPackage[] = [
  {
    id: 'credits_2000',
    name: '2,000',
    credits: 2000,
    price_usd: 9.20,
    description: '✓'
  },
  {
    id: 'credits_4000',
    name: '4,000',
    credits: 4000,
    price_usd: 18.40,
    description: ''
  },
  {
    id: 'credits_10000',
    name: '10,000',
    credits: 10000,
    price_usd: 46,
    description: ''
  },
  {
    id: 'credits_20000',
    name: '20,000',
    credits: 20000,
    price_usd: 92,
    description: ''
  },
  {
    id: 'credits_40000',
    name: '40,000',
    credits: 40000,
    price_usd: 184,
    description: ''
  }
];

export default function PricingPage() {
  const [selectedProvider, setSelectedProvider] = useState<'paystack' | 'coinbase_commerce'>('paystack');
  const [loading, setLoading] = useState<string | null>(null);
  const [currentPlan, setCurrentPlan] = useState<string>('free');
  const { toast } = useToast();
  const router = useRouter();

  useEffect(() => {
    // Load current plan from billing summary
    const loadCurrentPlan = async () => {
      try {
        const response = await fetch('/api/billing/summary', {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('access_token')}`
          }
        });
        if (response.ok) {
          const data = await response.json();
          setCurrentPlan(data.plan || 'free');
        }
      } catch (error) {
        console.error('Error loading current plan:', error);
      }
    };

    loadCurrentPlan();
  }, []);

  const handleUpgrade = async (tierId: string) => {
    if (tierId === 'free' || tierId === currentPlan || loading) return;
    
    setLoading(tierId);
    try {
      const response = await fetch('/api/billing/upgrade', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('access_token')}`
        },
        body: JSON.stringify({
          tier: tierId,
          provider: selectedProvider,
          metadata: {
            source: 'pricing_page',
            upgrade_from: currentPlan
          }
        })
      });

      const data = await response.json();

      if (data.success) {
        // Redirect to payment page
        window.open(data.payment_data.payment_url, '_blank');
        toast({
          title: "Payment initiated",
          description: "You'll be redirected to complete the payment.",
        });
      } else {
        toast({
          title: "Payment failed",
          description: data.message || "Failed to create payment. Please try again.",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('Error creating payment:', error);
      toast({
        title: "Error",
        description: "Unable to process payment. Please check your connection.",
        variant: "destructive",
      });
    } finally {
      setLoading(null);
    }
  };

  const handleBuyCredits = async (packageId: string) => {
    if (loading) return;
    
    setLoading(packageId);
    try {
      const response = await fetch('/api/billing/buy-credits', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('access_token')}`
        },
        body: JSON.stringify({
          package_id: packageId,
          provider: selectedProvider,
          metadata: {
            source: 'pricing_page'
          }
        })
      });

      const data = await response.json();

      if (data.success) {
        window.open(data.payment_data.payment_url, '_blank');
        toast({
          title: "Payment initiated",
          description: "You'll be redirected to complete the payment.",
        });
      } else {
        toast({
          title: "Payment failed",
          description: data.message || "Failed to create payment. Please try again.",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('Error buying credits:', error);
      toast({
        title: "Error",
        description: "Unable to process payment. Please check your connection.",
        variant: "destructive",
      });
    } finally {
      setLoading(null);
    }
  };

  const isCurrentTier = (tierId: string) => tierId === currentPlan;

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      {/* Header */}
      <header className="border-b border-gray-800 p-4">
        <div className="max-w-7xl mx-auto flex items-center gap-4">
          <Button
            variant="ghost"
            onClick={() => router.push('/chat')}
            className="text-gray-400 hover:text-white hover:bg-gray-700/50"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Chat
          </Button>
          <div>
            <h1 className="text-2xl font-bold tracking-tight">Pricing</h1>
            <p className="text-gray-400 text-sm">Choose the plan that works best for you</p>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 py-12">
        {/* Payment Provider Selection */}
        <div className="text-center mb-12">
          <h2 className="text-lg font-semibold mb-4">Choose Payment Method</h2>
          <div className="flex justify-center gap-4">
            <Button
              variant={selectedProvider === 'paystack' ? 'default' : 'outline'}
              onClick={() => setSelectedProvider('paystack')}
              className="flex items-center gap-2"
            >
              <CreditCard className="w-4 h-4" />
              Card Payment
            </Button>
            <Button
              variant={selectedProvider === 'coinbase_commerce' ? 'default' : 'outline'}
              onClick={() => setSelectedProvider('coinbase_commerce')}
              className="flex items-center gap-2"
            >
              <Wallet className="w-4 h-4" />
              Crypto Payment
            </Button>
          </div>
        </div>

        {/* Subscription Plans */}
        <section className="mb-16">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold mb-4">Subscription Plans</h2>
            <p className="text-gray-400 text-lg">
              Get unlimited access with our monthly subscription plans
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {PRICING_TIERS.map((tier) => (
              <Card 
                key={tier.id} 
                className={`relative bg-gray-800 border-gray-700 ${
                  tier.popular ? 'ring-2 ring-blue-500 scale-105' : ''
                } ${isCurrentTier(tier.id) ? 'ring-2 ring-green-500' : ''}`}
              >
                {tier.popular && (
                  <Badge className="absolute -top-3 left-1/2 transform -translate-x-1/2 bg-blue-600 text-white">
                    Most Popular
                  </Badge>
                )}
                
                {isCurrentTier(tier.id) && (
                  <Badge className="absolute -top-3 left-1/2 transform -translate-x-1/2 bg-green-600 text-white">
                    Current Plan
                  </Badge>
                )}

                <CardHeader className="text-center pb-4">
                  <div className="w-12 h-12 mx-auto mb-4 flex items-center justify-center bg-blue-600/20 rounded-full text-blue-400">
                    {tier.icon}
                  </div>
                  <CardTitle className="text-2xl">{tier.name}</CardTitle>
                  <div className="text-4xl font-bold text-white mb-2">
                    ${tier.price_usd}
                    {tier.price_usd > 0 && <span className="text-lg font-normal text-gray-400">/month</span>}
                  </div>
                  <CardDescription className="text-gray-400">
                    {tier.description}
                  </CardDescription>
                </CardHeader>

                <CardContent>
                  <div className="text-center mb-6">
                    <div className="text-2xl font-bold text-blue-400">{tier.credits}</div>
                    <div className="text-sm text-gray-400">credits per month</div>
                    <div className="text-sm text-gray-500 mt-1">
                      Up to {tier.max_words.toLocaleString()} words per document
                    </div>
                  </div>

                  <ul className="space-y-3 mb-8">
                    {tier.features.map((feature, index) => (
                      <li key={index} className="flex items-start gap-3 text-sm">
                        <CheckCircle className="w-4 h-4 text-green-500 flex-shrink-0 mt-0.5" />
                        <span className="text-gray-300">{feature}</span>
                      </li>
                    ))}
                  </ul>

                  <Button
                    className="w-full"
                    variant={isCurrentTier(tier.id) ? 'secondary' : (tier.popular ? 'default' : 'outline')}
                    disabled={isCurrentTier(tier.id) || loading === tier.id}
                    onClick={() => handleUpgrade(tier.id)}
                  >
                    {loading === tier.id ? 'Processing...' : 
                     isCurrentTier(tier.id) ? 'Current Plan' :
                     tier.id === 'free' ? 'Get Started Free' : 
                     `Upgrade to ${tier.name}`}
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </section>

        {/* Credit Packages */}
        <section>
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold mb-4">Credit Packages</h2>
            <p className="text-gray-400 text-lg">
              Top up your account with additional credits as needed
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {CREDIT_PACKAGES.map((pkg) => (
              <Card key={pkg.id} className="bg-gray-800 border-gray-700 text-center">
                <CardHeader>
                  <CardTitle className="text-xl">{pkg.name}</CardTitle>
                  <div className="text-3xl font-bold text-blue-400">
                    {pkg.credits}
                    {pkg.bonus_credits && (
                      <span className="text-sm text-green-400"> +{pkg.bonus_credits}</span>
                    )}
                  </div>
                  <div className="text-sm text-gray-400">credits</div>
                  <div className="text-2xl font-bold text-white">
                    ${pkg.price_usd}
                  </div>
                  <CardDescription className="text-gray-400">
                    {pkg.description}
                  </CardDescription>
                </CardHeader>

                <CardContent>
                  {pkg.bonus_credits && (
                    <div className="mb-4 p-2 bg-green-600/20 rounded-lg">
                      <div className="text-green-400 text-sm font-medium">
                        +{pkg.bonus_credits} Bonus Credits!
                      </div>
                    </div>
                  )}

                  <Button
                    className="w-full"
                    variant="outline"
                    disabled={loading === pkg.id}
                    onClick={() => handleBuyCredits(pkg.id)}
                  >
                    {loading === pkg.id ? 'Processing...' : 'Buy Credits'}
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </section>

        {/* FAQ Section */}
        <section className="mt-16 bg-gray-800/50 rounded-lg p-8">
          <h3 className="text-2xl font-bold text-center mb-8">Frequently Asked Questions</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div>
              <h4 className="font-semibold mb-2 text-white">How do credits work?</h4>
              <p className="text-gray-400 text-sm">
                Each document generation uses credits based on length and complexity. Credits reset monthly for subscriptions 
                and never expire for one-time purchases.
              </p>
            </div>
            
            <div>
              <h4 className="font-semibold mb-2 text-white">Can I change my plan anytime?</h4>
              <p className="text-gray-400 text-sm">
                Yes! You can upgrade or downgrade your plan at any time. Changes take effect 
                immediately with prorated billing.
              </p>
            </div>
            
            <div>
              <h4 className="font-semibold mb-2 text-white">What payment methods do you accept?</h4>
              <p className="text-gray-400 text-sm">
                We accept all major credit cards via Paystack and cryptocurrency payments 
                (USDC, BTC, ETH) via Coinbase Commerce.
              </p>
            </div>
            
            <div>
              <h4 className="font-semibold mb-2 text-white">Is there a free trial?</h4>
              <p className="text-gray-400 text-sm">
                Yes! Our Free plan includes 500 credits per month forever. No credit card required 
                to get started.
              </p>
            </div>
          </div>
        </section>
      </div>
    </div>
  );
}


================================================
FILE: frontend/src/app/profile/page.tsx
================================================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import {
  User,
  Mail,
  Wallet,
  CreditCard,
  FileText,
  Trophy,
  Settings,
  LogOut,
  ChevronRight,
  Download,
  Share2
} from 'lucide-react';
import Sidebar from '@/components/Sidebar';
import { ThemeSwitcher } from '@/components/ThemeSwitcher';

interface UserStats {
  documentsCreated: number;
  totalWords: number;
  avgQualityScore: number;
  creditsUsed: number;
  creditsRemaining: number;
}

export default function ProfilePage() {
  const router = useRouter();
  const user = { id: "demo-user", email: "demo@example.com", wallet: null };
const isLoading = false;
const isAuthenticated = true;
const logout = async () => {};
  const [userStats, setUserStats] = useState<UserStats>({
    documentsCreated: 12,
    totalWords: 45000,
    avgQualityScore: 92,
    creditsUsed: 37,
    creditsRemaining: 463
  });

  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      router.push('/auth');
    }
  }, [isAuthenticated, isLoading, router]);

  if (isLoading) {
    return (
      <div className="flex h-screen bg-gray-900 text-white items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-400">Loading...</p>
        </div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return null;
  }

  const handleLogout = async () => {
    await logout();
    router.push('/');
  };

  return (
    <div className="flex h-screen bg-gray-900 text-white">
      <Sidebar
        currentChatId={null}
        onNewChat={() => router.push('/chat')}
        onSelectChat={() => {}}
        onDeleteChat={() => {}}
        userId={user?.id}
      />

      <main className="flex-1 overflow-y-auto">
        <div className="max-w-6xl mx-auto p-6">
          {/* Header */}
          <div className="flex items-center justify-between mb-8">
            <h1 className="text-3xl font-bold">Profile</h1>
            <div className="flex items-center gap-4">
              <ThemeSwitcher />
              <Button
                variant="outline"
                onClick={() => router.push('/settings')}
                className="border-gray-700 hover:bg-gray-800"
              >
                <Settings className="h-4 w-4 mr-2" />
                Settings
              </Button>
              <Button
                variant="destructive"
                onClick={handleLogout}
              >
                <LogOut className="h-4 w-4 mr-2" />
                Logout
              </Button>
            </div>
          </div>

          {/* User Info Card */}
          <Card className="bg-gray-800 border-gray-700 mb-6">
            <CardContent className="p-6">
              <div className="flex items-start gap-6">
                <Avatar className="h-24 w-24">
                  <AvatarImage src={`https://api.dicebear.com/7.x/avataaars/svg?seed=${user?.email}`} />
                  <AvatarFallback className="bg-blue-600 text-white text-2xl">
                    {user?.email?.charAt(0).toUpperCase() || 'U'}
                  </AvatarFallback>
                </Avatar>

                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-2">
                    <h2 className="text-2xl font-bold">{user?.email || 'User'}</h2>
                    <Badge className="bg-blue-600 text-white">Pro</Badge>
                  </div>

                  <div className="grid grid-cols-2 gap-4 text-sm text-gray-400">
                    <div className="flex items-center gap-2">
                      <Mail className="h-4 w-4" />
                      <span>{user?.email || 'demo@example.com'}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Wallet className="h-4 w-4" />
                      <span className="font-mono text-xs">
                        {user?.wallet ? `${user.wallet.slice(0, 6)}...${user.wallet.slice(-4)}` : 'No wallet connected'}
                      </span>
                    </div>
                  </div>
                </div>

                <div className="text-right">
                  <div className="text-3xl font-bold text-blue-400">{userStats.creditsRemaining}</div>
                  <div className="text-sm text-gray-400">Credits remaining</div>
                  <Button
                    size="sm"
                    className="mt-2 bg-blue-600 hover:bg-blue-700"
                    onClick={() => router.push('/pricing')}
                  >
                    <CreditCard className="h-3 w-3 mr-1" />
                    Buy Credits
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Stats Overview */}
          <div className="grid grid-cols-4 gap-4 mb-6">
            <Card className="bg-gray-800 border-gray-700">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-400">Documents</p>
                    <p className="text-2xl font-bold">{userStats.documentsCreated}</p>
                  </div>
                  <FileText className="h-8 w-8 text-blue-400" />
                </div>
              </CardContent>
            </Card>

            <Card className="bg-gray-800 border-gray-700">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-400">Total Words</p>
                    <p className="text-2xl font-bold">{userStats.totalWords.toLocaleString()}</p>
                  </div>
                  <FileText className="h-8 w-8 text-green-400" />
                </div>
              </CardContent>
            </Card>

            <Card className="bg-gray-800 border-gray-700">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-400">Avg. Quality</p>
                    <p className="text-2xl font-bold">{userStats.avgQualityScore}%</p>
                  </div>
                  <Trophy className="h-8 w-8 text-yellow-400" />
                </div>
              </CardContent>
            </Card>

            <Card className="bg-gray-800 border-gray-700">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-400">Credits Used</p>
                    <p className="text-2xl font-bold">{userStats.creditsUsed}</p>
                  </div>
                  <CreditCard className="h-8 w-8 text-purple-400" />
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Recent Documents */}
          <Card className="bg-gray-800 border-gray-700">
            <CardHeader>
              <CardTitle>Recent Documents</CardTitle>
              <CardDescription>Your latest generated documents</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {[
                  { title: 'AI in Healthcare: A Comprehensive Analysis', type: 'Research Paper', date: '2 hours ago', words: 3500 },
                  { title: 'Market Research: Sustainable Energy Solutions', type: 'Report', date: '1 day ago', words: 2800 },
                  { title: 'PhD Dissertation: Quantum Computing Applications', type: 'Dissertation', date: '3 days ago', words: 12000 },
                ].map((doc, index) => (
                  <div key={index} className="flex items-center justify-between p-4 bg-gray-900 rounded-lg hover:bg-gray-850 transition-colors cursor-pointer">
                    <div className="flex items-center gap-4">
                      <FileText className="h-10 w-10 text-blue-400" />
                      <div>
                        <h4 className="font-semibold">{doc.title}</h4>
                        <div className="flex items-center gap-4 text-sm text-gray-400">
                          <span>{doc.type}</span>
                          <span>•</span>
                          <span>{doc.words.toLocaleString()} words</span>
                          <span>•</span>
                          <span>{doc.date}</span>
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button size="sm" variant="ghost" className="hover:bg-gray-700">
                        <Download className="h-4 w-4" />
                      </Button>
                      <Button size="sm" variant="ghost" className="hover:bg-gray-700">
                        <Share2 className="h-4 w-4" />
                      </Button>
                      <ChevronRight className="h-4 w-4 text-gray-500" />
                    </div>
                  </div>
                ))}
              </div>

              <Button
                variant="outline"
                className="w-full mt-4 border-gray-700 hover:bg-gray-800"
                onClick={() => router.push('/library')}
              >
                View All Documents
              </Button>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  );
}



================================================
FILE: frontend/src/app/routing/page.tsx
================================================
'use client';

import React, { useEffect, useState } from 'react';

interface RoutingStats {
  total_requests: number;
  simple_requests: number;
  advanced_requests: number;
  hybrid_requests: number;
  average_complexity: number;
}

const RoutingDashboard: React.FC = () => {
  const [stats, setStats] = useState<RoutingStats | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await fetch('/api/status');
        if (!response.ok) {
          throw new Error('Failed to fetch routing stats');
        }
        const data = await response.json();
        setStats(data.routing.statistics);
      } catch (err) {
        if (err instanceof Error) {
          setError(err.message);
        } else {
          setError('An unknown error occurred');
        }
      }
    };

    fetchStats();
    const interval = setInterval(fetchStats, 5000); // Refresh every 5 seconds

    return () => clearInterval(interval);
  }, []);

  if (error) {
    return <div className="p-8 text-red-500">Error: {error}</div>;
  }

  if (!stats) {
    return <div className="p-8">Loading routing statistics...</div>;
  }

  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold mb-4">Routing Dashboard</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
        <div className="p-4 border rounded-lg">
          <h2 className="text-xl font-semibold">Total Requests</h2>
          <p className="text-3xl">{stats.total_requests}</p>
        </div>
        <div className="p-4 border rounded-lg">
          <h2 className="text-xl font-semibold">Simple Requests</h2>
          <p className="text-3xl">{stats.simple_requests}</p>
        </div>
        <div className="p-4 border rounded-lg">
          <h2 className="text-xl font-semibold">Advanced Requests</h2>
          <p className="text-3xl">{stats.advanced_requests}</p>
        </div>
        <div className="p-4 border rounded-lg">
          <h2 className="text-xl font-semibold">Hybrid Requests</h2>
          <p className="text-3xl">{stats.hybrid_requests}</p>
        </div>
        <div className="p-4 border rounded-lg col-span-full">
          <h2 className="text-xl font-semibold">Average Complexity</h2>
          <p className="text-3xl">{stats.average_complexity.toFixed(2)}</p>
        </div>
      </div>
    </div>
  );
};

export default RoutingDashboard;


================================================
FILE: frontend/src/app/settings/page.tsx
================================================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';

import { useTheme } from '@/contexts/ThemeContext';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Separator } from '@/components/ui/separator';
import {
  ArrowLeft,
  Moon,
  Sun,
  Monitor,
  Bell,
  Shield,
  CreditCard,
  User,
  Palette,
  Globe,
  FileText,
  Download
} from 'lucide-react';
import Sidebar from '@/components/Sidebar';

export default function SettingsPage() {
  const router = useRouter();
  const user = { id: "demo-user" };
  const { theme, setTheme } = useTheme();

  const [notifications, setNotifications] = useState({
    email: true,
    push: false,
    marketing: false
  });

  const [preferences, setPreferences] = useState({
    language: 'en',
    citationStyle: 'Harvard',
    autoSave: true,
    showReasoning: true
  });

  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      router.push('/auth');
    }
  }, [isAuthenticated, isLoading, router]);

  if (isLoading) {
    return (
      <div className="flex h-screen bg-gray-900 text-white items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-400">Loading...</p>
        </div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return null;
  }

  return (
    <div className="flex h-screen bg-gray-900 text-white">
      <Sidebar
        currentChatId={null}
        onNewChat={() => router.push('/chat')}
        onSelectChat={() => {}}
        onDeleteChat={() => {}}
        userId={user?.id}
      />

      <main className="flex-1 overflow-y-auto">
        <div className="max-w-4xl mx-auto p-6">
          {/* Header */}
          <div className="flex items-center gap-4 mb-8">
            <Button
              variant="ghost"
              size="icon"
              onClick={() => router.back()}
              className="hover:bg-gray-800"
            >
              <ArrowLeft className="h-5 w-5" />
            </Button>
            <h1 className="text-3xl font-bold">Settings</h1>
          </div>

          {/* Appearance Settings */}
          <Card className="bg-gray-800 border-gray-700 mb-6">
            <CardHeader>
              <div className="flex items-center gap-2">
                <Palette className="h-5 w-5 text-blue-400" />
                <CardTitle>Appearance</CardTitle>
              </div>
              <CardDescription>Customize how HandyWriterz looks</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div>
                <Label className="text-base mb-4 block">Theme</Label>
                <RadioGroup value={theme} onValueChange={(value: any) => setTheme(value)}>
                  <div className="flex items-center space-x-2 mb-3">
                    <RadioGroupItem value="light" id="light" />
                    <Label htmlFor="light" className="flex items-center gap-2 cursor-pointer">
                      <Sun className="h-4 w-4" />
                      Light
                    </Label>
                  </div>
                  <div className="flex items-center space-x-2 mb-3">
                    <RadioGroupItem value="dark" id="dark" />
                    <Label htmlFor="dark" className="flex items-center gap-2 cursor-pointer">
                      <Moon className="h-4 w-4" />
                      Dark
                    </Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="system" id="system" />
                    <Label htmlFor="system" className="flex items-center gap-2 cursor-pointer">
                      <Monitor className="h-4 w-4" />
                      System
                    </Label>
                  </div>
                </RadioGroup>
              </div>
            </CardContent>
          </Card>

          {/* Notifications */}
          <Card className="bg-gray-800 border-gray-700 mb-6">
            <CardHeader>
              <div className="flex items-center gap-2">
                <Bell className="h-5 w-5 text-blue-400" />
                <CardTitle>Notifications</CardTitle>
              </div>
              <CardDescription>Manage your notification preferences</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="email-notif" className="text-base">Email notifications</Label>
                  <p className="text-sm text-gray-400">Receive updates about your documents</p>
                </div>
                <Switch
                  id="email-notif"
                  checked={notifications.email}
                  onCheckedChange={(checked) => setNotifications({...notifications, email: checked})}
                />
              </div>
              <Separator className="bg-gray-700" />
              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="push-notif" className="text-base">Push notifications</Label>
                  <p className="text-sm text-gray-400">Get notified in your browser</p>
                </div>
                <Switch
                  id="push-notif"
                  checked={notifications.push}
                  onCheckedChange={(checked) => setNotifications({...notifications, push: checked})}
                />
              </div>
              <Separator className="bg-gray-700" />
              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="marketing-notif" className="text-base">Marketing emails</Label>
                  <p className="text-sm text-gray-400">New features and special offers</p>
                </div>
                <Switch
                  id="marketing-notif"
                  checked={notifications.marketing}
                  onCheckedChange={(checked) => setNotifications({...notifications, marketing: checked})}
                />
              </div>
            </CardContent>
          </Card>

          {/* Writing Preferences */}
          <Card className="bg-gray-800 border-gray-700 mb-6">
            <CardHeader>
              <div className="flex items-center gap-2">
                <FileText className="h-5 w-5 text-blue-400" />
                <CardTitle>Writing Preferences</CardTitle>
              </div>
              <CardDescription>Default settings for your documents</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="auto-save" className="text-base">Auto-save</Label>
                  <p className="text-sm text-gray-400">Automatically save your work</p>
                </div>
                <Switch
                  id="auto-save"
                  checked={preferences.autoSave}
                  onCheckedChange={(checked) => setPreferences({...preferences, autoSave: checked})}
                />
              </div>
              <Separator className="bg-gray-700" />
              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="show-reasoning" className="text-base">Show AI reasoning</Label>
                  <p className="text-sm text-gray-400">Display agent thought process</p>
                </div>
                <Switch
                  id="show-reasoning"
                  checked={preferences.showReasoning}
                  onCheckedChange={(checked) => setPreferences({...preferences, showReasoning: checked})}
                />
              </div>
            </CardContent>
          </Card>

          {/* Account Actions */}
          <Card className="bg-gray-800 border-gray-700">
            <CardHeader>
              <div className="flex items-center gap-2">
                <Shield className="h-5 w-5 text-blue-400" />
                <CardTitle>Account</CardTitle>
              </div>
              <CardDescription>Manage your account settings</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <Button
                variant="outline"
                className="w-full justify-start border-gray-700 hover:bg-gray-700"
                onClick={() => router.push('/settings/billing')}
              >
                <CreditCard className="h-4 w-4 mr-2" />
                Billing & Subscription
              </Button>
              <Button
                variant="outline"
                className="w-full justify-start border-gray-700 hover:bg-gray-700"
                onClick={() => router.push('/settings/security')}
              >
                <Shield className="h-4 w-4 mr-2" />
                Security & Privacy
              </Button>
              <Button
                variant="outline"
                className="w-full justify-start border-gray-700 hover:bg-gray-700"
              >
                <Download className="h-4 w-4 mr-2" />
                Export Data
              </Button>
              <Separator className="bg-gray-700" />
              <Button
                variant="destructive"
                className="w-full"
              >
                Delete Account
              </Button>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  );
}



================================================
FILE: frontend/src/app/settings/billing/page.tsx
================================================
"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

// Mock data fetching functions
const fetchBillingSummary = async () => ({
  plan: "Pro",
  renew_date: "2025-08-17",
  usage_usd: 42.5,
  plan_limit_usd: 100,
});

const fetchPaymentMethods = async () => [
  { id: "pm_123", brand: "Visa", last4: "4242", type: "card" },
  { id: "cw_456", brand: "USDC", last4: "a1b2", type: "crypto" },
];

const fetchInvoices = async () => [
  { id: "in_123", pdf_url: "/invoices/in_123.pdf", total: 50.0, date: "2025-07-17" },
  { id: "in_456", pdf_url: "/invoices/in_456.pdf", total: 50.0, date: "2025-06-17" },
];

import BillingPanel from "@/components/BillingPanel";

export default function BillingPage() {
  return (
    <div>
      <h1 className="text-2xl font-bold">Billing</h1>
      <p className="text-muted-foreground">Manage your billing and subscription.</p>
      <div className="mt-6">
        <BillingPanel />
      </div>
    </div>
  );
}



================================================
FILE: frontend/src/app/settings/general/page.tsx
================================================
"use client";

import { useState } from "react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { ThemeSelector } from "@/components/ThemeSelector";
import { LocaleSelect } from "@/components/LocaleSelect";

export default function GeneralSettingsPage() {
  const [name, setName] = useState("Jane Doe");
  const [avatar, setAvatar] = useState("/avatars/jane_doe.png");

  const handleAvatarUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setAvatar(URL.createObjectURL(e.target.files[0]));
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold">General Settings</h1>
        <p className="text-muted-foreground">
          Manage your account settings and preferences.
        </p>
      </div>
      <div className="space-y-4">
        <div className="flex items-center space-x-4">
          <Avatar className="h-16 w-16">
            <AvatarImage src={avatar} />
            <AvatarFallback>JD</AvatarFallback>
          </Avatar>
          <Input type="file" onChange={handleAvatarUpload} className="max-w-xs" />
        </div>
        <div className="space-y-2">
          <Label htmlFor="name">Name</Label>
          <Input
            id="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="max-w-sm"
          />
        </div>
        <ThemeSelector />
        <div className="space-y-2">
          <Label>Language</Label>
          <LocaleSelect />
        </div>
        <Button>Save Changes</Button>
      </div>
    </div>
  );
}



================================================
FILE: frontend/src/app/settings/security/page.tsx
================================================
export default function SecurityPage() {
  return (
    <div>
      <h1 className="text-2xl font-bold">Security</h1>
      <p>Manage your account security settings.</p>
    </div>
  );
}



================================================
FILE: frontend/src/app/settings/usage/page.tsx
================================================
export default function UsagePage() {
  return (
    <div>
      <h1 className="text-2xl font-bold">Usage</h1>
      <p>View your usage statistics.</p>
    </div>
  );
}



================================================
FILE: frontend/src/app/test/page.tsx
================================================
export default function TestPage() {
  return (
    <div>
      <h1>Test Page</h1>
      <p>This is a minimal test page</p>
    </div>
  )
}


================================================
FILE: frontend/src/components/ActivityTimeline.tsx
================================================
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
} from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  Loader2,
  Activity,
  Info,
  Search,
  TextSearch,
  Brain,
  Pen,
  ChevronDown,
  ChevronUp,
} from "lucide-react";
import { useEffect, useState } from "react";

export interface ProcessedEvent {
  title: string;
  data: any;
}

interface ActivityTimelineProps {
  processedEvents: ProcessedEvent[];
  isLoading: boolean;
}

export function ActivityTimeline({
  processedEvents,
  isLoading,
}: ActivityTimelineProps) {
  const [isTimelineCollapsed, setIsTimelineCollapsed] =
    useState<boolean>(false);
  const getEventIcon = (title: string, index: number) => {
    if (index === 0 && isLoading && processedEvents.length === 0) {
      return <Loader2 className="h-4 w-4 text-neutral-400 animate-spin" />;
    }
    if (title.toLowerCase().includes("generating")) {
      return <TextSearch className="h-4 w-4 text-neutral-400" />;
    } else if (title.toLowerCase().includes("thinking")) {
      return <Loader2 className="h-4 w-4 text-neutral-400 animate-spin" />;
    } else if (title.toLowerCase().includes("reflection")) {
      return <Brain className="h-4 w-4 text-neutral-400" />;
    } else if (title.toLowerCase().includes("research")) {
      return <Search className="h-4 w-4 text-neutral-400" />;
    } else if (title.toLowerCase().includes("finalizing")) {
      return <Pen className="h-4 w-4 text-neutral-400" />;
    }
    return <Activity className="h-4 w-4 text-neutral-400" />;
  };

  useEffect(() => {
    if (!isLoading && processedEvents.length !== 0) {
      setIsTimelineCollapsed(true);
    }
  }, [isLoading, processedEvents]);

  return (
    <Card className="border-none rounded-lg bg-neutral-700 max-h-96">
      <CardHeader>
        <CardDescription className="flex items-center justify-between">
          <div
            className="flex items-center justify-start text-sm w-full cursor-pointer gap-2 text-neutral-100"
            onClick={() => setIsTimelineCollapsed(!isTimelineCollapsed)}
          >
            Research
            {isTimelineCollapsed ? (
              <ChevronDown className="h-4 w-4 mr-2" />
            ) : (
              <ChevronUp className="h-4 w-4 mr-2" />
            )}
          </div>
        </CardDescription>
      </CardHeader>
      {!isTimelineCollapsed && (
        <ScrollArea className="max-h-96 overflow-y-auto">
          <CardContent>
            {isLoading && processedEvents.length === 0 && (
              <div className="relative pl-8 pb-4">
                <div className="absolute left-3 top-3.5 h-full w-0.5 bg-neutral-800" />
                <div className="absolute left-0.5 top-2 h-5 w-5 rounded-full bg-neutral-800 flex items-center justify-center ring-4 ring-neutral-900">
                  <Loader2 className="h-3 w-3 text-neutral-400 animate-spin" />
                </div>
                <div>
                  <p className="text-sm text-neutral-300 font-medium">
                    Searching...
                  </p>
                </div>
              </div>
            )}
            {processedEvents.length > 0 ? (
              <div className="space-y-0">
                {processedEvents.map((eventItem, index) => (
                  <div key={index} className="relative pl-8 pb-4">
                    {index < processedEvents.length - 1 ||
                    (isLoading && index === processedEvents.length - 1) ? (
                      <div className="absolute left-3 top-3.5 h-full w-0.5 bg-neutral-600" />
                    ) : null}
                    <div className="absolute left-0.5 top-2 h-6 w-6 rounded-full bg-neutral-600 flex items-center justify-center ring-4 ring-neutral-700">
                      {getEventIcon(eventItem.title, index)}
                    </div>
                    <div>
                      <p className="text-sm text-neutral-200 font-medium mb-0.5">
                        {eventItem.title}
                      </p>
                      <p className="text-xs text-neutral-300 leading-relaxed">
                        {typeof eventItem.data === "string"
                          ? eventItem.data
                          : Array.isArray(eventItem.data)
                          ? (eventItem.data as string[]).join(", ")
                          : JSON.stringify(eventItem.data)}
                      </p>
                    </div>
                  </div>
                ))}
                {isLoading && processedEvents.length > 0 && (
                  <div className="relative pl-8 pb-4">
                    <div className="absolute left-0.5 top-2 h-5 w-5 rounded-full bg-neutral-600 flex items-center justify-center ring-4 ring-neutral-700">
                      <Loader2 className="h-3 w-3 text-neutral-400 animate-spin" />
                    </div>
                    <div>
                      <p className="text-sm text-neutral-300 font-medium">
                        Searching...
                      </p>
                    </div>
                  </div>
                )}
              </div>
            ) : !isLoading ? ( // Only show "No activity" if not loading and no events
              <div className="flex flex-col items-center justify-center h-full text-neutral-500 pt-10">
                <Info className="h-6 w-6 mb-3" />
                <p className="text-sm">No activity to display.</p>
                <p className="text-xs text-neutral-600 mt-1">
                  Timeline will update during processing.
                </p>
              </div>
            ) : null}
          </CardContent>
        </ScrollArea>
      )}
    </Card>
  );
}



================================================
FILE: frontend/src/components/AgentActivityStream.tsx
================================================
import React from 'react';
import { TimelineEvent } from '@/hooks/useStream';
import { CheckCircle, Clock, AlertCircle, FileText, DollarSign, Shield, Download } from 'lucide-react';

interface AgentActivityStreamProps {
  events: TimelineEvent[];
  totalCost?: number;
  plagiarismScore?: number;
  qualityScore?: number;
  derivatives?: { kind: string; url: string }[];
}

export const AgentActivityStream: React.FC<AgentActivityStreamProps> = ({ 
  events, 
  totalCost, 
  plagiarismScore, 
  qualityScore,
  derivatives = []
}) => {
  const getEventIcon = (event: TimelineEvent) => {
    switch (event.type) {
      case 'node_finished':
        return <CheckCircle className="w-4 h-4 text-green-400" />;
      case 'node_started':
        return <Clock className="w-4 h-4 text-blue-400 animate-spin" />;
      case 'error':
        return <AlertCircle className="w-4 h-4 text-red-400" />;
      case 'format_done':
        return <FileText className="w-4 h-4 text-purple-400" />;
      case 'plagiarism_score':
        return <Shield className="w-4 h-4 text-orange-400" />;
      case 'derivative_ready':
        return <Download className="w-4 h-4 text-cyan-400" />;
      default:
        return <div className="w-4 h-4 rounded-full bg-gray-400" />;
    }
  };

  const getEventColor = (event: TimelineEvent) => {
    switch (event.type) {
      case 'node_finished':
        return 'border-green-400';
      case 'node_started':
        return 'border-blue-400';
      case 'error':
        return 'border-red-400';
      case 'format_done':
        return 'border-purple-400';
      case 'plagiarism_score':
        return 'border-orange-400';
      case 'derivative_ready':
        return 'border-cyan-400';
      default:
        return 'border-gray-600';
    }
  };

  const getEventTitle = (event: TimelineEvent) => {
    switch (event.type) {
      case 'node_started':
        return `Starting ${event.name}`;
      case 'node_finished':
        return `Completed ${event.name}`;
      case 'search_result':
        return `Found ${event.payload?.count || 0} sources`;
      case 'embedding_done':
        return `Processed ${event.payload?.chunks || 0} chunks`;
      case 'format_done':
        return 'Document formatted';
      case 'plagiarism_score':
        return `Originality: ${event.payload?.score || 0}%`;
      case 'derivative_ready':
        return `${event.payload?.kind || 'Asset'} ready`;
      case 'workflow_finished':
        return 'Workflow completed';
      case 'error':
        return 'Error occurred';
      default:
        return event.name || 'Unknown event';
    }
  };

  const getEventDescription = (event: TimelineEvent) => {
    switch (event.type) {
      case 'node_finished':
        return event.tokens ? `${event.tokens} tokens` : '';
      case 'search_result':
        return `${event.payload?.agent || 'Agent'} search`;
      case 'embedding_done':
        return `File: ${event.payload?.file || 'Unknown'}`;
      case 'plagiarism_score':
        const score = event.payload?.score || 0;
        return score > 15 ? 'Review needed' : 'Acceptable';
      case 'derivative_ready':
        return 'Ready for download';
      case 'workflow_finished':
        return `Quality: ${event.payload?.quality || 0}%`;
      case 'error':
        return event.error || 'Unknown error';
      default:
        return event.payload?.message || '';
    }
  };

  return (
    <div className="p-4 bg-gray-800 border-t border-gray-700">
      <div className="flex items-center justify-between mb-4">
        <h3 className="font-semibold text-white flex items-center gap-2">
          <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
          Agent Activity
        </h3>
        
        {/* Cost and Quality Display */}
        <div className="flex items-center gap-4 text-sm">
          {totalCost && (
            <div className="flex items-center gap-1 text-green-400">
              <DollarSign className="w-3 h-3" />
              <span>${totalCost.toFixed(2)}</span>
            </div>
          )}
          
          {qualityScore && (
            <div className="flex items-center gap-1 text-blue-400">
              <span>Quality: {qualityScore}%</span>
            </div>
          )}
          
          {plagiarismScore !== undefined && (
            <div className={`flex items-center gap-1 ${plagiarismScore > 15 ? 'text-red-400' : 'text-green-400'}`}>
              <Shield className="w-3 h-3" />
              <span>{plagiarismScore}%</span>
            </div>
          )}
        </div>
      </div>

      {/* Events Timeline */}
      <div className="space-y-2 max-h-64 overflow-y-auto">
        {events.slice(-10).map((event, index) => (
          <div key={index} className={`flex items-start gap-3 p-3 rounded-lg border-l-2 ${getEventColor(event)} bg-gray-750`}>
            <div className="flex-shrink-0 mt-0.5">
              {getEventIcon(event)}
            </div>
            
            <div className="flex-grow min-w-0">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-white truncate">
                  {getEventTitle(event)}
                </span>
                <span className="text-xs text-gray-400">
                  {new Date(event.timestamp).toLocaleTimeString()}
                </span>
              </div>
              
              {getEventDescription(event) && (
                <p className="text-xs text-gray-400 mt-1">
                  {getEventDescription(event)}
                </p>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* Derivatives */}
      {derivatives.length > 0 && (
        <div className="mt-4 pt-4 border-t border-gray-700">
          <h4 className="text-sm font-medium text-white mb-2">Available Downloads</h4>
          <div className="flex flex-wrap gap-2">
            {derivatives.map((derivative, index) => (
              <a
                key={index}
                href={derivative.url}
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center gap-1 px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white text-xs rounded-full transition-colors"
              >
                <Download className="w-3 h-3" />
                {derivative.kind}
              </a>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};


================================================
FILE: frontend/src/components/BillingPanel.tsx
================================================
"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import PaymentDialog from "./PaymentDialog";

interface BillingSummary {
  plan: string;
  renew_date: string;
  usage_usd: number;
  credits_remaining: number;
  max_words: number;
  features: string[];
}

interface PaymentMethod {
  id: string;
  brand: string;
  last4: string;
  type: string;
}

interface Invoice {
  id: string;
  pdf_url: string;
  total: number;
  date: string;
}

// API functions to fetch data from backend
const fetchBillingSummary = async (): Promise<BillingSummary> => {
  try {
    const response = await fetch('/api/billing/summary', {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
      }
    });
    if (response.ok) {
      return await response.json();
    }
  } catch (error) {
    console.error('Error fetching billing summary:', error);
  }
  
  // Fallback mock data
  return {
    plan: "free",
    renew_date: "N/A",
    usage_usd: 0,
    credits_remaining: 3,
    max_words: 1000,
    features: ["3 documents", "Basic templates", "Community support"]
  };
};

const fetchPaymentMethods = async (): Promise<PaymentMethod[]> => {
  try {
    const response = await fetch('/api/billing/methods', {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
      }
    });
    if (response.ok) {
      return await response.json();
    }
  } catch (error) {
    console.error('Error fetching payment methods:', error);
  }
  
  return [
    { id: "paystack_card", brand: "Paystack", last4: "Card", type: "fiat" },
    { id: "coinbase_crypto", brand: "Coinbase", last4: "USDC", type: "crypto" }
  ];
};

const fetchInvoices = async (): Promise<Invoice[]> => {
  try {
    const response = await fetch('/api/billing/invoices', {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
      }
    });
    if (response.ok) {
      return await response.json();
    }
  } catch (error) {
    console.error('Error fetching invoices:', error);
  }
  
  return [];
};

export default function BillingPanel() {
  const [summary, setSummary] = useState<BillingSummary | null>(null);
  const [methods, setMethods] = useState<PaymentMethod[]>([]);
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [showPaymentDialog, setShowPaymentDialog] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadData = async () => {
      setLoading(true);
      try {
        const [summaryData, methodsData, invoicesData] = await Promise.all([
          fetchBillingSummary(),
          fetchPaymentMethods(),
          fetchInvoices()
        ]);
        
        setSummary(summaryData);
        setMethods(methodsData);
        setInvoices(invoicesData);
      } catch (error) {
        console.error('Error loading billing data:', error);
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, []);

  if (loading) {
    return <div className="flex items-center justify-center p-8">Loading...</div>;
  }

  if (!summary) {
    return <div className="text-center p-8">Unable to load billing information</div>;
  }

  const creditsUsed = summary.credits_remaining < 3 ? 3 - summary.credits_remaining : 0;
  const creditProgress = creditsUsed > 0 ? (creditsUsed / 3) * 100 : 0;

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle>Billing Summary</CardTitle>
          <Button onClick={() => setShowPaymentDialog(true)}>
            Upgrade Plan
          </Button>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <p className="text-sm text-muted-foreground">Current Plan</p>
              <Badge variant={summary.plan === 'free' ? 'secondary' : 'default'}>
                {summary.plan.charAt(0).toUpperCase() + summary.plan.slice(1)}
              </Badge>
            </div>
            
            <div>
              <p className="text-sm text-muted-foreground">Next Renewal</p>
              <p className="text-lg font-semibold">{summary.renew_date}</p>
            </div>
            
            <div>
              <p className="text-sm text-muted-foreground">Credits Remaining</p>
              <Progress value={(summary.credits_remaining / 3) * 100} className="h-2" />
              <p className="text-sm text-muted-foreground mt-2">
                {summary.credits_remaining} credits remaining
              </p>
            </div>

            <div>
              <p className="text-sm text-muted-foreground">Monthly Usage</p>
              <p className="text-lg font-semibold">${summary.usage_usd.toFixed(2)}</p>
            </div>

            <div>
              <p className="text-sm text-muted-foreground">Plan Features</p>
              <ul className="text-sm space-y-1 mt-1">
                {summary.features.map((feature, index) => (
                  <li key={index} className="flex items-center gap-2">
                    <span className="w-1.5 h-1.5 bg-primary rounded-full"></span>
                    {feature}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Payment Methods</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {methods.length > 0 ? (
              methods.map((method) => (
                <div key={method.id} className="flex items-center justify-between p-3 border rounded-lg">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-muted rounded flex items-center justify-center">
                      {method.type === 'crypto' ? '₿' : '💳'}
                    </div>
                    <div>
                      <p className="font-medium">{method.brand}</p>
                      <p className="text-sm text-muted-foreground">
                        {method.type === 'crypto' ? 'Crypto Wallet' : `Card ending in ${method.last4}`}
                      </p>
                    </div>
                  </div>
                  <Badge variant="outline">{method.type}</Badge>
                </div>
              ))
            ) : (
              <p className="text-muted-foreground">No payment methods configured</p>
            )}
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Invoice History</CardTitle>
        </CardHeader>
        <CardContent>
          {invoices.length > 0 ? (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Date</TableHead>
                  <TableHead>Amount</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Download</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {invoices.map((invoice) => (
                  <TableRow key={invoice.id}>
                    <TableCell>{new Date(invoice.date).toLocaleDateString()}</TableCell>
                    <TableCell>${invoice.total.toFixed(2)}</TableCell>
                    <TableCell>
                      <Badge variant="default">Paid</Badge>
                    </TableCell>
                    <TableCell>
                      <Button variant="ghost" size="sm" asChild>
                        <a href={invoice.pdf_url} target="_blank" rel="noopener noreferrer">
                          Download PDF
                        </a>
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          ) : (
            <p className="text-muted-foreground">No invoices available</p>
          )}
        </CardContent>
      </Card>

      <PaymentDialog 
        open={showPaymentDialog}
        onOpenChange={setShowPaymentDialog}
        currentTier={summary.plan}
      />
    </div>
  );
}



================================================
FILE: frontend/src/components/ChatHeader.tsx
================================================
'use client'

import React from 'react';
import { Download, Share, MoreHorizontal } from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

interface ChatHeaderProps {
  conversationId?: string | null;
  conversationTitle?: string;
  onExport?: (format: 'pdf' | 'docx' | 'md') => void;
  onShare?: () => void;
}

export function ChatHeader({ 
  conversationId, 
  conversationTitle, 
  onExport, 
  onShare 
}: ChatHeaderProps) {
  const handleExport = async (format: 'pdf' | 'docx' | 'md') => {
    if (!conversationId) return;
    
    try {
      if (onExport) {
        onExport(format);
      } else {
        // Default export implementation
        const response = await fetch(`/api/export/${conversationId}?format=${format}`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('access_token')}`
          }
        });
        
        if (response.ok) {
          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `conversation-${conversationId}.${format}`;
          document.body.appendChild(a);
          a.click();
          window.URL.revokeObjectURL(url);
          document.body.removeChild(a);
        } else {
          throw new Error('Export failed');
        }
      }
    } catch (error) {
      console.error('Export error:', error);
      alert('Export failed. Please try again.');
    }
  };

  const handleShare = () => {
    if (onShare) {
      onShare();
    } else {
      // Default share implementation
      if (navigator.share && conversationId) {
        navigator.share({
          title: conversationTitle || 'HandyWriterz Conversation',
          url: `${window.location.origin}/chat/${conversationId}`,
        }).catch(console.error);
      } else {
        // Fallback to clipboard
        const url = `${window.location.origin}/chat/${conversationId}`;
        navigator.clipboard.writeText(url).then(() => {
          alert('Link copied to clipboard!');
        }).catch(() => {
          alert('Could not copy link. Please try again.');
        });
      }
    }
  };

  if (!conversationId) {
    return null; // Don't show header for welcome screen
  }

  return (
    <div className="flex items-center justify-between px-6 py-3 border-b border-gray-700 bg-gray-900">
      <div className="flex-1">
        <h1 className="text-lg font-medium text-white truncate">
          {conversationTitle || 'Conversation'}
        </h1>
      </div>
      
      <div className="flex items-center gap-2">
        {/* Export Menu */}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button
              variant="ghost"
              size="sm"
              className="text-gray-300 hover:text-white hover:bg-gray-800"
            >
              <Download className="h-4 w-4 mr-2" />
              Export
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="bg-gray-800 border-gray-600">
            <DropdownMenuItem 
              onClick={() => handleExport('pdf')}
              className="text-gray-300 hover:bg-gray-700 cursor-pointer"
            >
              📄 Export as PDF
            </DropdownMenuItem>
            <DropdownMenuItem 
              onClick={() => handleExport('docx')}
              className="text-gray-300 hover:bg-gray-700 cursor-pointer"
            >
              📝 Export as DOCX
            </DropdownMenuItem>
            <DropdownMenuItem 
              onClick={() => handleExport('md')}
              className="text-gray-300 hover:bg-gray-700 cursor-pointer"
            >
              📋 Export as Markdown
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>

        {/* Share Button */}
        <Button
          onClick={handleShare}
          variant="ghost"
          size="sm"
          className="text-gray-300 hover:text-white hover:bg-gray-800"
        >
          <Share className="h-4 w-4 mr-2" />
          Share
        </Button>

        {/* More Options */}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button
              variant="ghost"
              size="sm"
              className="text-gray-300 hover:text-white hover:bg-gray-800 p-2"
            >
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="bg-gray-800 border-gray-600">
            <DropdownMenuItem className="text-gray-300 hover:bg-gray-700">
              Rename conversation
            </DropdownMenuItem>
            <DropdownMenuItem className="text-gray-300 hover:bg-gray-700">
              Archive conversation
            </DropdownMenuItem>
            <DropdownMenuSeparator className="bg-gray-600" />
            <DropdownMenuItem className="text-red-400 hover:bg-gray-700">
              Delete conversation
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </div>
  );
}


================================================
FILE: frontend/src/components/ChatHistory.tsx
================================================
interface ChatHistoryProps {
  history: any[];
  onSelectConversation: (conversationId: string) => void;
}

export const ChatHistory: React.FC<ChatHistoryProps> = ({ history, onSelectConversation }) => {
  return (
    <div className="h-full">
      <div className="p-4 bg-neutral-700 rounded-lg mb-4">
        <h3 className="font-bold text-neutral-100 mb-4">Chat History</h3>
        <div className="space-y-2">
          {history.length === 0 ? (
            <div className="text-center text-neutral-400 py-8">
              No conversations yet
            </div>
          ) : (
            history.map((item) => (
              <div 
                key={item.id} 
                className="p-3 bg-neutral-600 rounded-md cursor-pointer hover:bg-neutral-500 transition-colors"
                onClick={() => onSelectConversation(item.id)}
              >
                <p className="font-medium text-neutral-100 truncate">{item.title}</p>
                <p className="text-xs text-neutral-400 mt-1">{new Date(item.created_at).toLocaleString()}</p>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
};


================================================
FILE: frontend/src/components/ChatMessagesView.tsx
================================================
import { Message } from "@/types";
import { InputForm } from "./InputForm";
import { AgentActivityStream } from "./AgentActivityStream";
import { ProcessedEvent } from "./ActivityTimeline";
import { ScrollArea } from "./ui/scroll-area";
import { DownloadMenu } from "./DownloadMenu";
import { TimelineEvent } from "@/hooks/useStream";

interface ChatMessagesViewProps {
  messages: Message[];
  isLoading: boolean;
  scrollAreaRef: React.RefObject<HTMLDivElement>;
  onSubmit: (inputValue: string, writeupType: string, model: string, fileIds: string[]) => void;
  onCancel: () => void;
  liveActivityEvents: TimelineEvent[];
  historicalActivities: Record<string, ProcessedEvent[]>;
  traceId?: string | null;
  totalCost?: number;
  plagiarismScore?: number;
  qualityScore?: number;
  derivatives?: { kind: string; url: string }[];
}

export const ChatMessagesView: React.FC<ChatMessagesViewProps> = ({
  messages,
  isLoading,
  scrollAreaRef,
  onSubmit,
  onCancel,
  liveActivityEvents,
  historicalActivities,
  traceId,
  totalCost,
  plagiarismScore,
  qualityScore,
  derivatives = [],
}) => {
  return (
    <div className="h-full flex flex-col bg-gray-900">
      <ScrollArea className="flex-grow p-6" ref={scrollAreaRef}>
        <div className="space-y-6 max-w-4xl mx-auto">
          {messages.map((msg, index) => (
            <div key={index} className={`flex ${msg.type === 'human' ? 'justify-end' : 'justify-start'}`}>
              <div className={`max-w-[80%] ${msg.type === 'human' ? 'ml-auto' : 'mr-auto'}`}>
                <div className={`p-4 rounded-2xl ${
                  msg.type === 'human' 
                    ? 'bg-blue-600 text-white' 
                    : 'bg-gray-800 text-gray-100 border border-gray-700'
                }`}>
                  <div className="whitespace-pre-wrap break-words">
                    {typeof msg.content === 'string' ? msg.content : JSON.stringify(msg.content)}
                  </div>
                  {msg.type === 'ai' && traceId && derivatives.length > 0 && (
                    <div className="mt-3 pt-3 border-t border-gray-600">
                      <DownloadMenu
                        traceId={traceId}
                        derivatives={derivatives}
                        plagiarismScore={plagiarismScore}
                        qualityScore={qualityScore}
                        onOriginalityCheck={() => {
                          // Navigate to originality workbench
                          window.open(`/originality/${traceId}`, '_blank');
                        }}
                      />
                    </div>
                  )}
                </div>
                {msg.type === 'human' && (
                  <div className="text-xs text-gray-400 mt-1 text-right">
                    You
                  </div>
                )}
                {msg.type === 'ai' && (
                  <div className="text-xs text-gray-400 mt-1">
                    HandyWriterz
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </ScrollArea>
      {isLoading && (
        <div className="border-t border-gray-700 bg-gray-800/50">
          <AgentActivityStream 
            events={liveActivityEvents}
            totalCost={totalCost}
            plagiarismScore={plagiarismScore}
            qualityScore={qualityScore}
            derivatives={derivatives}
          />
        </div>
      )}
      <div className="border-t border-gray-700 bg-gray-900">
        <InputForm
          onSubmit={onSubmit}
          isLoading={isLoading}
          onCancel={onCancel}
          hasHistory={messages.length > 0}
        />
      </div>
    </div>
  );
};



================================================
FILE: frontend/src/components/ChatPane.tsx
================================================
'use client';

import React, { useState, useCallback, useRef, useEffect } from 'react';
import { Composer } from './Composer/Composer';
import { MessageBubble } from './MessageBubble';
import { useChatStream } from '@/lib/useChatStream';
import { ScrollArea } from '@/components/ui/scroll-area';
import { cn } from '@/lib/utils';
import { v4 as uuidv4 } from 'uuid';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date | string;
  attachments?: Array<{
    url: string;
    mime: string;
    name: string;
    size: number;
  }>;
  writeupType?: string;
}

interface ChatPaneProps {
  conversationId?: string;
  className?: string;
  onConversationCreate?: (conversationId: string) => void;
}

export function ChatPane({ conversationId, className, onConversationCreate }: ChatPaneProps) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [streamingMessageId, setStreamingMessageId] = useState<string | null>(null);
  const [currentConversationId, setCurrentConversationId] = useState<string | undefined>(conversationId);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { isStreaming, startStream, stopStream } = useChatStream();

  // Load messages when conversation changes
  useEffect(() => {
    console.log('ChatPane: conversationId changed from', currentConversationId, 'to', conversationId);
    
    if (conversationId !== currentConversationId) {
      setStreamingMessageId(null);
      setCurrentConversationId(conversationId);
      
      if (conversationId) {
        // Load existing conversation
        console.log('Loading conversation:', conversationId);
        import('@/lib/conversationStore').then(({ ConversationStore }) => {
          const conversation = ConversationStore.getConversation(conversationId);
          console.log('Loaded conversation:', conversation);
          if (conversation && conversation.messages) {
            setMessages(conversation.messages);
          } else {
            setMessages([]);
          }
        });
      } else {
        // New conversation
        console.log('New conversation - clearing messages');
        setMessages([]);
      }
    }
  }, [conversationId, currentConversationId]);

  // Auto-scroll to bottom when new messages arrive
  const scrollToBottom = useCallback(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages, scrollToBottom]);

  const handleSend = useCallback(async (payload: {
    conversationId: string;
    author: 'user';
    content: string;
    writeupType: string;
    attachments?: Array<{
      url: string;
      mime: string;
      name: string;
      size: number;
    }>;
  }) => {
    // Prevent sending if already streaming
    if (isStreaming) {
      return;
    }

    // Stop any existing stream
    stopStream();

    // Add user message
    const userMessage: Message = {
      id: uuidv4(),
      role: 'user',
      content: payload.content,
      timestamp: new Date(),
      attachments: payload.attachments,
      writeupType: payload.writeupType,
    };

    // Create assistant message placeholder
    const assistantMessageId = uuidv4();
    const assistantMessage: Message = {
      id: assistantMessageId,
      role: 'assistant',
      content: '',
      timestamp: new Date(),
    };

    // Generate conversation ID if this is a new conversation
    const actualConversationId = conversationId || uuidv4();
    
    // Add both messages at once to prevent race conditions
    const newMessages = [...messages, userMessage, assistantMessage];
    setMessages(newMessages);
    setStreamingMessageId(assistantMessageId);

    // Save to conversation store
    import('@/lib/conversationStore').then(({ ConversationStore }) => {
      if (!conversationId) {
        // Create new conversation
        ConversationStore.createNewConversation(actualConversationId, userMessage);
        // Notify parent component of new conversation
        onConversationCreate?.(actualConversationId);
        // Update the conversation ID in parent component
        if (payload.conversationId !== actualConversationId) {
          payload.conversationId = actualConversationId;
        }
      } else {
        // Update existing conversation
        ConversationStore.updateConversationWithMessage(actualConversationId, newMessages);
      }
    });

    // Start streaming
    try {
      await startStream('/api/chat/send', payload, {
        onToken: (token) => {
          setMessages(prev => {
            const updated = prev.map(msg =>
              msg.id === assistantMessageId
                ? { ...msg, content: msg.content + token }
                : msg
            );
            
            // Save updated messages to store
            import('@/lib/conversationStore').then(({ ConversationStore }) => {
              ConversationStore.updateConversationWithMessage(actualConversationId, updated);
            });
            
            return updated;
          });
        },
        onComplete: () => {
          setStreamingMessageId(null);
        },
        onError: (error) => {
          console.error('Stream error:', error);
          setStreamingMessageId(null);
          // Update the assistant message with error
          setMessages(prev => {
            const updated = prev.map(msg =>
              msg.id === assistantMessageId
                ? { ...msg, content: 'Sorry, an error occurred while processing your request.' }
                : msg
            );
            
            // Save error message to store
            import('@/lib/conversationStore').then(({ ConversationStore }) => {
              ConversationStore.updateConversationWithMessage(actualConversationId, updated);
            });
            
            return updated;
          });
        },
      });
    } catch (error) {
      console.error('Failed to start stream:', error);
      setStreamingMessageId(null);
      setMessages(prev =>
        prev.map(msg =>
          msg.id === assistantMessageId
            ? { ...msg, content: 'Sorry, an error occurred while processing your request.' }
            : msg
        )
      );
    }
  }, [isStreaming, startStream, stopStream]);

  return (
    <div className={cn("h-full flex flex-col", className)}>
      {/* Centered chat interface like ChatGPT */}
      <div className="flex-1 flex items-center justify-center px-4 overflow-hidden">
        <div className="w-full max-w-4xl h-full flex flex-col">
          {messages.length === 0 ? (
            <div className="flex-1 flex items-center justify-center">
              <div className="w-full">
                <div className="text-center text-muted-foreground mb-8">
                  <h2 className="text-2xl font-semibold mb-2">What are you working on?</h2>
                  <p className="text-sm">Start a conversation to get help with your writing</p>
                </div>
                <div className="w-full max-w-3xl mx-auto">
                  <Composer
                    conversationId={conversationId || uuidv4()}
                    onSend={handleSend}
                    disabled={isStreaming}
                  />
                </div>
              </div>
            </div>
          ) : (
            <>
              <div className="flex-1 overflow-hidden">
                <ScrollArea ref={scrollAreaRef} className="h-full [&>div>div]:!pr-6" style={{ scrollbarGutter: 'stable' }}>
                  <div className="py-8 space-y-6 pr-4">
                    {messages.map((message) => (
                      <MessageBubble
                        key={message.id}
                        message={{
                          id: message.id,
                          type: message.role === 'user' ? 'human' : 'ai',
                          content: message.content,
                          timestamp: message.timestamp instanceof Date 
                            ? message.timestamp.toISOString() 
                            : typeof message.timestamp === 'string' 
                              ? message.timestamp 
                              : new Date().toISOString(),
                        }}
                        isLast={message.id === messages[messages.length - 1]?.id}
                      />
                    ))}
                    <div ref={messagesEndRef} />
                  </div>
                </ScrollArea>
              </div>
              
              <div className="flex-shrink-0 pt-4">
                <Composer
                  conversationId={conversationId || uuidv4()}
                  onSend={handleSend}
                  disabled={isStreaming}
                />
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
}



================================================
FILE: frontend/src/components/ChatSidebar.tsx
================================================
'use client'

import { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { Search, Plus, MessageSquare, Library, Settings, User, ChevronDown, MoreHorizontal, Edit, Trash } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

interface Conversation {
  id: string;
  title: string;
  created_at: string;
  updated_at: string;
  message_count: number;
  last_message_preview?: string;
}

interface ChatSidebarProps {
  currentChatId?: string | null;
  onNewChat: () => void;
  onSelectChat: (chatId: string) => void;
  onDeleteChat: (chatId: string) => void;
  userId?: string;
}

export function ChatSidebar({ 
  currentChatId, 
  onNewChat, 
  onSelectChat, 
  onDeleteChat,
  userId = "demo-user"
}: ChatSidebarProps) {
  const router = useRouter();
  const [searchQuery, setSearchQuery] = useState('');
  const [conversations, setConversations] = useState<Conversation[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Load conversations from local storage
  useEffect(() => {
    const loadConversations = () => {
      setIsLoading(true);
      setError(null);
      
      try {
        // Import the conversation store dynamically to avoid SSR issues
        import('@/lib/conversationStore').then(({ ConversationStore }) => {
          const storedConversations = ConversationStore.getAllConversations();
          setConversations(storedConversations);
          setIsLoading(false);
        });
      } catch (error) {
        console.error('Error loading conversations:', error);
        setError('Failed to load chat history');
        setConversations([]);
        setIsLoading(false);
      }
    };

    loadConversations();
  }, [userId]);

  // Refresh conversations from local storage
  const fetchConversations = useCallback(async () => {
    if (isLoading) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      const { ConversationStore } = await import('@/lib/conversationStore');
      const storedConversations = ConversationStore.getAllConversations();
      setConversations(storedConversations);
    } catch (error) {
      console.error('Error loading conversations:', error);
      setError('Failed to load chat history');
      setConversations([]);
    } finally {
      setIsLoading(false);
    }
  }, [isLoading]);

  // Filter conversations based on search query
  const filteredConversations = conversations.filter(conv =>
    conv.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    conv.last_message_preview?.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const formatTimestamp = (timestamp: string) => {
    try {
      const date = new Date(timestamp);
      const now = new Date();
      const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);
      
      if (diffInHours < 1) {
        return 'Just now';
      } else if (diffInHours < 24) {
        return `${Math.floor(diffInHours)} hour${Math.floor(diffInHours) !== 1 ? 's' : ''} ago`;
      } else if (diffInHours < 48) {
        return 'Yesterday';
      } else {
        return date.toLocaleDateString();
      }
    } catch {
      return 'Unknown';
    }
  };

  const handleDeleteConversation = useCallback(async (conversationId: string) => {
    try {
      const { ConversationStore } = await import('@/lib/conversationStore');
      ConversationStore.deleteConversation(conversationId);
      
      // Remove from local state
      setConversations(prev => prev.filter(conv => conv.id !== conversationId));
      
      // Call parent handler
      onDeleteChat(conversationId);
      
      // If we deleted the current conversation, trigger new chat
      if (currentChatId === conversationId) {
        onNewChat();
      }
    } catch (error) {
      console.error('Error deleting conversation:', error);
      alert('Failed to delete conversation. Please try again.');
    }
  }, [currentChatId, onDeleteChat, onNewChat]);

  const handleRenameConversation = useCallback(async (conversationId: string) => {
    const newTitle = prompt('Enter new conversation title:');
    if (!newTitle || !newTitle.trim()) return;
    
    try {
      const { ConversationStore } = await import('@/lib/conversationStore');
      ConversationStore.updateConversationTitle(conversationId, newTitle.trim());
      
      // Update local state
      setConversations(prev => 
        prev.map(conv => 
          conv.id === conversationId 
            ? { ...conv, title: newTitle.trim() }
            : conv
        )
      );
    } catch (error) {
      console.error('Error renaming conversation:', error);
      alert('Failed to rename conversation. Please try again.');
    }
  }, []);

  return (
    <div className="flex flex-col h-full bg-gray-900 border-r border-gray-700 text-white w-80">
      {/* Header with New Chat button */}
      <div className="p-3 border-b border-gray-700">
        <Button
          onClick={onNewChat}
          className="w-full bg-transparent border border-gray-600 hover:bg-gray-800 text-white justify-start gap-2"
          variant="outline"
        >
          <Plus className="h-4 w-4" />
          New chat
        </Button>
      </div>

      {/* Search */}
      <div className="p-3 border-b border-gray-700">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <Input
            placeholder="Search chats"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500"
          />
        </div>
      </div>

      {/* Chat History */}
      <div className="flex-1 overflow-y-auto">
        <div className="p-2">
          {isLoading ? (
            <div className="text-center py-8 text-gray-400">
              Loading conversations...
            </div>
          ) : error ? (
            <div className="text-center py-8">
              <p className="text-red-400 text-sm mb-2">{error}</p>
              <Button 
                onClick={fetchConversations}
                variant="outline" 
                size="sm"
                className="text-gray-300 border-gray-600 hover:bg-gray-800"
              >
                Retry
              </Button>
            </div>
          ) : filteredConversations.length > 0 ? (
            <div className="space-y-1">
              {filteredConversations.map((conversation) => (
                <div
                  key={conversation.id}
                  className={`group flex items-center justify-between p-3 rounded-lg cursor-pointer transition-colors ${
                    currentChatId === conversation.id
                      ? 'bg-gray-800 border border-gray-600'
                      : 'hover:bg-gray-800'
                  }`}
                  onClick={() => onSelectChat(conversation.id)}
                >
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 mb-1">
                      <MessageSquare className="h-4 w-4 text-gray-400 flex-shrink-0" />
                      <h3 className="text-sm font-medium text-white truncate">
                        {conversation.title}
                      </h3>
                    </div>
                    {conversation.last_message_preview && (
                      <p className="text-xs text-gray-400 line-clamp-2 leading-relaxed">
                        {conversation.last_message_preview}
                      </p>
                    )}
                    <p className="text-xs text-gray-500 mt-1">
                      {formatTimestamp(conversation.updated_at)}
                    </p>
                  </div>
                  
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 p-0 text-gray-400 hover:text-white"
                        onClick={(e) => e.stopPropagation()}
                      >
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end" className="bg-gray-800 border-gray-600">
                      <DropdownMenuItem 
                        className="text-gray-300 hover:bg-gray-700 cursor-pointer"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleRenameConversation(conversation.id);
                        }}
                      >
                        <Edit className="h-4 w-4 mr-2" />
                        Rename
                      </DropdownMenuItem>
                      <DropdownMenuItem 
                        className="text-red-400 hover:bg-gray-700 cursor-pointer"
                        onClick={(e) => {
                          e.stopPropagation();
                          if (confirm('Are you sure you want to delete this conversation?')) {
                            handleDeleteConversation(conversation.id);
                          }
                        }}
                      >
                        <Trash className="h-4 w-4 mr-2" />
                        Delete
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8 text-gray-400">
              {searchQuery ? 'No chats found' : 'No conversations yet'}
            </div>
          )}
        </div>
      </div>

      {/* Navigation Menu */}
      <div className="border-t border-gray-700 p-2">
        <div className="space-y-1">
          <Button
            variant="ghost"
            onClick={() => router.push('/library')}
            className="w-full justify-start gap-3 text-gray-300 hover:text-white hover:bg-gray-800"
          >
            <Library className="h-4 w-4" />
            Library
          </Button>
          
          <Button
            variant="ghost"
            onClick={() => router.push('/settings')}
            className="w-full justify-start gap-3 text-gray-300 hover:text-white hover:bg-gray-800"
          >
            <Settings className="h-4 w-4" />
            Settings
          </Button>
        </div>
      </div>

      {/* User Profile */}
      <div className="border-t border-gray-700 p-3">
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button
              variant="ghost"
              className="w-full justify-start gap-3 text-gray-300 hover:text-white hover:bg-gray-800 p-2"
            >
              <Avatar className="h-6 w-6">
                <AvatarImage src="/api/placeholder/32/32" alt="User" />
                <AvatarFallback className="bg-blue-600 text-white text-xs">
                  {userId.charAt(0).toUpperCase()}
                </AvatarFallback>
              </Avatar>
              <span className="text-sm truncate">{userId}</span>
              <ChevronDown className="h-4 w-4 ml-auto" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="start" className="bg-gray-800 border-gray-600 w-56">
            <DropdownMenuItem 
              className="text-gray-300 hover:bg-gray-700 cursor-pointer"
              onClick={() => router.push('/profile')}
            >
              <User className="h-4 w-4 mr-2" />
              Profile
            </DropdownMenuItem>
            <DropdownMenuItem 
              className="text-gray-300 hover:bg-gray-700 cursor-pointer"
              onClick={() => router.push('/settings')}
            >
              <Settings className="h-4 w-4 mr-2" />
              Settings
            </DropdownMenuItem>
            <DropdownMenuSeparator className="bg-gray-600" />
            <DropdownMenuItem 
              className="text-red-400 hover:bg-gray-700 cursor-pointer"
              onClick={() => {
                // Handle sign out logic
                localStorage.removeItem('access_token');
                router.push('/');
              }}
            >
              Sign out
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </div>
  );
}


================================================
FILE: frontend/src/components/CollapsedSidebar.tsx
================================================
import {
  FolderIcon,
  SettingsIcon,
  SearchIcon,
  PlusIcon,
  ChevronRightIcon,
  UserIcon,
} from 'lucide-react'
import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Tooltip } from '@/components/ui/tooltip'
import { SettingsModal } from '@/components/SettingsModal'

interface CollapsedSidebarProps {
  onToggle: () => void
  onNewChat: () => void
  onOpenSearch: () => void
  onOpenLibrary: () => void
  onOpenSettings: () => void
  onOpenProfile: () => void
  userId?: string
}

export function CollapsedSidebar({
  onToggle,
  onNewChat,
  onOpenSearch,
  onOpenLibrary,
  onOpenSettings,
  onOpenProfile,
  userId = "demo-user"
}: CollapsedSidebarProps) {
  const [showSettingsModal, setShowSettingsModal] = useState(false)

  return (
    <div className="flex flex-col h-full">
      {/* Toggle button */}
      <div className="p-3 flex justify-center border-b border-gray-800">
        <Tooltip content="Expand sidebar">
          <Button
            onClick={onToggle}
            variant="ghost"
            size="icon"
            className="w-8 h-8 text-gray-400 hover:text-white hover:bg-gray-800"
            aria-expanded={false}
          >
            <ChevronRightIcon className="w-4 h-4" />
          </Button>
        </Tooltip>
      </div>

      {/* Main navigation icons */}
      <div className="flex-1 py-4 space-y-2">
        <div className="px-3 flex justify-center">
          <Tooltip content="New chat">
            <Button
              onClick={onNewChat}
              variant="ghost"
              size="icon"
              className="w-8 h-8 text-gray-400 hover:text-white hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <PlusIcon className="w-4 h-4" />
            </Button>
          </Tooltip>
        </div>

        <div className="px-3 flex justify-center">
          <Tooltip content="Search chats">
            <Button
              onClick={onOpenSearch}
              variant="ghost"
              size="icon"
              className="w-8 h-8 text-gray-400 hover:text-white hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <SearchIcon className="w-4 h-4" />
            </Button>
          </Tooltip>
        </div>

        <div className="px-3 flex justify-center">
          <Tooltip content="Library">
            <Button
              onClick={onOpenLibrary}
              variant="ghost"
              size="icon"
              className="w-8 h-8 text-gray-400 hover:text-white hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <FolderIcon className="w-4 h-4" />
            </Button>
          </Tooltip>
        </div>
      </div>

      {/* Bottom section */}
      <div className="border-t border-gray-800 py-4 space-y-2">
        <div className="px-3 flex justify-center">
          <Tooltip content="Settings">
            <Button
              onClick={() => setShowSettingsModal(true)}
              variant="ghost"
              size="icon"
              className="w-8 h-8 text-gray-400 hover:text-white hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <SettingsIcon className="w-4 h-4" />
            </Button>
          </Tooltip>
        </div>

        <div className="px-3 flex justify-center">
          <Tooltip content={`Profile (${userId})`}>
            <Button
              onClick={onOpenProfile}
              variant="ghost"
              size="icon"
              className="w-8 h-8 text-gray-400 hover:text-white hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <div className="w-6 h-6 bg-gray-700 rounded-full flex items-center justify-center">
                <span className="text-xs font-medium">
                  {userId.charAt(0).toUpperCase()}
                </span>
              </div>
            </Button>
          </Tooltip>
        </div>
      </div>

      <SettingsModal 
        open={showSettingsModal} 
        onOpenChange={setShowSettingsModal} 
      />
    </div>
  )
}


================================================
FILE: frontend/src/components/CTA.tsx
================================================
'use client';
import Link from 'next/link';
import { Button } from './ui/button';

export default function CTA() {
  const { setShowAuthFlow } = useDynamicContext();
  return (
    <section className="py-20 bg-slate-800 text-white">
      <div className="container mx-auto text-center">
        <h2 className="text-4xl font-bold mb-4">Ready to Get Started?</h2>
        <p className="text-slate-300 max-w-2xl mx-auto mb-8">
          Join thousands of students who are writing brilliantly and submitting confidently with HandyWriterz.
        </p>
        <Button onClick={() => setShowAuthFlow?.(true)} size="lg">
          Sign Up for Free
        </Button>
      </div>
    </section>
  );
}



================================================
FILE: frontend/src/components/DownloadMenu.tsx
================================================
import React, { useState } from 'react';
import { Download, FileText, Presentation, Shield, AlertCircle, CheckCircle, Loader2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from '@/components/ui/dropdown-menu';

interface DownloadOption {
  type: 'docx' | 'pdf' | 'pptx' | 'csv';
  label: string;
  icon: React.ReactNode;
  url?: string;
  ready: boolean;
  size?: string;
}

interface DownloadMenuProps {
  traceId: string;
  derivatives: { kind: string; url: string }[];
  plagiarismScore?: number;
  qualityScore?: number;
  onDownload?: (type: string) => void;
  onOriginalityCheck?: () => void;
}

export const DownloadMenu: React.FC<DownloadMenuProps> = ({
  traceId,
  derivatives,
  plagiarismScore,
  qualityScore,
  onDownload,
  onOriginalityCheck
}) => {
  const [downloading, setDownloading] = useState<string | null>(null);

  const baseDownloads: DownloadOption[] = [
    {
      type: 'docx',
      label: 'Word Document',
      icon: <FileText className="w-4 h-4" />,
      ready: derivatives.some(d => d.kind === 'docx'),
      url: derivatives.find(d => d.kind === 'docx')?.url
    },
    {
      type: 'pdf',
      label: 'PDF Document',
      icon: <FileText className="w-4 h-4" />,
      ready: derivatives.some(d => d.kind === 'pdf'),
      url: derivatives.find(d => d.kind === 'pdf')?.url
    },
    {
      type: 'pptx',
      label: 'PowerPoint Slides',
      icon: <Presentation className="w-4 h-4" />,
      ready: derivatives.some(d => d.kind === 'slides'),
      url: derivatives.find(d => d.kind === 'slides')?.url
    }
  ];

  const handleDownload = async (option: DownloadOption) => {
    if (!option.ready) return;
    
    setDownloading(option.type);
    
    try {
      if (option.url) {
        // Direct download from derivative URL
        const link = document.createElement('a');
        link.href = option.url;
        link.download = `${traceId}.${option.type}`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      } else {
        // Fallback to API endpoint
        const response = await fetch(`/api/doc/${traceId}/${option.type}`, {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('access_token')}`
          }
        });
        
        if (!response.ok) throw new Error('Download failed');
        
        const blob = await response.blob();
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `${traceId}.${option.type}`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
      }
      
      onDownload?.(option.type);
    } catch (error) {
      console.error('Download failed:', error);
      alert('Download failed. Please try again.');
    } finally {
      setDownloading(null);
    }
  };

  const getPlagiarismStatus = () => {
    if (plagiarismScore === undefined) return null;
    
    if (plagiarismScore > 15) {
      return {
        icon: <AlertCircle className="w-4 h-4 text-red-400" />,
        text: `${plagiarismScore}% - Review needed`,
        color: 'text-red-400'
      };
    }
    
    return {
      icon: <CheckCircle className="w-4 h-4 text-green-400" />,
      text: `${plagiarismScore}% - Acceptable`,
      color: 'text-green-400'
    };
  };

  const readyCount = baseDownloads.filter(d => d.ready).length;
  const plagiarismStatus = getPlagiarismStatus();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button 
          variant="outline" 
          className="relative bg-gray-800 border-gray-700 text-white hover:bg-gray-700"
          disabled={readyCount === 0}
        >
          <Download className="w-4 h-4 mr-2" />
          Download
          {readyCount > 0 && (
            <span className="absolute -top-1 -right-1 w-5 h-5 bg-blue-500 text-white text-xs rounded-full flex items-center justify-center">
              {readyCount}
            </span>
          )}
        </Button>
      </DropdownMenuTrigger>
      
      <DropdownMenuContent align="end" className="w-64 bg-gray-800 border-gray-700">
        <div className="p-2 border-b border-gray-700">
          <p className="text-sm font-medium text-white">Available Downloads</p>
          {qualityScore && (
            <p className="text-xs text-gray-400">Quality Score: {qualityScore}%</p>
          )}
        </div>
        
        {baseDownloads.map((option) => (
          <DropdownMenuItem
            key={option.type}
            onClick={() => handleDownload(option)}
            disabled={!option.ready || downloading === option.type}
            className="flex items-center gap-3 p-3 hover:bg-gray-700 cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <div className="flex-shrink-0">
              {downloading === option.type ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : (
                option.icon
              )}
            </div>
            
            <div className="flex-grow">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-white">
                  {option.label}
                </span>
                <span className={`text-xs px-2 py-1 rounded-full ${
                  option.ready 
                    ? 'bg-green-900 text-green-300' 
                    : 'bg-gray-700 text-gray-400'
                }`}>
                  {option.ready ? 'Ready' : 'Processing'}
                </span>
              </div>
              
              {option.size && (
                <p className="text-xs text-gray-400 mt-1">{option.size}</p>
              )}
            </div>
          </DropdownMenuItem>
        ))}
        
        {plagiarismStatus && (
          <>
            <DropdownMenuSeparator className="bg-gray-700" />
            <DropdownMenuItem
              onClick={onOriginalityCheck}
              className="flex items-center gap-3 p-3 hover:bg-gray-700 cursor-pointer"
            >
              <div className="flex-shrink-0">
                <Shield className="w-4 h-4 text-orange-400" />
              </div>
              
              <div className="flex-grow">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium text-white">
                    Originality Check
                  </span>
                  <span className={`text-xs ${plagiarismStatus.color}`}>
                    {plagiarismStatus.text}
                  </span>
                </div>
                <p className="text-xs text-gray-400 mt-1">
                  View detailed analysis
                </p>
              </div>
            </DropdownMenuItem>
          </>
        )}
        
        {readyCount === 0 && (
          <div className="p-4 text-center">
            <div className="flex items-center justify-center gap-2 text-gray-400">
              <Loader2 className="w-4 h-4 animate-spin" />
              <span className="text-sm">Generating documents...</span>
            </div>
          </div>
        )}
      </DropdownMenuContent>
    </DropdownMenu>
  );
};


================================================
FILE: frontend/src/components/EnhancedChatView.tsx
================================================
'use client'

import React, { useEffect, useRef, useCallback } from 'react';
import { ScrollArea } from '@/components/ui/scroll-area';
import { StreamingStatus } from '@/components/StreamingStatus';
import { MessageBubble } from '@/components/MessageBubble';
import { ResponseActions } from '@/components/ResponseActions';
import type { Message } from '@/types';
import { TimelineEvent } from '@/hooks/useStream';
import { ProcessedEvent } from '@/components/ActivityTimeline';
import { useToast } from '@/components/ui/use-toast';

interface EnhancedChatViewProps {
  messages: Message[];
  isLoading: boolean;
  liveActivityEvents: TimelineEvent[];
  historicalActivities: Record<string, ProcessedEvent[]>;
  traceId?: string | null;
  totalCost?: number;
  plagiarismScore?: number;
  qualityScore?: number;
  derivatives?: { kind: string; url: string }[];
  streamingText?: string;
  reasoningText?: string;
  isConnected?: boolean;
  onExport: (format: 'pdf' | 'docx' | 'md') => void;
}

export function EnhancedChatView({
  messages,
  isLoading,
  liveActivityEvents,
  historicalActivities,
  traceId,
  totalCost,
  plagiarismScore,
  qualityScore,
  derivatives = [],
  streamingText = '',
  reasoningText = '',
  isConnected = false,
  onExport,
}: EnhancedChatViewProps) {
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages, streamingText]);

  const displayMessages = React.useMemo(() => {
    const allMessages = [...messages];
    if (isLoading && streamingText && traceId) {
      const lastMessageIndex = allMessages.findLastIndex(m => m.type === 'ai');
      if (lastMessageIndex >= 0) {
        allMessages[lastMessageIndex] = {
          ...allMessages[lastMessageIndex],
          content: streamingText
        };
      } else {
        allMessages.push({
          id: traceId,
          type: 'ai',
          content: streamingText,
          timestamp: new Date().toISOString()
        });
      }
    }
    return allMessages;
  }, [messages, streamingText, isLoading, traceId]);

  const getReasoningForMessage = (messageId?: string, isLast?: boolean) => {
    if (isLast && isLoading && reasoningText && messageId === traceId) {
      return reasoningText;
    }
    if (!messageId || !historicalActivities[messageId]) return undefined;
    const reasoningEvents = historicalActivities[messageId].filter(
      event => event.title?.toLowerCase().includes('thinking') || 
               event.title?.toLowerCase().includes('reasoning')
    );
    return reasoningEvents.map(event => 
      typeof event.data === 'string' ? event.data : 
      event.data?.text || event.data?.details || ''
    ).join('\n');
  };

  const handleCopy = useCallback((content: string) => {
    navigator.clipboard.writeText(content).then(() => {
      toast({
        title: "Copied to clipboard",
      });
    }, (err) => {
      toast({
        title: "Failed to copy",
        description: "Could not copy text to clipboard.",
        variant: "destructive",
      });
      console.error('Failed to copy: ', err);
    });
  }, [toast]);

  return (
    <div className="flex-1 flex flex-col bg-gray-900">
      {isLoading && (
        <StreamingStatus
          events={liveActivityEvents}
          isConnected={isConnected}
          totalCost={totalCost}
          plagiarismScore={plagiarismScore}
          qualityScore={qualityScore}
        />
      )}
      <ScrollArea className="flex-1" ref={scrollAreaRef}>
        <div className="p-6 space-y-4 max-w-4xl mx-auto w-full">
          {displayMessages.length === 0 ? (
            <div className="text-center text-gray-400 py-12">
              <p>No messages yet. Start the conversation!</p>
            </div>
          ) : (
            displayMessages.map((message, index) => {
              const isLast = index === displayMessages.length - 1;
              const reasoning = message.type === 'ai' ? getReasoningForMessage(message.id, isLast) : undefined;
              
              return (
                <div key={message.id || index}>
                  <MessageBubble
                    message={message}
                    isLast={isLast}
                    reasoning={reasoning}
                    traceId={traceId}
                    totalCost={isLast ? totalCost : undefined}
                    plagiarismScore={isLast ? plagiarismScore : undefined}
                    qualityScore={isLast ? qualityScore : undefined}
                    derivatives={isLast ? derivatives : []}
                  />
                  {message.type === 'ai' && !isLoading && (
                    <div className="pl-12">
                       <ResponseActions
                          messageId={message.id!}
                          messageContent={message.content as string}
                          conversationId={traceId}
                          onCopy={() => handleCopy(message.content as string)}
                          onExport={onExport}
                       />
                    </div>
                  )}
                </div>
              );
            })
          )}
          <div ref={messagesEndRef} />
        </div>
      </ScrollArea>
    </div>
  );
}


================================================
FILE: frontend/src/components/ErrorBoundary.tsx
================================================
'use client';
// Force update to clear any caching issues

import React, { Component, ErrorInfo, ReactNode } from 'react';
import { AlertCircle, RefreshCw, Home, Bug } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
  onError?: (error: Error, errorInfo: ErrorInfo) => void;
  resetOnPropsChange?: boolean;
  resetKeys?: Array<string | number>;
}

interface State {
  hasError: boolean;
  error: Error | null;
  errorInfo: ErrorInfo | null;
  eventId: string | null;
}

export class ErrorBoundary extends Component<Props, State> {
  private resetTimeoutId: number | null = null;

  constructor(props: Props) {
    super(props);
    this.state = {
      hasError: false,
      error: null,
      errorInfo: null,
      eventId: null,
    };
  }

  static getDerivedStateFromError(error: Error): Partial<State> {
    return {
      hasError: true,
      error,
    };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    this.setState({
      error,
      errorInfo,
    });

    // Log to external service
    this.logErrorToService(error, errorInfo);
    
    // Call custom error handler
    this.props.onError?.(error, errorInfo);
  }

  componentDidUpdate(prevProps: Props) {
    const { resetKeys } = this.props;
    const { hasError } = this.state;

    if (hasError && prevProps.resetKeys !== resetKeys) {
      if (resetKeys?.some((key, index) => key !== prevProps.resetKeys?.[index])) {
        this.resetErrorBoundary();
      }
    }
  }

  logErrorToService = async (error: Error, errorInfo: ErrorInfo) => {
    try {
      // Log to your error tracking service (e.g., Sentry)
      const errorData = {
        message: error.message,
        stack: error.stack,
        componentStack: errorInfo.componentStack,
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent,
        url: window.location.href,
      };

      // Send to your logging endpoint
      await fetch('/api/errors', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(errorData),
      });
    } catch (logError) {
      console.error('Failed to log error:', logError);
    }
  };

  resetErrorBoundary = () => {
    if (this.resetTimeoutId) {
      clearTimeout(this.resetTimeoutId);
    }

    this.setState({
      hasError: false,
      error: null,
      errorInfo: null,
      eventId: null,
    });
  };

  handleRetry = () => {
    this.resetErrorBoundary();
  };

  handleReload = () => {
    window.location.reload();
  };

  handleGoHome = () => {
    window.location.href = '/';
  };

  render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }

      return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 p-4">
          <Card className="max-w-2xl w-full">
            <CardHeader className="text-center">
              <div className="flex justify-center mb-4">
                <AlertCircle className="h-12 w-12 text-red-500" />
              </div>
              <CardTitle className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                Something went wrong
              </CardTitle>
            </CardHeader>
            
            <CardContent className="space-y-6">
              <div className="text-center text-gray-600 dark:text-gray-400">
                <p className="mb-2">
                  We apologize for the inconvenience. An unexpected error has occurred.
                </p>
                <p className="text-sm">
                  Our team has been notified and is working to fix this issue.
                </p>
              </div>

              {process.env.NODE_ENV === 'development' && this.state.error && (
                <details className="bg-gray-100 dark:bg-gray-800 rounded-lg p-4">
                  <summary className="cursor-pointer font-medium text-gray-900 dark:text-gray-100 flex items-center gap-2">
                    <Bug className="h-4 w-4" />
                    Error Details (Development Mode)
                  </summary>
                  <div className="mt-4 space-y-2">
                    <div>
                      <strong className="text-red-600 dark:text-red-400">Error:</strong>
                      <pre className="text-sm text-gray-700 dark:text-gray-300 mt-1 whitespace-pre-wrap">
                        {this.state.error.message}
                      </pre>
                    </div>
                    {this.state.error.stack && (
                      <div>
                        <strong className="text-red-600 dark:text-red-400">Stack Trace:</strong>
                        <pre className="text-xs text-gray-600 dark:text-gray-400 mt-1 whitespace-pre-wrap overflow-x-auto">
                          {this.state.error.stack}
                        </pre>
                      </div>
                    )}
                    {this.state.errorInfo?.componentStack && (
                      <div>
                        <strong className="text-red-600 dark:text-red-400">Component Stack:</strong>
                        <pre className="text-xs text-gray-600 dark:text-gray-400 mt-1 whitespace-pre-wrap overflow-x-auto">
                          {this.state.errorInfo.componentStack}
                        </pre>
                      </div>
                    )}
                  </div>
                </details>
              )}

              <div className="flex flex-col sm:flex-row gap-3 justify-center">
                <Button
                  onClick={this.handleRetry}
                  className="flex items-center gap-2"
                  variant="default"
                >
                  <RefreshCw className="h-4 w-4" />
                  Try Again
                </Button>
                
                <Button
                  onClick={this.handleReload}
                  className="flex items-center gap-2"
                  variant="outline"
                >
                  <RefreshCw className="h-4 w-4" />
                  Reload Page
                </Button>
                
                <Button
                  onClick={this.handleGoHome}
                  className="flex items-center gap-2"
                  variant="outline"
                >
                  <Home className="h-4 w-4" />
                  Go Home
                </Button>
              </div>

              {this.state.eventId && (
                <div className="text-center text-xs text-gray-500 dark:text-gray-400">
                  Error ID: {this.state.eventId}
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      );
    }

    return this.props.children;
  }
}

// HOC for wrapping components with error boundary
export function withErrorBoundary<T extends Record<string, unknown>>(
  Component: React.ComponentType<T>,
  errorBoundaryProps?: Omit<Props, 'children'>
) {
  const WrappedComponent = (props: T) => (
    <ErrorBoundary {...errorBoundaryProps}>
      <Component {...props} />
    </ErrorBoundary>
  );

  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;

  return WrappedComponent;
}

// Hook for handling errors in functional components
export function useErrorHandler() {
  return React.useCallback((error: Error, errorInfo?: ErrorInfo) => {
    console.error('Error caught by useErrorHandler:', error, errorInfo);
    
    // Log to external service
    fetch('/api/errors', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: error.message,
        stack: error.stack,
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent,
        url: window.location.href,
      }),
    }).catch(console.error);
  }, []);
}


================================================
FILE: frontend/src/components/ExpandedSidebar.tsx
================================================
import {
  FolderIcon,
  SettingsIcon,
  SearchIcon,
  PlusIcon,
  ChevronLeftIcon,
  ChevronDownIcon,
  MoreHorizontalIcon,
  EditIcon,
  TrashIcon,
  MessageSquareIcon,
} from 'lucide-react'
import { useState, useEffect, useCallback } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { SettingsModal } from '@/components/SettingsModal'

interface Conversation {
  id: string;
  title: string;
  created_at: string;
  updated_at: string;
  message_count: number;
  last_message_preview?: string;
}

interface ExpandedSidebarProps {
  onToggle: () => void
  currentChatId?: string | null;
  onNewChat: () => void;
  onSelectChat: (chatId: string) => void;
  onDeleteChat: (chatId: string) => void;
  userId?: string;
}

export function ExpandedSidebar({
  onToggle,
  currentChatId,
  onNewChat,
  onSelectChat,
  onDeleteChat,
  userId = "demo-user"
}: ExpandedSidebarProps) {
  const router = useRouter()
  const [convosOpen, setConvosOpen] = useState(true)
  const [searchQuery, setSearchQuery] = useState('')
  const [conversations, setConversations] = useState<Conversation[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [showSettingsModal, setShowSettingsModal] = useState(false)

  // Load conversations from local storage
  useEffect(() => {
    const loadConversations = () => {
      setIsLoading(true);

      try {
        import('@/lib/conversationStore').then(({ ConversationStore }) => {
          const storedConversations = ConversationStore.getAllConversations();
          setConversations(storedConversations);
          setIsLoading(false);
        });
      } catch (error) {
        console.error('Error loading conversations:', error);
        setConversations([]);
        setIsLoading(false);
      }
    };

    loadConversations();

    // Listen for storage changes to refresh conversations
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === 'handywriterz_conversations') {
        loadConversations();
      }
    };

    window.addEventListener('storage', handleStorageChange);
    
    // Also check periodically for updates
    const interval = setInterval(loadConversations, 2000);

    return () => {
      window.removeEventListener('storage', handleStorageChange);
      clearInterval(interval);
    };
  }, [userId]);

  // Filter conversations based on search query
  const filteredConversations = conversations.filter(conv =>
    conv.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    conv.last_message_preview?.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const handleDeleteConversation = useCallback(async (conversationId: string) => {
    try {
      const { ConversationStore } = await import('@/lib/conversationStore');
      ConversationStore.deleteConversation(conversationId);

      setConversations(prev => prev.filter(conv => conv.id !== conversationId));
      onDeleteChat(conversationId);

      if (currentChatId === conversationId) {
        onNewChat();
      }
    } catch (error) {
      console.error('Error deleting conversation:', error);
      alert('Failed to delete conversation. Please try again.');
    }
  }, [currentChatId, onDeleteChat, onNewChat]);

  const handleRenameConversation = useCallback(async (conversationId: string) => {
    const newTitle = prompt('Enter new conversation title:');
    if (!newTitle || !newTitle.trim()) return;

    try {
      const { ConversationStore } = await import('@/lib/conversationStore');
      ConversationStore.updateConversationTitle(conversationId, newTitle.trim());

      setConversations(prev =>
        prev.map(conv =>
          conv.id === conversationId
            ? { ...conv, title: newTitle.trim() }
            : conv
        )
      );
    } catch (error) {
      console.error('Error renaming conversation:', error);
      alert('Failed to rename conversation. Please try again.');
    }
  }, []);

  return (
    <div className="flex flex-col h-full">
      {/* Header with toggle */}
      <div className="p-4 flex items-center justify-between border-b border-border">
        <h2 className="text-lg font-semibold text-foreground">HandyWriterz</h2>
        <Button
          onClick={onToggle}
          variant="ghost"
          size="icon"
          className="w-8 h-8 text-muted-foreground hover:text-foreground hover:bg-secondary"
          aria-expanded={true}
        >
          <ChevronLeftIcon className="w-4 h-4" />
        </Button>
      </div>

      {/* New chat + Search */}
      <div className="p-4 space-y-3">
        <Button
          onClick={onNewChat}
          className="flex items-center w-full px-3 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors focus:outline-none focus:ring-2 focus:ring-ring"
        >
          <PlusIcon className="w-4 h-4 mr-2" />
          New chat
        </Button>
        <div className="relative">
          <SearchIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
          <input
            type="text"
            placeholder="Search chats"
            value={searchQuery}
            onChange={(e) => {
              setSearchQuery(e.target.value)
              setConvosOpen(true)
            }}
            className="w-full pl-9 pr-3 py-2 bg-secondary rounded-md focus:outline-none focus:ring-2 focus:ring-ring text-sm text-foreground placeholder-muted-foreground"
          />
        </div>
      </div>

      {/* My Conversations */}
      <div className="px-4 flex-1 overflow-hidden">
        <button
          onClick={() => setConvosOpen(!convosOpen)}
          className="flex items-center w-full py-2 text-sm hover:bg-secondary rounded-md px-2 text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring"
          aria-expanded={convosOpen}
        >
          <ChevronDownIcon className={`w-4 h-4 mr-2 transform transition-transform duration-200 ${convosOpen ? 'rotate-0' : '-rotate-90'}`} />
          My Conversations
        </button>

        <div className={`transition-all duration-300 ease-in-out overflow-hidden ${convosOpen ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'}`}>
          <div className="mt-2 overflow-y-auto">
            {isLoading ? (
              <div className="text-muted-foreground italic text-sm px-2 py-2">Loading...</div>
            ) : filteredConversations.length > 0 ? (
              <ul className="space-y-1">
                {filteredConversations.map(conversation => (
                  <li key={conversation.id}>
                    <div
                      className={`group flex items-center justify-between px-2 py-2 rounded-md cursor-pointer transition-colors ${
                        currentChatId === conversation.id
                          ? 'bg-secondary'
                          : 'hover:bg-secondary/50'
                      }`}
                      onClick={() => onSelectChat(conversation.id)}
                    >
                      <div className="flex items-center min-w-0 flex-1">
                        <MessageSquareIcon className="w-4 h-4 mr-2 text-muted-foreground flex-shrink-0" />
                        <span className="text-sm truncate text-foreground">
                          {conversation.title}
                        </span>
                      </div>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button
                            variant="ghost"
                            size="sm"
                            className="opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 p-0 text-muted-foreground hover:text-foreground focus:outline-none focus:ring-2 focus:ring-ring"
                            onClick={(e) => e.stopPropagation()}
                          >
                            <MoreHorizontalIcon className="h-3 w-3" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end" className="bg-background border-border">
                          <DropdownMenuItem
                            className="text-foreground hover:bg-secondary cursor-pointer text-xs"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleRenameConversation(conversation.id);
                            }}
                          >
                            <EditIcon className="h-3 w-3 mr-2" />
                            Rename
                          </DropdownMenuItem>
                          <DropdownMenuItem
                            className="text-destructive hover:bg-secondary cursor-pointer text-xs"
                            onClick={(e) => {
                              e.stopPropagation();
                              if (confirm('Are you sure you want to delete this conversation?')) {
                                handleDeleteConversation(conversation.id);
                              }
                            }}
                          >
                            <TrashIcon className="h-3 w-3 mr-2" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                  </li>
                ))}
              </ul>
            ) : (
              <div className="text-muted-foreground italic text-sm px-2 py-2">
                {searchQuery ? 'No chats found' : 'No conversations yet'}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Library */}
      <div className="px-4 py-2">
        <Link
          href="/library"
          className="flex items-center px-3 py-2 hover:bg-secondary rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-ring text-foreground"
        >
          <FolderIcon className="w-4 h-4 mr-2" />
          Library
        </Link>
      </div>

      {/* Settings + Account */}
      <div className="px-4 pb-4 space-y-2 border-t border-border pt-4">
        <button
          onClick={() => setShowSettingsModal(true)}
          className="flex items-center w-full px-3 py-2 hover:bg-secondary rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-ring text-foreground"
        >
          <SettingsIcon className="w-4 h-4 mr-2" />
          Settings
        </button>

        <div className="flex items-center mt-4 px-3 py-2 bg-secondary rounded-md">
          <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full mr-3 flex items-center justify-center">
            <span className="text-sm font-medium text-white">
              {userId.charAt(0).toUpperCase()}
            </span>
          </div>
          <div className="flex-1 min-w-0">
            <div className="text-sm text-foreground truncate">{userId}</div>
            <button
              onClick={() => {
  localStorage.removeItem('access_token');
  window.location.href = '/';
}}
              className="text-xs text-muted-foreground hover:underline focus:outline-none focus:ring-2 focus:ring-ring"
            >
              Logout
            </button>
          </div>
        </div>
      </div>

      <SettingsModal
        open={showSettingsModal}
        onOpenChange={setShowSettingsModal}
      />
    </div>
  )
}



================================================
FILE: frontend/src/components/FeatureCard.tsx
================================================
interface Props {
  title: string;
  copy: string;
  icon: string;
}
export default function FeatureCard({ title, copy, icon }: Props) {
  return (
    <div className="flex flex-col items-center bg-slate-700/40 p-6 rounded-xl backdrop-blur-xs">
      <span className="text-3xl mb-3">{icon}</span>
      <h3 className="font-semibold text-center">{title}</h3>
      <p className="text-center text-sm text-slate-300 mt-2">{copy}</p>
    </div>
  );
}


================================================
FILE: frontend/src/components/FeatureGrid.tsx
================================================
import FeatureCard from './FeatureCard';

export default function FeatureGrid() {
  return (
    <section className="px-6 py-16 bg-gradient-to-b from-slate-800 to-slate-900 text-slate-100">
      <div className="grid md:grid-cols-2 gap-6 max-w-5xl mx-auto">
        <FeatureCard
          title="Multi-modal context"
          copy="Drag PDFs, DOCX, audio and YouTube links."
          icon="📎"
        />
        <FeatureCard
          title="1 M-token brain"
          copy="Gemini 1.5 window—no compromise."
          icon="🧠"
        />
        <FeatureCard
          title="Turnitin safe-pass"
          copy="AI score 0 %, similarity < 10 %."
          icon="🛡️"
        />
        <FeatureCard
          title="Human checker marketplace"
          copy="Optional experts on standby."
          icon="🤝"
        />
      </div>
    </section>
  );
}


================================================
FILE: frontend/src/components/Footer.tsx
================================================
export default function Footer() {
  return (
    <footer className="text-center py-4 bg-slate-900 text-slate-400 text-xs">
      © {new Date().getFullYear()} HandyWriterz · All rights reserved
    </footer>
  );
}


================================================
FILE: frontend/src/components/Header.tsx
================================================
'use client';

import Link from 'next/link';
import { Button } from './ui/button';

export default function Header() {
  return (
    <header className="absolute top-0 left-0 right-0 z-10 bg-transparent text-white">
      <div className="container mx-auto flex items-center justify-between p-4">
        <Link href="/" className="text-2xl font-bold">
          HandyWriterz
        </Link>
        <nav className="hidden md:flex items-center gap-6">
          <Link href="/#features" className="hover:text-slate-300">Features</Link>
          <Link href="/#how-it-works" className="hover:text-slate-300">How It Works</Link>
          <Link href="/#testimonials" className="hover:text-slate-300">Testimonials</Link>
        </nav>
        <div>
          <Link href="/chat">
            <Button variant="default">Start Writing</Button>
          </Link>
        </div>
      </div>
    </header>
  );
}



================================================
FILE: frontend/src/components/Hero.tsx
================================================
'use client';
import Link from 'next/link';
import { Button } from './ui/button';

export default function Hero() {
  const { setShowAuthFlow } = useDynamicContext();
  return (
    <section className="relative min-h-screen flex items-center justify-center text-center bg-slate-900 text-white overflow-hidden">
      <div className="absolute inset-0 bg-black opacity-50"></div>
      <div className="relative z-10 p-4">
        <h1 className="text-5xl md:text-7xl font-bold leading-tight mb-4">
          Write Brilliantly, Submit Confidently
        </h1>
        <p className="text-lg md:text-xl text-slate-300 max-w-3xl mx-auto mb-8">
          Leverage our advanced AI for top-tier academic research and writing, complete with built-in Turnitin clearance to ensure originality.
        </p>
        <Button onClick={() => setShowAuthFlow(true)} size="lg">
          Get Started Now
        </Button>
      </div>
    </section>
  );
}



================================================
FILE: frontend/src/components/HowItWorks.tsx
================================================
import { CheckCircle } from 'lucide-react';

export default function HowItWorks() {
  return (
    <section id="how-it-works" className="py-20 bg-slate-800 text-white">
      <div className="container mx-auto text-center">
        <h2 className="text-4xl font-bold mb-12">How It Works</h2>
        <div className="grid md:grid-cols-3 gap-12">
          <div className="flex flex-col items-center">
            <CheckCircle className="w-12 h-12 text-emerald-400 mb-4" />
            <h3 className="text-2xl font-semibold mb-2">1. Submit Your Request</h3>
            <p className="text-slate-400">
              Provide your assignment details, including topic, word count, and citation style.
            </p>
          </div>
          <div className="flex flex-col items-center">
            <CheckCircle className="w-12 h-12 text-emerald-400 mb-4" />
            <h3 className="text-2xl font-semibold mb-2">2. AI-Powered Research</h3>
            <p className="text-slate-400">
              Our advanced AI agents conduct thorough research to gather the most relevant and credible sources.
            </p>
          </div>
          <div className="flex flex-col items-center">
            <CheckCircle className="w-12 h-12 text-emerald-400 mb-4" />
            <h3 className="text-2xl font-semibold mb-2">3. Review and Submit</h3>
            <p className="text-slate-400">
              Receive a high-quality, plagiarism-free paper, complete with a Turnitin clearance report.
            </p>
          </div>
        </div>
      </div>
    </section>
  );
}


================================================
FILE: frontend/src/components/ImprovedInputForm.tsx
================================================
'use client'

import React, { useState, useRef, useCallback } from 'react';
import { Plus, Send, Paperclip, X, ChevronDown, Mic, CornerDownLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

interface FileAttachment {
  id: string;
  name: string;
  size: number;
  type: string;
}

interface ImprovedInputFormProps {
  onSubmit: (inputValue: string, writeupType: string, model: string, fileIds: string[]) => void;
  onCancel: () => void;
  isLoading: boolean;
  hasHistory: boolean;
}

const writeUpTypes = [
  { value: 'general', label: '📄 General Writing', description: 'Standard academic content' },
  { value: 'essay', label: '📝 Essay', description: 'Structured argumentative essays' },
  { value: 'report', label: '📊 Report', description: 'Professional reports and analysis' },
  { value: 'dissertation', label: '🎓 Dissertation', description: 'PhD-level research papers' },
  { value: 'case_study', label: '🔍 Case Study', description: 'Detailed case analysis' },
  { value: 'case_scenario', label: '🎯 Case Scenario', description: 'Scenario-based analysis' },
  { value: 'reflection', label: '💭 Reflection', description: 'Reflective writing pieces' },
  { value: 'presentation', label: '📱 Presentation', description: 'Slide presentations' },
  { value: 'coding', label: '💻 Coding Help', description: 'Programming assistance' },
];

export function ImprovedInputForm({
  onSubmit,
  onCancel,
  isLoading,
  hasHistory,
}: ImprovedInputFormProps) {
  const [inputValue, setInputValue] = useState('');
  const [writeupType, setWriteupType] = useState('general');
  const [attachedFiles, setAttachedFiles] = useState<FileAttachment[]>([]);
  const [isDragging, setIsDragging] = useState(false);
  
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleSubmit = useCallback((e?: React.FormEvent) => {
    if (e) e.preventDefault();
    if ((!inputValue.trim() && attachedFiles.length === 0) || isLoading) return;
    
    const fileIds = attachedFiles.map(file => file.id);
    onSubmit(inputValue, writeupType, 'gemini-2.5-pro', fileIds);
    setInputValue('');
    setAttachedFiles([]);
  }, [inputValue, writeupType, attachedFiles, isLoading, onSubmit]);

  const handleKeyDown = useCallback((e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSubmit();
    }
  }, [handleSubmit]);

  const handleFileSelect = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    const newAttachments: FileAttachment[] = [];

    files.forEach(file => {
      // Validate file size (100MB limit)
      if (file.size > 100 * 1024 * 1024) {
        alert(`File ${file.name} is too large. Maximum size is 100MB.`);
        return;
      }

      // Check if we already have 10 files
      if (attachedFiles.length + newAttachments.length >= 10) {
        alert('Maximum 10 files allowed.');
        return;
      }

      newAttachments.push({
        id: Date.now().toString() + Math.random(),
        name: file.name,
        size: file.size,
        type: file.type,
      });
    });

    setAttachedFiles(prev => [...prev, ...newAttachments]);
    
    // Clear the input
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  }, [attachedFiles.length]);

  const removeFile = useCallback((fileId: string) => {
    setAttachedFiles(prev => prev.filter(file => file.id !== fileId));
  }, []);

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  }, []);

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
  }, []);

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    
    const files = Array.from(e.dataTransfer.files);
    const newAttachments: FileAttachment[] = [];

    files.forEach(file => {
      if (file.size > 100 * 1024 * 1024) {
        alert(`File ${file.name} is too large. Maximum size is 100MB.`);
        return;
      }

      if (attachedFiles.length + newAttachments.length >= 10) {
        alert('Maximum 10 files allowed.');
        return;
      }

      newAttachments.push({
        id: Date.now().toString() + Math.random(),
        name: file.name,
        size: file.size,
        type: file.type,
      });
    });

    setAttachedFiles(prev => [...prev, ...newAttachments]);
  }, [attachedFiles.length]);

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const selectedWriteUpType = writeUpTypes.find(type => type.value === writeupType);
  const isSubmitDisabled = (!inputValue.trim() && attachedFiles.length === 0) || isLoading;

  return (
    <div className="border-t border-gray-700 bg-gray-900">
      {/* File Attachments */}
      {attachedFiles.length > 0 && (
        <div className="px-4 py-3 border-b border-gray-700">
          <div className="flex flex-wrap gap-2">
            {attachedFiles.map((file) => (
              <div
                key={file.id}
                className="flex items-center gap-2 px-3 py-1 bg-gray-800 border border-gray-600 rounded-full text-sm"
              >
                <Paperclip className="h-3 w-3 text-gray-400" />
                <span className="text-gray-300 truncate max-w-32">
                  {file.name}
                </span>
                <span className="text-gray-500 text-xs">
                  {formatFileSize(file.size)}
                </span>
                <button
                  onClick={() => removeFile(file.id)}
                  className="text-gray-400 hover:text-red-400 transition-colors"
                >
                  <X className="h-3 w-3" />
                </button>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Input Area */}
      <div 
        className={`p-4 transition-colors ${
          isDragging ? 'bg-blue-900/20 border-blue-500' : ''
        }`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
      >
        <div className="flex items-end gap-3">
          {/* Tools Dropdown */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="outline"
                size="sm"
                className="bg-gray-800 border-gray-600 text-gray-300 hover:bg-gray-700 shrink-0"
              >
                <span className="text-sm">{selectedWriteUpType?.label.split(' ')[0]} Tools</span>
                <ChevronDown className="h-4 w-4 ml-1" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="start" className="bg-gray-800 border-gray-600 w-64">
              {writeUpTypes.map((type) => (
                <DropdownMenuItem
                  key={type.value}
                  onClick={() => setWriteupType(type.value)}
                  className={`text-gray-300 hover:bg-gray-700 ${
                    writeupType === type.value ? 'bg-gray-700' : ''
                  }`}
                >
                  <div className="flex flex-col">
                    <span className="text-sm font-medium">{type.label}</span>
                    <span className="text-xs text-gray-400">{type.description}</span>
                  </div>
                </DropdownMenuItem>
              ))}
              <DropdownMenuSeparator className="bg-gray-600" />
              <DropdownMenuItem className="text-gray-300 hover:bg-gray-700">
                <span className="text-sm">🎨 Custom Templates</span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          {/* Attach Files Button */}
          <Button
            onClick={() => fileInputRef.current?.click()}
            variant="outline"
            size="sm"
            className="bg-gray-800 border-gray-600 text-gray-300 hover:bg-gray-700 shrink-0"
            disabled={attachedFiles.length >= 10}
          >
            <Paperclip className="h-4 w-4" />
          </Button>

          {/* Hidden file input */}
          <input
            ref={fileInputRef}
            type="file"
            multiple
            accept=".pdf,.doc,.docx,.txt,.md,.png,.jpg,.jpeg,.gif,.mp3,.wav,.mp4"
            onChange={handleFileSelect}
            className="hidden"
          />

          {/* Text Input */}
          <div className="flex-1 relative">
            <Textarea
              ref={textareaRef}
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder={isDragging ? "Drop files here or type your message..." : "Message HandyWriterz..."}
              className="min-h-[52px] max-h-32 resize-none bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500 pr-12"
              disabled={isLoading}
            />
            
            {/* Send Button - Positioned inside textarea */}
            <div className="absolute bottom-2 right-2">
              {isLoading ? (
                <Button
                  onClick={onCancel}
                  size="sm"
                  variant="outline"
                  className="h-8 w-8 p-0 bg-gray-700 border-gray-600 hover:bg-gray-600"
                >
                  <X className="h-4 w-4" />
                </Button>
              ) : (
                <Button
                  onClick={handleSubmit}
                  disabled={isSubmitDisabled}
                  size="sm"
                  className={`h-8 w-8 p-0 transition-all ${
                    isSubmitDisabled
                      ? 'bg-gray-700 text-gray-500 cursor-not-allowed'
                      : 'bg-blue-600 hover:bg-blue-700 text-white'
                  }`}
                >
                  {inputValue.trim() || attachedFiles.length > 0 ? (
                    <Send className="h-4 w-4" />
                  ) : (
                    <Mic className="h-4 w-4" />
                  )}
                </Button>
              )}
            </div>
          </div>
        </div>

        {/* Hint Text */}
        <div className="flex justify-between items-center mt-2 text-xs text-gray-500">
          <span>
            {attachedFiles.length > 0 && (
              `${attachedFiles.length}/10 files • `
            )}
            Supports files up to 100MB each
          </span>
          <span className="flex items-center gap-1">
            <CornerDownLeft className="h-3 w-3" />
            to send, Shift + 
            <CornerDownLeft className="h-3 w-3" />
            for new line
          </span>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: frontend/src/components/ImprovedSidebar.tsx
================================================
'use client'

import { useState } from 'react';
import { Search, Plus, MessageSquare, Library, Settings, User, ChevronDown, MoreHorizontal, Edit, Trash } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

interface ChatItem {
  id: string;
  title: string;
  timestamp: string;
  preview?: string;
}

interface ImprovedSidebarProps {
  currentChatId?: string | null;
  onNewChat: () => void;
  onSelectChat: (chatId: string) => void;
  onDeleteChat: (chatId: string) => void;
}

export function ImprovedSidebar({ 
  currentChatId, 
  onNewChat, 
  onSelectChat, 
  onDeleteChat 
}: ImprovedSidebarProps) {
  const [searchQuery, setSearchQuery] = useState('');
  const [isCollapsed, setIsCollapsed] = useState(false);

  // Mock chat data - replace with real data from your store
  const mockChats: ChatItem[] = [
    {
      id: '1',
      title: 'PhD Dissertation Research',
      timestamp: 'Yesterday',
      preview: 'Create a comprehensive PhD dissertation on AI-Powered Educational Technology Impact...'
    },
    {
      id: '2', 
      title: 'Market Research Analysis',
      timestamp: '2 days ago',
      preview: 'Industry analysis for strategic insights...'
    },
    {
      id: '3',
      title: 'Technical Report Writing',
      timestamp: '1 week ago',
      preview: 'Complex data analysis and clear conclusions...'
    }
  ];

  const filteredChats = mockChats.filter(chat =>
    chat.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    chat.preview?.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const formatTimestamp = (timestamp: string) => {
    // Simple timestamp formatting - enhance as needed
    return timestamp;
  };

  return (
    <div className="flex flex-col h-full bg-gray-900 border-r border-gray-700 text-white">
      {/* Header with New Chat button */}
      <div className="p-3 border-b border-gray-700">
        <Button
          onClick={onNewChat}
          className="w-full bg-transparent border border-gray-600 hover:bg-gray-800 text-white justify-start gap-2"
          variant="outline"
        >
          <Plus className="h-4 w-4" />
          New chat
        </Button>
      </div>

      {/* Search */}
      <div className="p-3 border-b border-gray-700">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <Input
            placeholder="Search chats"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500"
          />
        </div>
      </div>

      {/* Chat History */}
      <div className="flex-1 overflow-y-auto">
        <div className="p-2">
          {filteredChats.length > 0 ? (
            <div className="space-y-1">
              {filteredChats.map((chat) => (
                <div
                  key={chat.id}
                  className={`group flex items-center justify-between p-3 rounded-lg cursor-pointer transition-colors ${
                    currentChatId === chat.id
                      ? 'bg-gray-800 border border-gray-600'
                      : 'hover:bg-gray-800'
                  }`}
                  onClick={() => onSelectChat(chat.id)}
                >
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 mb-1">
                      <MessageSquare className="h-4 w-4 text-gray-400 flex-shrink-0" />
                      <h3 className="text-sm font-medium text-white truncate">
                        {chat.title}
                      </h3>
                    </div>
                    {chat.preview && (
                      <p className="text-xs text-gray-400 line-clamp-2 leading-relaxed">
                        {chat.preview}
                      </p>
                    )}
                    <p className="text-xs text-gray-500 mt-1">
                      {formatTimestamp(chat.timestamp)}
                    </p>
                  </div>
                  
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 p-0 text-gray-400 hover:text-white"
                        onClick={(e) => e.stopPropagation()}
                      >
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end" className="bg-gray-800 border-gray-600">
                      <DropdownMenuItem className="text-gray-300 hover:bg-gray-700">
                        <Edit className="h-4 w-4 mr-2" />
                        Rename
                      </DropdownMenuItem>
                      <DropdownMenuItem 
                        className="text-red-400 hover:bg-gray-700"
                        onClick={(e) => {
                          e.stopPropagation();
                          onDeleteChat(chat.id);
                        }}
                      >
                        <Trash className="h-4 w-4 mr-2" />
                        Delete
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8 text-gray-400">
              {searchQuery ? 'No chats found' : 'No conversations yet'}
            </div>
          )}
        </div>
      </div>

      {/* Navigation Menu */}
      <div className="border-t border-gray-700 p-2">
        <div className="space-y-1">
          <Button
            variant="ghost"
            className="w-full justify-start gap-3 text-gray-300 hover:text-white hover:bg-gray-800"
          >
            <Library className="h-4 w-4" />
            Library
          </Button>
          
          <Button
            variant="ghost"
            className="w-full justify-start gap-3 text-gray-300 hover:text-white hover:bg-gray-800"
          >
            <Settings className="h-4 w-4" />
            Settings
          </Button>
        </div>
      </div>

      {/* User Profile */}
      <div className="border-t border-gray-700 p-3">
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button
              variant="ghost"
              className="w-full justify-start gap-3 text-gray-300 hover:text-white hover:bg-gray-800 p-2"
            >
              <Avatar className="h-6 w-6">
                <AvatarImage src="/api/placeholder/32/32" alt="User" />
                <AvatarFallback className="bg-blue-600 text-white text-xs">
                  U
                </AvatarFallback>
              </Avatar>
              <span className="text-sm">User Account</span>
              <ChevronDown className="h-4 w-4 ml-auto" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="start" className="bg-gray-800 border-gray-600 w-56">
            <DropdownMenuItem className="text-gray-300 hover:bg-gray-700">
              <User className="h-4 w-4 mr-2" />
              Profile
            </DropdownMenuItem>
            <DropdownMenuItem className="text-gray-300 hover:bg-gray-700">
              <Settings className="h-4 w-4 mr-2" />
              Settings
            </DropdownMenuItem>
            <DropdownMenuSeparator className="bg-gray-600" />
            <DropdownMenuItem className="text-red-400 hover:bg-gray-700">
              Sign out
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </div>
  );
}


================================================
FILE: frontend/src/components/InputForm.tsx
================================================
import React, { useState, useRef, useEffect, useCallback } from "react";
import { ErrorBoundary } from "react-error-boundary";
import { Button } from "@/components/ui/button";
import { SquarePen, Brain, Send, StopCircle, Zap, Cpu, Paperclip, X, Plus, ArrowUp, Camera, FolderOpen, Settings, Mic, ScreenShare } from "lucide-react";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { usePrefsStore } from "@/store/usePrefs";
import { ContextUploader } from "./ui/ContextUploader";
import { MicButton } from "./chat/MicButton";

// Updated InputFormProps
interface InputFormProps {
  onSubmit: (inputValue: string, writeupType: string, model: string, fileIds: string[]) => void;
  onCancel: () => void;
  isLoading: boolean;
  hasHistory: boolean;
}

const InputFormComponent: React.FC<InputFormProps> = ({
  onSubmit,
  onCancel,
  isLoading,
  hasHistory,
}) => {
  const [internalInputValue, setInternalInputValue] = useState("");
  const [writeupType, setWriteupType] = useState("general");
  const { model } = usePrefsStore();
  const [fileIds, setFileIds] = useState<string[]>([]);
  const [showUploader, setShowUploader] = useState(false);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // Memoize callbacks to prevent unnecessary re-renders
  const handleWriteupTypeChange = useCallback((value: string) => {
    setWriteupType(value);
  }, []);

  const autoResize = useCallback((el: HTMLTextAreaElement) => {
    el.style.height = "auto";
    const maxHeight = 300; // Maximum height in pixels
    const newHeight = Math.min(el.scrollHeight, maxHeight);
    el.style.height = `${newHeight}px`;
    el.style.overflowY = newHeight >= maxHeight ? "auto" : "hidden";
  }, []);

  useEffect(() => {
    if (textareaRef.current) {
      autoResize(textareaRef.current);
    }
  }, [internalInputValue, autoResize]);

  const handleInternalSubmit = useCallback((e?: React.FormEvent) => {
    if (e) e.preventDefault();
    if (!internalInputValue.trim() && fileIds.length === 0) return;
    onSubmit(internalInputValue, writeupType, model, fileIds);
    setInternalInputValue("");
    setFileIds([]);
    setShowUploader(false);
  }, [internalInputValue, writeupType, model, fileIds, onSubmit]);

  const handleKeyDown = useCallback((e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleInternalSubmit();
    }
  }, [handleInternalSubmit]);

  const isSubmitDisabled = (!internalInputValue.trim() && fileIds.length === 0) || isLoading;

  const handleTakeScreenshot = async () => {
    try {
      // Request screen sharing permission for screenshot capture
      const stream = await navigator.mediaDevices.getDisplayMedia({
        video: true,
        audio: false
      });
      
      // Create a video element to capture the screenshot
      const video = document.createElement('video');
      video.srcObject = stream;
      video.play();
      
      video.onloadedmetadata = () => {
        // Create canvas to capture the frame
        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext('2d');
        ctx?.drawImage(video, 0, 0);
        
        // Convert to blob and add to files
        canvas.toBlob((blob) => {
          if (blob) {
            const file = new File([blob], `screenshot-${Date.now()}.png`, { type: 'image/png' });
            // This would need integration with file upload system
            console.log('Screenshot captured:', file);
          }
        }, 'image/png');
        
        // Stop the stream
        stream.getTracks().forEach(track => track.stop());
      };
    } catch (error) {
      console.error('Error taking screenshot:', error);
    }
  };

  const handleTakePhoto = async () => {
    try {
      // Request camera permission
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { facingMode: 'environment' }
      });
      
      // Create a video element to show camera feed
      const video = document.createElement('video');
      video.srcObject = stream;
      video.play();
      
      // Create a modal or inline camera interface
      // For now, we'll auto-capture after a short delay
      setTimeout(() => {
        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext('2d');
        ctx?.drawImage(video, 0, 0);
        
        canvas.toBlob((blob) => {
          if (blob) {
            const file = new File([blob], `photo-${Date.now()}.jpg`, { type: 'image/jpeg' });
            // This would need integration with file upload system
            console.log('Photo captured:', file);
          }
        }, 'image/jpeg');
        
        // Stop the stream
        stream.getTracks().forEach(track => track.stop());
      }, 3000); // 3 second delay for user to position camera
      
    } catch (error) {
      console.error('Error taking photo:', error);
    }
  };

  const handleAddFiles = () => {
    setShowUploader(!showUploader);
  };

  const handleTools = () => {
    // Implementation for tools - could open a tools sidebar or modal
    console.log("Tools clicked");
  };

  return (
    <div className="w-full max-w-4xl mx-auto">
      <div className="flex flex-col gap-4 p-6">
        {showUploader && <ContextUploader onFileIdsChange={setFileIds} />}
        
        {/* Main input container */}
        <div className="relative">
          <div className="relative bg-gray-800 rounded-2xl border border-gray-700 p-1">
            <div className="flex items-start gap-2">
              {/* Plus button dropdown */}
              <div className="flex-shrink-0 mt-3 ml-3">
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button
                      type="button"
                      size="icon"
                      className="bg-transparent hover:bg-gray-700 h-8 w-8 text-gray-400 hover:text-white"
                    >
                      <Plus className="h-5 w-5" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="start" className="w-56 bg-gray-800 text-white border-gray-700">
                    <DropdownMenuItem onClick={handleTakeScreenshot} className="flex items-center gap-2 hover:bg-gray-700 cursor-pointer">
                      <ScreenShare className="h-4 w-4" />
                      Take screenshot
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={handleTakePhoto} className="flex items-center gap-2 hover:bg-gray-700 cursor-pointer">
                      <Camera className="h-4 w-4" />
                      Take photo
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={handleAddFiles} className="flex items-center gap-2 hover:bg-gray-700 cursor-pointer">
                      <FolderOpen className="h-4 w-4" />
                      Add photos & files
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={handleTools} className="flex items-center gap-2 hover:bg-gray-700 cursor-pointer">
                      <Settings className="h-4 w-4" />
                      Tools
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>

              {/* Input field */}
              <div className="flex-grow">
                <Textarea
                  ref={textareaRef}
                  value={internalInputValue}
                  onChange={(e) => {
                    if (e.target.value.length > 15000) {
                      return;
                    }
                    setInternalInputValue(e.target.value)
                  }}
                  onInput={(e) => autoResize(e.currentTarget)}
                  onKeyDown={handleKeyDown}
                  placeholder="How can I help you today?"
                  className="w-full bg-transparent border-none px-2 py-3 text-white placeholder-gray-400 resize-none focus:outline-none focus:ring-0 min-h-[56px] overflow-y-auto"
                  rows={1}
                  aria-label="Prompt"
                  style={{ 
                    maxHeight: '300px',
                    wordWrap: 'break-word',
                    whiteSpace: 'pre-wrap'
                  }}
                />
              </div>

              {/* Right side buttons */}
              <div className="flex items-center gap-2 mt-3 mr-3">
                <MicButton onTranscript={setInternalInputValue} />
                <Button
                  type="submit"
                  size="icon"
                  className="rounded-full bg-white text-black p-2 h-10 w-10 hover:bg-gray-200 active:scale-95 transition disabled:opacity-50"
                  disabled={isSubmitDisabled}
                  onClick={handleInternalSubmit}
                >
                  {isLoading ? (
                    <StopCircle className="h-6 w-6 text-red-500" onClick={onCancel} />
                  ) : (
                    <ArrowUp className="h-6 w-6" />
                  )}
                </Button>
              </div>
            </div>
          </div>
        </div>

        {/* Mode selector */}
        <div className="flex items-center justify-center">
          <Select value={writeupType} onValueChange={handleWriteupTypeChange}>
            <SelectTrigger className="w-[200px] bg-gray-800 border-gray-700 text-center text-white">
              <SelectValue placeholder="Write-up Type" />
            </SelectTrigger>
            <SelectContent className="bg-gray-800 text-white border-gray-700">
              <SelectItem value="general">General</SelectItem>
              <SelectItem value="essay">Essay</SelectItem>
              <SelectItem value="report">Report</SelectItem>
              <SelectItem value="case_study">Case Study</SelectItem>
              <SelectItem value="case_scenario">Case Scenario</SelectItem>
              <SelectItem value="dissertation">Dissertation</SelectItem>
              <SelectItem value="reflection">Reflection</SelectItem>
              <SelectItem value="coding">Coding</SelectItem>
              <SelectItem value="presentation">Presentation</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>
    </div>
  );
};

// Error fallback component
const ErrorFallback: React.FC = () => (
  <div className="w-full max-w-4xl mx-auto p-6">
    <div className="bg-red-500/10 border border-red-500/20 rounded-lg p-4 text-center">
      <p className="text-red-400">Failed to load input form. Please refresh the page.</p>
    </div>
  </div>
);

// Export wrapped component
export const InputForm: React.FC<InputFormProps> = (props) => (
  <ErrorBoundary FallbackComponent={ErrorFallback}>
    <InputFormComponent {...props} />
  </ErrorBoundary>
);



================================================
FILE: frontend/src/components/LayoutManager.tsx
================================================
'use client'

import { usePathname } from 'next/navigation'
import Sidebar from '@/components/nav/Sidebar'
import React from 'react'

export default function LayoutManager({
  children,
}: {
  children: React.ReactNode
}) {
  const pathname = usePathname()
  const isLandingPage = pathname === '/'

  if (isLandingPage) {
    return <>{children}</>
  }

  return (
    <div className="grid min-h-screen w-full md:grid-cols-[220px_1fr] lg:grid-cols-[280px_1fr]">
      <Sidebar />
      <div className="flex flex-col">
        <main className="flex flex-1 flex-col gap-4 p-4 lg:gap-6 lg:p-6">
          {children}
        </main>
      </div>
    </div>
  )
}



================================================
FILE: frontend/src/components/LocaleSelect.tsx
================================================
"use client";

import * as React from "react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

export function LocaleSelect() {
  return (
    <Select>
      <SelectTrigger className="w-[180px]">
        <SelectValue placeholder="Language" />
      </SelectTrigger>
      <SelectContent>
        <SelectItem value="en-US">English (United States)</SelectItem>
        <SelectItem value="en-GB">English (United Kingdom)</SelectItem>
        <SelectItem value="es-ES">Español (España)</SelectItem>
      </SelectContent>
    </Select>
  );
}



================================================
FILE: frontend/src/components/MessageBubble.tsx
================================================
'use client'

import React, { useState } from 'react';
import { ChevronDown, ChevronRight, Brain, Copy, ThumbsUp, ThumbsDown } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { DownloadMenu } from '@/components/DownloadMenu';
import { ResponseActions } from '@/components/ResponseActions';
import type { Message } from '@/types';

interface MessageBubbleProps {
  message: Message;
  isLast: boolean;
  reasoning?: string;
  traceId?: string | null;
  totalCost?: number;
  plagiarismScore?: number;
  qualityScore?: number;
  derivatives?: { kind: string; url: string }[];
}

export function MessageBubble({
  message,
  isLast,
  reasoning,
  traceId,
  totalCost,
  plagiarismScore,
  qualityScore,
  derivatives = []
}: MessageBubbleProps) {
  const [showReasoning, setShowReasoning] = useState(false);
  const [copied, setCopied] = useState(false);

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(
        typeof message.content === 'string' ? message.content : JSON.stringify(message.content)
      );
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy:', error);
    }
  };

  const handleFeedback = (type: 'positive' | 'negative') => {
    // TODO: Implement feedback API call
    console.log(`Feedback: ${type} for message ${message.id}`);
  };

  if (message.type === 'human') {
    return (
      <div className="mb-6 w-full">
        <div className="flex justify-end">
          <div className="max-w-[70%] min-w-0">
            <div className="bg-primary text-primary-foreground px-4 py-3 rounded-2xl rounded-br-md">
              <div className="text-sm whitespace-pre-wrap break-words overflow-wrap-anywhere">
                {typeof message.content === 'string' ? message.content : JSON.stringify(message.content)}
              </div>
            </div>
            <div className="text-xs text-muted-foreground mt-1 text-right">
              You • {message.timestamp ? new Date(message.timestamp).toLocaleTimeString() : 'now'}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="mb-6 w-full">
      <div className="flex justify-start">
        <div className="max-w-[85%] min-w-0">
          <div className="bg-secondary text-foreground px-4 py-3 rounded-2xl rounded-bl-md">
            <div className="text-sm whitespace-pre-wrap break-words overflow-wrap-anywhere leading-relaxed">
              {typeof message.content === 'string' ? message.content : JSON.stringify(message.content)}
            </div>
            
            {/* Reasoning Toggle */}
            {reasoning && (
              <div className="mt-4 border-t border-border pt-3">
                <button
                  onClick={() => setShowReasoning(!showReasoning)}
                  className="flex items-center gap-2 text-xs text-muted-foreground hover:text-foreground transition-colors"
                >
                  {showReasoning ? (
                    <ChevronDown className="h-3 w-3" />
                  ) : (
                    <ChevronRight className="h-3 w-3" />
                  )}
                  <Brain className="h-3 w-3" />
                  Show reasoning
                </button>
                
                {showReasoning && (
                  <div className="mt-2 p-3 bg-muted/50 rounded-lg border border-border">
                    <div className="text-xs text-muted-foreground font-mono whitespace-pre-wrap break-words">
                      {reasoning}
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Download Menu for completed responses */}
            {isLast && traceId && derivatives.length > 0 && (
              <div className="mt-4 border-t border-border pt-3">
                <DownloadMenu
                  traceId={traceId}
                  derivatives={derivatives}
                  plagiarismScore={plagiarismScore}
                  qualityScore={qualityScore}
                  onOriginalityCheck={() => {
                    window.open(`/originality/${traceId}`, '_blank');
                  }}
                />
              </div>
            )}
          </div>

          {/* Message Actions - ChatGPT Style */}
          <div className="flex items-center justify-between mt-2">
            <div className="text-xs text-muted-foreground">
              HandyWriterz • {message.timestamp ? new Date(message.timestamp).toLocaleTimeString() : 'now'}
            </div>
            
            <ResponseActions
              messageId={message.id || 'unknown'}
              messageContent={typeof message.content === 'string' ? message.content : JSON.stringify(message.content)}
              conversationId={traceId}
            />
          </div>

          {/* Metrics for completed responses */}
          {isLast && (totalCost > 0 || plagiarismScore > 0 || qualityScore > 0) && (
            <div className="flex items-center gap-4 mt-2 text-xs text-muted-foreground">
              {totalCost > 0 && <span>Cost: ${totalCost.toFixed(4)}</span>}
              {plagiarismScore > 0 && <span>Originality: {(100 - plagiarismScore).toFixed(1)}%</span>}
              {qualityScore > 0 && <span>Quality: {qualityScore.toFixed(1)}%</span>}
            </div>
          )}

          {copied && (
            <div className="text-xs text-green-400 mt-1">
              Copied to clipboard!
            </div>
          )}
        </div>
      </div>
    </div>
  );
}


================================================
FILE: frontend/src/components/MessageInputBar.tsx
================================================
'use client'

import React, { useState, useRef, useCallback, useEffect } from 'react';
import { Plus, ArrowUp, Mic, X, ChevronDown } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { useToast } from '@/components/ui/use-toast';

interface FileAttachment {
  id: string;
  name: string;
  size: number;
  type: string;
  file: File;
}

interface MessageInputBarProps {
  onSubmit: (inputValue: string, writeupType: string, model: string, fileIds: string[]) => void;
  onCancel: () => void;
  isLoading: boolean;
  disabled?: boolean;
}

const writeUpTypes = [
  { value: 'general', label: 'General' },
  { value: 'essay', label: 'Essay' },
  { value: 'report', label: 'Report' },
  { value: 'dissertation', label: 'PhD Dissertation' },
  { value: 'case_study', label: 'Case Study' },
  { value: 'market_research', label: 'Market Research' },
  { value: 'technical_report', label: 'Technical Report' },
  { value: 'presentation', label: 'Presentation' },
  { value: 'coding', label: 'Coding' },
];

interface MessageInputBarWithPromptProps extends MessageInputBarProps {
  prompt?: string;
}

export const MessageInputBar = React.forwardRef<
  { setTextFromExample: (text: string) => void },
  MessageInputBarWithPromptProps
>(function MessageInputBar({
  onSubmit,
  onCancel,
  isLoading,
  disabled = false,
  prompt = "What are you working on?",
}, ref) {
  const [inputValue, setInputValue] = useState('');
  const [writeupType, setWriteupType] = useState('general');
  const [attachedFiles, setAttachedFiles] = useState<FileAttachment[]>([]);
  const [canSend, setCanSend] = useState(false);
  const [isDragOver, setIsDragOver] = useState(false);
  const { toast } = useToast();

  const handleWriteupTypeChange = useCallback((value: string) => {
    setWriteupType(value);
  }, []);

  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Expose method for parent to set text (for example cards)
  const setTextFromExample = useCallback((text: string) => {
    setInputValue(text);
    if (textareaRef.current) {
      textareaRef.current.focus();
      // Auto-resize textarea
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    }
  }, []);

  // Expose methods via ref
  React.useImperativeHandle(ref, () => ({
    setTextFromExample,
  }), [setTextFromExample]);

  useEffect(() => {
    setCanSend((inputValue.trim().length > 0 || attachedFiles.length > 0) && !isLoading);
  }, [inputValue, attachedFiles.length, isLoading]);

  const handleFileChange = useCallback((files: FileList | null) => {
    if (!files) return;
    const newFiles = Array.from(files);
    const newAttachments: FileAttachment[] = [];

    newFiles.forEach(file => {
      if (file.size > 100 * 1024 * 1024) {
        toast({
          title: "File too large",
          description: `File ${file.name} exceeds the 100MB limit.`,
          variant: "destructive",
        });
        return;
      }

      newAttachments.push({
        id: `${file.name}-${file.lastModified}`,
        name: file.name,
        size: file.size,
        type: file.type,
        file,
      });
    });

    setAttachedFiles(prev => {
      if (prev.length + newAttachments.length > 10) {
        toast({
          title: "File limit reached",
          description: "You can attach a maximum of 10 files.",
          variant: "destructive",
        });
        return prev;
      }
      return [...prev, ...newAttachments];
    });

    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  }, [toast]);

  const handleDragEvents = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDragEnter = (e: React.DragEvent) => {
    handleDragEvents(e);
    setIsDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    handleDragEvents(e);
    setIsDragOver(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    handleDragEvents(e);
    setIsDragOver(false);
    handleFileChange(e.dataTransfer.files);
  };

  const handleSubmit = useCallback((e?: React.FormEvent) => {
    if (e) e.preventDefault();
    if (!canSend || disabled) return;

    // This is a mock upload, replace with actual upload logic
    const fileIds = attachedFiles.map(f => f.id);
    onSubmit(inputValue, writeupType, 'gemini-2.5-pro', fileIds);

    setInputValue('');
    setAttachedFiles([]);
    if (textareaRef.current) {
      textareaRef.current.value = '';
      textareaRef.current.style.height = 'auto';
    }
  }, [inputValue, writeupType, attachedFiles, canSend, disabled, onSubmit]);

  const handleKeyDown = useCallback((e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSubmit();
    }
  }, [handleSubmit]);

  const removeFile = useCallback((fileId: string) => {
    setAttachedFiles(prev => prev.filter(file => file.id !== fileId));
  }, []);

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    }
  }, [inputValue]);

  return (
    <div
      className={`fixed bottom-0 left-0 right-0 bg-background/95 backdrop-blur-sm border-t border-border transition-all duration-200 ${
        isDragOver ? 'bg-blue-900/20 border-blue-500/50' : ''
      }`}
      style={{ marginLeft: '240px' }} // Account for sidebar width
      onDragEnter={handleDragEnter}
      onDragLeave={handleDragLeave}
      onDragOver={handleDragEvents}
      onDrop={handleDrop}
    >
      <div className="max-w-2xl mx-auto px-4 py-4 flex flex-col items-center">
        {/* Prompt above input bar */}
        {prompt && (
          <div className="mb-2 text-lg md:text-xl font-semibold text-center text-foreground/90 dark:text-white">
            {prompt}
          </div>
        )}
        {/* File Chips - Outside input container */}
        {attachedFiles.length > 0 && (
          <div className="mb-2 flex flex-wrap gap-2">
            {attachedFiles.map((file) => (
              <div
                key={file.id}
                className="inline-flex items-center gap-2 px-3 py-1 bg-gray-800/80 border border-gray-700 rounded-full text-sm group hover:bg-gray-750 transition-colors"
              >
                <span className="text-gray-300 font-medium truncate max-w-[150px]">
                  {file.name}
                </span>
                <span className="text-gray-500 text-xs">
                  {formatFileSize(file.size)}
                </span>
                <button
                  onClick={() => removeFile(file.id)}
                  className="text-gray-500 hover:text-red-400 transition-colors ml-1 p-0.5 rounded-full hover:bg-gray-700"
                >
                  <X className="h-3 w-3" />
                </button>
              </div>
            ))}
          </div>
        )}

        {/* Hidden file input */}
        <input
          ref={fileInputRef}
          type="file"
          multiple
          accept=".pdf,.doc,.docx,.txt,.md,.csv,.xlsx,.ppt,.pptx,.jpg,.jpeg,.png,.gif,.mp3,.wav,.mp4"
          onChange={(e) => handleFileChange(e.target.files)}
          className="hidden"
        />

        {/* Unified Input Bar - Matching design from images */}
        <div className="flex items-center bg-background border border-border rounded-2xl px-3 py-2 gap-2 focus-within:border-primary focus-within:ring-1 focus-within:ring-primary/30 transition-all shadow-lg w-full">
          {/* + Files Button - Direct file picker */}
          <Button
            disabled={disabled || attachedFiles.length >= 10}
            variant="ghost"
            size="icon"
            onClick={() => fileInputRef.current?.click()}
            className="h-10 w-10 text-muted-foreground hover:text-primary hover:bg-accent rounded-xl transition-all flex-shrink-0"
            title="Add files"
          >
            <Plus className="h-5 w-5" />
          </Button>

          {/* Write-up Type Dropdown - Prominent */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="secondary"
                disabled={disabled}
                className="h-10 px-4 text-base font-semibold rounded-xl flex-shrink-0 transition-all"
              >
                <span>
                  {writeUpTypes.find(t => t.value === writeupType)?.label}
                </span>
                <ChevronDown className="h-4 w-4 ml-1" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56 bg-background border-border" side="top" align="start">
              {writeUpTypes.map((type) => (
                <DropdownMenuItem
                  key={type.value}
                  onClick={() => handleWriteupTypeChange(type.value)}
                  className={`text-foreground hover:bg-accent focus:bg-accent cursor-pointer ${
                    writeupType === type.value ? 'bg-accent/50' : ''
                  }`}
                >
                  {type.label}
                  {writeupType === type.value && (
                    <span className="ml-auto text-primary">✓</span>
                  )}
                </DropdownMenuItem>
              ))}
            </DropdownMenuContent>
          </DropdownMenu>

          {/* Textarea - Takes remaining space */}
          <div className="flex-1 relative">
            <Textarea
              ref={textareaRef}
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder="Type your message..."
              className="w-full min-h-[40px] max-h-32 resize-none bg-transparent border-none px-3 py-2 pr-10 text-foreground placeholder-muted-foreground focus:outline-none focus:ring-0 text-base"
              disabled={disabled || isLoading}
              rows={1}
            />
            {/* Mic Button inside textarea */}
            <Button
              disabled={disabled}
              variant="ghost"
              size="icon"
              className="absolute right-1 top-1/2 transform -translate-y-1/2 h-8 w-8 text-muted-foreground hover:text-primary hover:bg-accent/50 rounded-lg transition-all"
              title="Voice input"
            >
              <Mic className="h-4 w-4" />
            </Button>
          </div>

          {/* Send/Cancel Button */}
          {isLoading ? (
            <Button
              onClick={onCancel}
              size="icon"
              className="h-10 w-10 bg-destructive hover:bg-destructive/80 text-white rounded-xl transition-all flex-shrink-0"
              title="Cancel"
            >
              <X className="h-5 w-5" />
            </Button>
          ) : (
            <Button
              onClick={handleSubmit}
              disabled={!canSend || disabled}
              size="icon"
              className={`h-10 w-10 rounded-xl transition-all duration-200 flex-shrink-0 ${
                canSend && !disabled
                  ? 'bg-primary hover:bg-primary/90 text-white shadow-lg shadow-primary/25 hover:shadow-primary/40 hover:scale-105'
                  : 'bg-muted text-muted-foreground cursor-not-allowed opacity-60'
              }`}
              title="Send message"
            >
              <ArrowUp className={`h-5 w-5 transition-transform ${canSend && !disabled ? 'rotate-0' : 'rotate-12'}`} />
            </Button>
          )}
        </div>
      </div>

      {/* Drag Overlay */}
      {isDragOver && (
        <div className="absolute inset-0 bg-blue-500/10 flex items-center justify-center pointer-events-none z-50">
          <div className="text-center p-6 border-2 border-dashed border-blue-400 rounded-xl bg-blue-900/20">
            <Plus className="h-8 w-8 text-blue-400 mx-auto mb-2" />
            <p className="text-lg font-medium text-blue-300">Drop files to attach</p>
            <p className="text-sm text-blue-400">Up to 10 files, 100MB each</p>
          </div>
        </div>
      )}
    </div>
  );
});



================================================
FILE: frontend/src/components/PaymentDialog.tsx
================================================
'use client';

import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { CheckCircle, CreditCard, Wallet } from 'lucide-react';

interface PaymentDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  currentTier?: string;
}

interface PricingTier {
  name: string;
  price_usd: number;
  credits: number;
  features: string[];
  max_words: number;
}

const PRICING_TIERS: Record<string, PricingTier> = {
  free: {
    name: 'Free',
    price_usd: 0,
    credits: 3,
    features: ['3 documents', 'Basic templates', 'Community support'],
    max_words: 1000
  },
  basic: {
    name: 'Basic',
    price_usd: 19.99,
    credits: 50,
    features: ['50 documents', 'Advanced templates', 'Email support', 'Export to PDF/DOCX'],
    max_words: 5000
  },
  pro: {
    name: 'Pro',
    price_usd: 49.99,
    credits: 200,
    features: ['200 documents', 'All templates', 'Priority support', 'Advanced AI models', 'Plagiarism check'],
    max_words: 15000
  },
  enterprise: {
    name: 'Enterprise',
    price_usd: 199.99,
    credits: 1000,
    features: ['Unlimited documents', 'Custom templates', '24/7 support', 'Team collaboration', 'API access'],
    max_words: 50000
  }
};

export function PaymentDialog({ open, onOpenChange, currentTier = 'free' }: PaymentDialogProps) {
  const [selectedTier, setSelectedTier] = useState<string>('');
  const [selectedProvider, setSelectedProvider] = useState<'paystack' | 'coinbase_commerce'>('paystack');
  const [loading, setLoading] = useState(false);

  const handleUpgrade = async (tier: string) => {
    if (tier === 'free' || tier === currentTier) return;
    
    setLoading(true);
    try {
      const response = await fetch('/api/billing/upgrade', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}` // Dynamic.xyz token
        },
        body: JSON.stringify({
          tier,
          provider: selectedProvider,
          metadata: {
            upgrade_from: currentTier,
            frontend_version: '1.0.0'
          }
        })
      });

      const data = await response.json();

      if (data.success) {
        // Redirect to payment page
        window.open(data.payment_data.payment_url, '_blank');
        onOpenChange(false);
      } else {
        console.error('Payment creation failed:', data);
        alert('Failed to create payment. Please try again.');
      }
    } catch (error) {
      console.error('Error creating payment:', error);
      alert('Error creating payment. Please check your connection.');
    } finally {
      setLoading(false);
    }
  };

  const isCurrentTier = (tier: string) => tier === currentTier;
  const isDowngrade = (tier: string) => {
    const tiers = ['free', 'basic', 'pro', 'enterprise'];
    return tiers.indexOf(tier) < tiers.indexOf(currentTier);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Choose Your Plan</DialogTitle>
        </DialogHeader>

        {/* Payment Provider Selection */}
        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-3">Payment Method</h3>
          <div className="flex gap-4">
            <Button
              variant={selectedProvider === 'paystack' ? 'default' : 'outline'}
              onClick={() => setSelectedProvider('paystack')}
              className="flex items-center gap-2"
            >
              <CreditCard className="w-4 h-4" />
              Card Payment (Paystack)
            </Button>
            <Button
              variant={selectedProvider === 'coinbase_commerce' ? 'default' : 'outline'}
              onClick={() => setSelectedProvider('coinbase_commerce')}
              className="flex items-center gap-2"
            >
              <Wallet className="w-4 h-4" />
              Crypto Payment (USDC)
            </Button>
          </div>
        </div>

        {/* Pricing Tiers */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {Object.entries(PRICING_TIERS).map(([key, tier]) => (
            <Card 
              key={key} 
              className={`relative ${isCurrentTier(key) ? 'ring-2 ring-primary' : ''} ${
                key === 'pro' ? 'border-primary' : ''
              }`}
            >
              {key === 'pro' && (
                <Badge className="absolute -top-2 left-1/2 transform -translate-x-1/2 bg-primary">
                  Most Popular
                </Badge>
              )}
              
              {isCurrentTier(key) && (
                <Badge className="absolute -top-2 left-1/2 transform -translate-x-1/2 bg-green-600">
                  Current Plan
                </Badge>
              )}

              <CardHeader className="text-center">
                <CardTitle className="text-xl">{tier.name}</CardTitle>
                <div className="text-3xl font-bold">
                  ${tier.price_usd}
                  {tier.price_usd > 0 && <span className="text-sm font-normal">/month</span>}
                </div>
                <CardDescription>
                  {tier.credits} credits • Up to {tier.max_words.toLocaleString()} words
                </CardDescription>
              </CardHeader>

              <CardContent>
                <ul className="space-y-2 mb-4">
                  {tier.features.map((feature, index) => (
                    <li key={index} className="flex items-center gap-2 text-sm">
                      <CheckCircle className="w-4 h-4 text-green-600 flex-shrink-0" />
                      {feature}
                    </li>
                  ))}
                </ul>

                <Button
                  className="w-full"
                  variant={isCurrentTier(key) ? 'secondary' : 'default'}
                  disabled={isCurrentTier(key) || isDowngrade(key) || loading}
                  onClick={() => handleUpgrade(key)}
                >
                  {loading ? 'Processing...' : 
                   isCurrentTier(key) ? 'Current Plan' :
                   isDowngrade(key) ? 'Downgrade Not Available' :
                   key === 'free' ? 'Free Forever' : 
                   `Upgrade to ${tier.name}`}
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Payment Information */}
        <div className="mt-6 p-4 bg-muted rounded-lg">
          <h4 className="font-semibold mb-2">Payment Information</h4>
          <ul className="text-sm space-y-1">
            <li>• All subscriptions are monthly and auto-renewing</li>
            <li>• Credits reset each month on your renewal date</li>
            <li>• You can cancel anytime from your account settings</li>
            <li>• Crypto payments are processed securely via Coinbase Commerce</li>
            <li>• Card payments are processed securely via Paystack</li>
          </ul>
        </div>
      </DialogContent>
    </Dialog>
  );
}

export default PaymentDialog;


================================================
FILE: frontend/src/components/PaymentSuccess.tsx
================================================
'use client';

import React, { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CheckCircle, XCircle, Loader2 } from 'lucide-react';

interface PaymentVerificationState {
  status: 'loading' | 'success' | 'failed' | 'pending';
  message: string;
  tier?: string;
}

export function PaymentSuccess() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [verification, setVerification] = useState<PaymentVerificationState>({
    status: 'loading',
    message: 'Verifying your payment...'
  });

  useEffect(() => {
    const verifyPayment = async () => {
      const reference = searchParams.get('reference') || searchParams.get('charge_id');
      const provider = searchParams.get('provider') || 'paystack';

      if (!reference) {
        setVerification({
          status: 'failed',
          message: 'Payment reference is missing. Please contact support.'
        });
        return;
      }

      try {
        const response = await fetch('/api/billing/verify-payment', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
          },
          body: JSON.stringify({
            reference,
            provider
          })
        });

        const data = await response.json();

        if (data.success) {
          setVerification({
            status: 'success',
            message: `Payment successful! Your subscription has been upgraded to ${data.tier}.`,
            tier: data.tier
          });
        } else {
          setVerification({
            status: data.status === 'pending' ? 'pending' : 'failed',
            message: data.message || 'Payment verification failed.'
          });
        }
      } catch (error) {
        console.error('Payment verification error:', error);
        setVerification({
          status: 'failed',
          message: 'Error verifying payment. Please contact support.'
        });
      }
    };

    verifyPayment();
  }, [searchParams]);

  const handleContinue = () => {
    router.push('/chat');
  };

  const handleRetry = () => {
    router.push('/settings/billing');
  };

  const getIcon = () => {
    switch (verification.status) {
      case 'loading':
        return <Loader2 className="w-16 h-16 text-blue-600 animate-spin" />;
      case 'success':
        return <CheckCircle className="w-16 h-16 text-green-600" />;
      case 'pending':
        return <Loader2 className="w-16 h-16 text-yellow-600" />;
      case 'failed':
        return <XCircle className="w-16 h-16 text-red-600" />;
    }
  };

  const getTitle = () => {
    switch (verification.status) {
      case 'loading':
        return 'Verifying Payment';
      case 'success':
        return 'Payment Successful!';
      case 'pending':
        return 'Payment Pending';
      case 'failed':
        return 'Payment Failed';
    }
  };

  const getButtonText = () => {
    switch (verification.status) {
      case 'success':
        return 'Continue to Chat';
      case 'pending':
        return 'Check Again Later';
      case 'failed':
        return 'Try Again';
      default:
        return 'Please Wait...';
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-background p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div className="flex justify-center mb-4">
            {getIcon()}
          </div>
          <CardTitle className="text-2xl">{getTitle()}</CardTitle>
          <CardDescription className="text-center">
            {verification.message}
          </CardDescription>
        </CardHeader>

        <CardContent className="text-center space-y-4">
          {verification.tier && verification.status === 'success' && (
            <div className="p-4 bg-green-50 dark:bg-green-900/20 rounded-lg">
              <p className="text-sm text-green-800 dark:text-green-200">
                You now have access to all {verification.tier} plan features!
              </p>
            </div>
          )}

          {verification.status === 'pending' && (
            <div className="p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg">
              <p className="text-sm text-yellow-800 dark:text-yellow-200">
                Your crypto payment is being confirmed on the blockchain. 
                This may take a few minutes.
              </p>
            </div>
          )}

          {verification.status === 'failed' && (
            <div className="p-4 bg-red-50 dark:bg-red-900/20 rounded-lg">
              <p className="text-sm text-red-800 dark:text-red-200">
                If you believe this is an error, please contact our support team 
                with your payment reference.
              </p>
            </div>
          )}

          <div className="flex gap-2">
            {verification.status !== 'loading' && (
              <Button
                onClick={verification.status === 'success' ? handleContinue : handleRetry}
                className="flex-1"
                variant={verification.status === 'success' ? 'default' : 'secondary'}
              >
                {getButtonText()}
              </Button>
            )}

            {verification.status !== 'success' && verification.status !== 'loading' && (
              <Button
                onClick={() => router.push('/chat')}
                variant="outline"
                className="flex-1"
              >
                Back to Chat
              </Button>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

export default PaymentSuccess;


================================================
FILE: frontend/src/components/providers.tsx
================================================
'use client'

// Temporarily disabled Dynamic Labs integration for debugging
// import {
//   DynamicContextProvider,
// } from '@dynamic-labs/sdk-react-core'
// import { EthereumWalletConnectors } from '@dynamic-labs/ethereum'
// import { SolanaWalletConnectors } from '@dynamic-labs/solana'
// import { useRouter } from 'next/navigation'

export function Providers({ children }: { children: React.ReactNode }) {
  // const router = useRouter()
  return (
    <>
      {children}
      {/* Temporarily disabled for debugging
      {process.env.NEXT_PUBLIC_DYNAMIC_ENV_ID ? (
        <DynamicContextProvider
          settings={{
            environmentId: process.env.NEXT_PUBLIC_DYNAMIC_ENV_ID,
            walletConnectors: [
              EthereumWalletConnectors,
              SolanaWalletConnectors,
            ],
            events: {
              onAuthSuccess: () => {
                router.push('/dashboard')
              },
            },
          }}
        >
          {children}
        </DynamicContextProvider>
      ) : (
        children
      )}
      */}
    </>
  )
}



================================================
FILE: frontend/src/components/ResponseActions.tsx
================================================
'use client'

import React, { useState } from 'react';
import { Copy, Share2, Download, ThumbsUp, ThumbsDown, Check, ExternalLink } from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from '@/components/ui/dropdown-menu';
import { useToast } from '@/components/ui/use-toast';

interface ResponseActionsProps {
  messageId: string;
  messageContent?: string;
  conversationId?: string | null;
  onCopy?: () => void;
  onExport?: (format: 'pdf' | 'docx' | 'md') => void;
}

export function ResponseActions({ 
  messageId, 
  messageContent, 
  conversationId, 
  onCopy, 
  onExport 
}: ResponseActionsProps) {
  const [copied, setCopied] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);
  const { toast } = useToast();

  const handleCopy = async () => {
    if (onCopy) {
      onCopy();
      return;
    }
    
    if (messageContent) {
      try {
        await navigator.clipboard.writeText(messageContent);
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
        toast({
          title: "Copied to clipboard",
          duration: 2000,
        });
      } catch (error) {
        toast({
          title: "Failed to copy",
          variant: "destructive",
        });
      }
    }
  };

  const handleShareLink = async () => {
    try {
      await navigator.clipboard.writeText(window.location.href);
      toast({
        title: "Link copied",
        description: "Conversation link copied to clipboard.",
      });
    } catch (error) {
      toast({
        title: "Failed to copy link",
        variant: "destructive",
      });
    }
  };

  const handleSocialShare = (platform: string) => {
    const text = encodeURIComponent(
      messageContent 
        ? messageContent.slice(0, 280) + (messageContent.length > 280 ? '...' : '')
        : 'Check out this AI-generated response from HandyWriterz'
    );
    const url = encodeURIComponent(window.location.href);
    
    let shareUrl = '';
    switch (platform) {
      case 'twitter':
        shareUrl = `https://twitter.com/intent/tweet?text=${text}&url=${url}`;
        break;
      case 'linkedin':
        shareUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${url}`;
        break;
      case 'reddit':
        shareUrl = `https://reddit.com/submit?url=${url}&title=${text}`;
        break;
    }
    
    if (shareUrl) {
      window.open(shareUrl, '_blank', 'width=600,height=400');
    }
  };

  const handleDownload = async (format: 'pdf' | 'docx' | 'md') => {
    if (onExport) {
      onExport(format);
      return;
    }

    if (!conversationId) {
      toast({
        title: "Download failed",
        description: "No conversation ID available.",
        variant: "destructive",
      });
      return;
    }

    try {
      setIsDownloading(true);
      const response = await fetch(`/api/export/${conversationId}?format=${format}`);
      
      if (!response.ok) {
        throw new Error(`Export failed: ${response.status}`);
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `conversation-${conversationId}.${format}`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);

      toast({
        title: "Download started",
        description: `Downloading as ${format.toUpperCase()}...`,
      });
    } catch (error) {
      console.error('Download error:', error);
      toast({
        title: "Download failed",
        description: "Could not download the conversation.",
        variant: "destructive",
      });
    } finally {
      setIsDownloading(false);
    }
  };

  const handleFeedback = (type: 'positive' | 'negative') => {
    // TODO: Implement feedback API call
    toast({
      title: `${type === 'positive' ? 'Positive' : 'Negative'} feedback recorded`,
      description: "Thank you for your feedback!",
    });
  };

  return (
    <div className="flex items-center gap-1 text-gray-500">
      {/* Copy Button */}
      <Button 
        variant="ghost" 
        size="sm" 
        onClick={handleCopy} 
        className="h-7 px-2 hover:bg-gray-700/50 hover:text-white"
        title="Copy message"
      >
        {copied ? <Check className="h-3 w-3" /> : <Copy className="h-3 w-3" />}
      </Button>

      {/* Share Dropdown */}
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button 
            variant="ghost" 
            size="sm" 
            className="h-7 px-2 hover:bg-gray-700/50 hover:text-white"
            title="Share"
          >
            <Share2 className="h-3 w-3" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent className="bg-gray-800 border-gray-600 text-gray-200">
          <DropdownMenuItem 
            onClick={handleShareLink}
            className="hover:bg-gray-700 focus:bg-gray-700"
          >
            <ExternalLink className="h-4 w-4 mr-2" />
            Copy link
          </DropdownMenuItem>
          <DropdownMenuSeparator className="bg-gray-600" />
          <DropdownMenuItem 
            onClick={() => handleSocialShare('twitter')}
            className="hover:bg-gray-700 focus:bg-gray-700"
          >
            Share on X
          </DropdownMenuItem>
          <DropdownMenuItem 
            onClick={() => handleSocialShare('linkedin')}
            className="hover:bg-gray-700 focus:bg-gray-700"
          >
            Share on LinkedIn
          </DropdownMenuItem>
          <DropdownMenuItem 
            onClick={() => handleSocialShare('reddit')}
            className="hover:bg-gray-700 focus:bg-gray-700"
          >
            Share on Reddit
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>

      {/* Download Dropdown */}
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button 
            variant="ghost" 
            size="sm" 
            disabled={isDownloading}
            className="h-7 px-2 hover:bg-gray-700/50 hover:text-white"
            title="Download"
          >
            <Download className="h-3 w-3" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent className="bg-gray-800 border-gray-600 text-gray-200">
          <DropdownMenuItem 
            onClick={() => handleDownload('pdf')} 
            disabled={isDownloading}
            className="hover:bg-gray-700 focus:bg-gray-700"
          >
            Download PDF
          </DropdownMenuItem>
          <DropdownMenuItem 
            onClick={() => handleDownload('docx')} 
            disabled={isDownloading}
            className="hover:bg-gray-700 focus:bg-gray-700"
          >
            Download DOCX
          </DropdownMenuItem>
          <DropdownMenuItem 
            onClick={() => handleDownload('md')} 
            disabled={isDownloading}
            className="hover:bg-gray-700 focus:bg-gray-700"
          >
            Download Markdown
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>

      {/* Feedback Buttons */}
      <div className="border-l border-gray-700 h-4 mx-2" />
      <Button 
        variant="ghost" 
        size="sm" 
        onClick={() => handleFeedback('positive')}
        className="h-7 px-2 hover:bg-gray-700/50 hover:text-green-400"
        title="Good response"
      >
        <ThumbsUp className="h-3 w-3" />
      </Button>
      <Button 
        variant="ghost" 
        size="sm" 
        onClick={() => handleFeedback('negative')}
        className="h-7 px-2 hover:bg-gray-700/50 hover:text-red-400"
        title="Poor response"
      >
        <ThumbsDown className="h-3 w-3" />
      </Button>
    </div>
  );
}


================================================
FILE: frontend/src/components/SettingsModal.tsx
================================================
'use client'

import React, { useState, useEffect } from 'react'
import { X, User, Activity, Grid, Users, MessageSquare, Settings, Shield, Copy, ExternalLink, CreditCard } from 'lucide-react'
import { Dialog, DialogContent } from '@/components/ui/dialog'
import { ThemeSelector } from '@/components/ThemeSelector'
import { useTheme } from '@/contexts/ThemeContext'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { useToast } from '@/components/ui/use-toast'
import { useRouter } from 'next/navigation'

interface SettingsModalProps {
  open: boolean
  onOpenChange: (open: boolean) => void
}

interface BillingSummary {
  plan: string;
  renew_date: string;
  usage_usd: number;
  credits_remaining: number;
  max_words: number;
  features: string[];
}

interface UserProfile {
  email: string;
  user_id: string;
  wallet_address?: string;
  avatar?: string;
  display_name?: string;
}

type SettingsTab = 'profile' | 'usage' | 'general' | 'community' | 'feedback' | 'api' | 'terms'

const settingsTabs = [
  { id: 'profile' as SettingsTab, icon: User, label: 'Profile' },
  { id: 'usage' as SettingsTab, icon: Activity, label: 'Usage' },
  { id: 'general' as SettingsTab, icon: Grid, label: 'General' },
  { id: 'community' as SettingsTab, icon: Users, label: 'Community' },
  { id: 'feedback' as SettingsTab, icon: MessageSquare, label: 'Feedback' },
  { id: 'api' as SettingsTab, icon: Settings, label: 'API Setting' },
  { id: 'terms' as SettingsTab, icon: Shield, label: 'Term & Policy' },
]

export function SettingsModal({ open, onOpenChange }: SettingsModalProps) {
  const [activeTab, setActiveTab] = useState<SettingsTab>('profile')
  const [billingSummary, setBillingSummary] = useState<BillingSummary | null>(null)
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null)
  const [loading, setLoading] = useState(false)
  const { theme, setTheme } = useTheme()
  const { toast } = useToast()
  const router = useRouter()

  // Load user data when modal opens
  useEffect(() => {
    if (open) {
      loadUserData()
    }
  }, [open])

  const loadUserData = async () => {
    setLoading(true)
    try {
      // Load billing summary
      const billingResponse = await fetch('/api/billing/summary', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('access_token')}`
        }
      })
      
      if (billingResponse.ok) {
        const billingData = await billingResponse.json()
        setBillingSummary(billingData)
      }

      // Load user profile (mock for now - replace with Dynamic.xyz data)
      setUserProfile({
        email: 'user@example.com',
        user_id: 'demo-user',
        display_name: 'Demo User',
        wallet_address: '0x1234...5678'
      })
    } catch (error) {
      console.error('Error loading user data:', error)
      toast({
        title: "Error",
        description: "Failed to load user data",
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
    toast({
      title: "Copied",
      description: "Link copied to clipboard",
    })
  }

  const handleUpgrade = () => {
    onOpenChange(false)
    router.push('/pricing')
  }

  const renderTabContent = () => {
    switch (activeTab) {
      case 'profile':
        if (loading || !userProfile) {
          return (
            <div className="flex items-center justify-center h-64">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
            </div>
          )
        }

        return (
          <div className="space-y-6">
            {/* User Profile Section */}
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                <span className="text-lg font-semibold text-white">
                  {userProfile.display_name?.charAt(0).toUpperCase() || 'U'}
                </span>
              </div>
              <div className="flex-1">
                <h3 className="text-xl font-semibold text-gray-900 dark:text-white">
                  {userProfile.display_name || 'User'}
                </h3>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  {userProfile.email}
                </p>
              </div>
            </div>

            <div className="space-y-1">
              <p className="text-sm font-medium text-gray-700 dark:text-gray-300">Account Information</p>
            </div>

            {/* Account Details */}
            <div className="space-y-4">
              <div>
                <p className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Email</p>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-900 dark:text-gray-100">{userProfile.email}</span>
                  <Button variant="outline" size="sm" className="ml-4">
                    <ExternalLink className="w-4 h-4 mr-2" />
                    Manage via Dynamic
                  </Button>
                </div>
              </div>

              {userProfile.wallet_address && (
                <div>
                  <p className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Wallet Address</p>
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-500 dark:text-gray-400 font-mono">{userProfile.wallet_address}</span>
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => copyToClipboard(userProfile.wallet_address!)}
                    >
                      <Copy className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              )}

              {/* Invite Friends Section */}
              <div>
                <p className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Invite friends</p>
                <p className="text-xs text-gray-500 dark:text-gray-400 mb-3">
                  Get 10 bonus credits for you and your invitees when they make their first purchase
                </p>
                <div className="flex items-center space-x-2">
                  <Input
                    value={`https://handywriterz.ai/signup?ref=${userProfile.user_id}`}
                    readOnly
                    className="flex-1 text-sm bg-gray-50 dark:bg-gray-800"
                  />
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => copyToClipboard(`https://handywriterz.ai/signup?ref=${userProfile.user_id}`)}
                  >
                    <Copy className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            </div>
          </div>
        )

      case 'usage':
        if (loading || !billingSummary) {
          return (
            <div className="flex items-center justify-center h-64">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
            </div>
          )
        }

        const creditsUsedPercent = billingSummary.credits_remaining > 0 
          ? ((100 - billingSummary.credits_remaining) / 100) * 100 
          : 0

        return (
          <div className="space-y-6">
            {/* Plan Section */}
            <div className="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/50 dark:to-purple-900/50 p-6 rounded-lg border border-blue-200 dark:border-blue-800">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Current Plan</h3>
                <Button onClick={handleUpgrade} className="bg-blue-600 hover:bg-blue-700 text-white">
                  <CreditCard className="w-4 h-4 mr-2" />
                  Upgrade Plan
                </Button>
              </div>
              
              <div className="flex items-center space-x-4 mb-4">
                <div className="w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center">
                  <span className="text-white font-bold">
                    {billingSummary.plan.charAt(0).toUpperCase()}
                  </span>
                </div>
                <div>
                  <div className="flex items-center gap-3">
                    <h4 className="text-xl font-bold text-gray-900 dark:text-white capitalize">
                      {billingSummary.plan} Plan
                    </h4>
                    <Badge 
                      variant={billingSummary.plan === 'free' ? 'secondary' : 'default'}
                      className="capitalize"
                    >
                      {billingSummary.plan}
                    </Badge>
                  </div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    {billingSummary.renew_date !== 'N/A' ? `Renews on ${billingSummary.renew_date}` : 'No renewal date'}
                  </p>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Credits Remaining</p>
                  <p className="text-2xl font-bold text-blue-600 dark:text-blue-400">
                    {billingSummary.credits_remaining}
                  </p>
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Monthly Usage</p>
                  <p className="text-2xl font-bold text-green-600 dark:text-green-400">
                    ${billingSummary.usage_usd.toFixed(2)}
                  </p>
                </div>
              </div>
            </div>

            {/* Credits Progress */}
            <div>
              <div className="flex items-center justify-between mb-2">
                <h3 className="text-base font-medium text-gray-900 dark:text-white">Credit Usage</h3>
                <span className="text-sm text-gray-500 dark:text-gray-400">
                  {billingSummary.credits_remaining} credits remaining
                </span>
              </div>
              <Progress 
                value={creditsUsedPercent} 
                className="h-3 mb-4" 
              />
              <p className="text-sm text-gray-600 dark:text-gray-400">
                Credits reset {billingSummary.renew_date !== 'N/A' ? `on ${billingSummary.renew_date}` : 'each month'}
              </p>
            </div>

            {/* Plan Features */}
            <div>
              <h3 className="text-base font-medium text-gray-900 dark:text-white mb-4">Plan Features</h3>
              <div className="grid grid-cols-1 gap-2">
                {billingSummary.features.map((feature, index) => (
                  <div key={index} className="flex items-center gap-2 text-sm">
                    <div className="w-1.5 h-1.5 bg-green-500 rounded-full"></div>
                    <span className="text-gray-700 dark:text-gray-300">{feature}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Quick Actions */}
            <div className="flex gap-3 pt-4 border-t border-gray-200 dark:border-gray-700">
              <Button variant="outline" onClick={handleUpgrade} className="flex-1">
                View All Plans
              </Button>
              <Button variant="outline" onClick={() => router.push('/pricing')} className="flex-1">
                Buy Credits
              </Button>
            </div>
          </div>
        )

      case 'general':
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Theme</h3>
              <div className="grid grid-cols-3 gap-4">
                <button
                  onClick={() => setTheme('system')}
                  className={`p-4 rounded-lg border-2 transition-colors text-center ${
                    theme === 'system'
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                  }`}
                >
                  <Settings className="h-6 w-6 text-gray-600 dark:text-gray-400 mx-auto mb-2" />
                  <div className="text-sm font-medium text-gray-900 dark:text-white">System Mode</div>
                </button>
                
                <button
                  onClick={() => setTheme('light')}
                  className={`p-4 rounded-lg border-2 transition-colors text-center ${
                    theme === 'light'
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                  }`}
                >
                  <div className="h-6 w-6 bg-white border border-gray-300 rounded-full mx-auto mb-2 flex items-center justify-center">
                    <div className="h-3 w-3 bg-yellow-400 rounded-full"></div>
                  </div>
                  <div className="text-sm font-medium text-gray-900 dark:text-white">Light Mode</div>
                </button>
                
                <button
                  onClick={() => setTheme('dark')}
                  className={`p-4 rounded-lg border-2 transition-colors text-center ${
                    theme === 'dark'
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                  }`}
                >
                  <div className="h-6 w-6 bg-gray-800 rounded-full mx-auto mb-2 flex items-center justify-center">
                    <div className="h-3 w-3 bg-gray-600 rounded-full"></div>
                  </div>
                  <div className="text-sm font-medium text-gray-900 dark:text-white">Dark Mode</div>
                </button>
              </div>
            </div>
          </div>
        )

      case 'community':
        return (
          <div className="flex items-center justify-center h-64">
            <p className="text-gray-500 dark:text-gray-400">Community features coming soon...</p>
          </div>
        )

      case 'feedback':
        return (
          <div className="flex items-center justify-center h-64">
            <p className="text-gray-500 dark:text-gray-400">Feedback section coming soon...</p>
          </div>
        )

      case 'api':
        return (
          <div className="flex items-center justify-center h-64">
            <p className="text-gray-500 dark:text-gray-400">API settings coming soon...</p>
          </div>
        )

      case 'terms':
        return (
          <div className="flex items-center justify-center h-64">
            <p className="text-gray-500 dark:text-gray-400">Terms & Policy coming soon...</p>
          </div>
        )

      default:
        return null
    }
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[80vh] p-0 overflow-hidden bg-white dark:bg-gray-900">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white">Setting</h2>
          <button
            onClick={() => onOpenChange(false)}
            className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="flex flex-1 min-h-0">
          {/* Sidebar */}
          <div className="w-64 bg-gray-50 dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700">
            <nav className="p-4 space-y-1">
              {settingsTabs.map((tab) => {
                const Icon = tab.icon
                const isActive = activeTab === tab.id
                
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors ${
                      isActive
                        ? 'bg-yellow-200 dark:bg-yellow-900 text-gray-900 dark:text-white'
                        : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                    }`}
                  >
                    <Icon className="w-4 h-4 mr-3" />
                    {tab.label}
                  </button>
                )
              })}
            </nav>
          </div>

          {/* Content */}
          <div className="flex-1 p-6 overflow-y-auto">
            {renderTabContent()}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}


================================================
FILE: frontend/src/components/Sidebar.tsx
================================================
'use client'

import { useRouter } from 'next/navigation'
import { useSidebar } from '@/hooks/useSidebar'
import { CollapsedSidebar } from '@/components/CollapsedSidebar'
import { ExpandedSidebar } from '@/components/ExpandedSidebar'

interface SidebarProps {
  currentChatId?: string | null;
  onNewChat: () => void;
  onSelectChat: (chatId: string) => void;
  onDeleteChat: (chatId: string) => void;
  userId?: string;
}

export default function Sidebar({
  currentChatId,
  onNewChat,
  onSelectChat,
  onDeleteChat,
  userId = "demo-user"
}: SidebarProps) {
  const router = useRouter()
  const { collapsed, isMobile, showMobileOverlay, toggle, closeMobileOverlay } = useSidebar()

  const handleOpenSearch = () => {
    if (collapsed && !isMobile) {
      toggle() // Expand sidebar to show search
    }
    // Focus on search input after expansion
    setTimeout(() => {
      const searchInput = document.querySelector('input[placeholder="Search chats"]') as HTMLInputElement
      if (searchInput) {
        searchInput.focus()
      }
    }, 300)
  }

  const handleOpenLibrary = () => {
    router.push('/library')
  }

  const handleOpenSettings = () => {
    if (collapsed && !isMobile) {
      toggle() // Expand sidebar to show settings modal
    }
    // The ExpandedSidebar handles the modal opening
  }

  const handleOpenProfile = () => {
    router.push('/profile')
  }

  return (
    <>
      {/* Main sidebar */}
      <aside
        className={`flex flex-col h-screen bg-background text-foreground border-r border-border transition-all duration-300 ease-in-out ${
          collapsed ? 'w-16' : 'w-64'
        }`}
        role="navigation"
      >
        {collapsed ? (
          <CollapsedSidebar
            onToggle={toggle}
            onNewChat={onNewChat}
            onOpenSearch={handleOpenSearch}
            onOpenLibrary={handleOpenLibrary}
            onOpenSettings={handleOpenSettings}
            onOpenProfile={handleOpenProfile}
            userId={userId}
          />
        ) : (
          <ExpandedSidebar
            onToggle={toggle}
            currentChatId={currentChatId}
            onNewChat={onNewChat}
            onSelectChat={onSelectChat}
            onDeleteChat={onDeleteChat}
            userId={userId}
          />
        )}
      </aside>

      {/* Mobile overlay */}
      {isMobile && showMobileOverlay && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden">
          <div className="w-64 h-full bg-background">
            <ExpandedSidebar
              onToggle={closeMobileOverlay}
              currentChatId={currentChatId}
              onNewChat={() => {
                onNewChat()
                closeMobileOverlay()
              }}
              onSelectChat={(chatId) => {
                onSelectChat(chatId)
                closeMobileOverlay()
              }}
              onDeleteChat={onDeleteChat}
              userId={userId}
            />
          </div>
        </div>
      )}
    </>
  )
}


================================================
FILE: frontend/src/components/StreamingStatus.tsx
================================================
'use client'

import React from 'react';
import { Brain, Zap, FileText, Globe, Shield, Loader2 } from 'lucide-react';

interface StreamingStatusProps {
  events: any[];
  isConnected: boolean;
  totalCost?: number;
  plagiarismScore?: number;
  qualityScore?: number;
}

export function StreamingStatus({ 
  events, 
  isConnected, 
  totalCost = 0,
  plagiarismScore = 0,
  qualityScore = 0
}: StreamingStatusProps) {
  const currentEvent = events[events.length - 1];
  
  const getStatusIcon = (eventType: string) => {
    switch (eventType) {
      case 'parsing_files':
        return <FileText className="h-4 w-4 text-blue-400" />;
      case 'routing_agents':
        return <Brain className="h-4 w-4 text-purple-400" />;
      case 'researching':
        return <Globe className="h-4 w-4 text-green-400" />;
      case 'writing':
        return <Zap className="h-4 w-4 text-yellow-400" />;
      case 'quality_check':
        return <Shield className="h-4 w-4 text-blue-400" />;
      default:
        return <Loader2 className="h-4 w-4 text-gray-400 animate-spin" />;
    }
  };

  const getStatusText = (eventType: string) => {
    switch (eventType) {
      case 'parsing_files':
        return 'Parsing uploaded files...';
      case 'routing_agents':
        return 'Routing to specialized agents...';
      case 'researching':
        return 'Conducting research...';
      case 'writing':
        return 'Generating content...';
      case 'quality_check':
        return 'Performing quality checks...';
      case 'finalizing':
        return 'Finalizing response...';
      default:
        return 'Processing request...';
    }
  };

  if (!isConnected || !currentEvent) {
    return null;
  }

  return (
    <div className="border-b border-gray-700 bg-gray-800/50 px-6 py-3">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          {getStatusIcon(currentEvent.type)}
          <span className="text-sm text-gray-300">
            {getStatusText(currentEvent.type)}
          </span>
          {currentEvent.progress && (
            <div className="w-32 bg-gray-700 rounded-full h-2">
              <div 
                className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                style={{ width: `${currentEvent.progress}%` }}
              />
            </div>
          )}
        </div>
        
        <div className="flex items-center gap-4 text-xs text-gray-500">
          {totalCost > 0 && (
            <span>Cost: ${totalCost.toFixed(4)}</span>
          )}
          {plagiarismScore > 0 && (
            <span>Originality: {(100 - plagiarismScore).toFixed(1)}%</span>
          )}
          {qualityScore > 0 && (
            <span>Quality: {qualityScore.toFixed(1)}%</span>
          )}
        </div>
      </div>
    </div>
  );
}


================================================
FILE: frontend/src/components/ThemeSelector.tsx
================================================
'use client'

import { Monitor, Sun, Moon } from 'lucide-react'
import { useTheme } from '@/contexts/ThemeContext'

interface ThemeOption {
  id: 'system' | 'light' | 'dark'
  label: string
  icon: React.ComponentType<{ className?: string }>
}

const themeOptions: ThemeOption[] = [
  {
    id: 'system',
    label: 'System Mode',
    icon: Monitor
  },
  {
    id: 'light',
    label: 'Light Mode',
    icon: Sun
  },
  {
    id: 'dark',
    label: 'Dark Mode',
    icon: Moon
  }
]

export function ThemeSelector() {
  const { theme, setTheme } = useTheme()

  return (
    <div className="space-y-4">
      <div>
        <h3 className="text-base font-medium text-gray-900 dark:text-gray-100 mb-1">
          Theme
        </h3>
      </div>
      
      <div className="grid grid-cols-3 gap-3">
        {themeOptions.map((option) => {
          const Icon = option.icon
          const isActive = theme === option.id
          
          return (
            <button
              key={option.id}
              onClick={() => setTheme(option.id)}
              aria-pressed={isActive}
              className={`relative flex flex-col items-center justify-center p-4 py-6 rounded-xl border transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 ${
                isActive
                  ? 'border-blue-500 bg-blue-50 dark:bg-blue-950/50 shadow-sm'
                  : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600 bg-white dark:bg-gray-800/50 hover:bg-gray-50 dark:hover:bg-gray-800'
              }`}
            >
              <Icon className={`w-5 h-5 mb-3 ${
                isActive 
                  ? 'text-blue-600 dark:text-blue-400' 
                  : 'text-gray-500 dark:text-gray-400'
              }`} />
              
              <span className={`text-sm font-medium text-center ${
                isActive 
                  ? 'text-blue-900 dark:text-blue-100' 
                  : 'text-gray-700 dark:text-gray-300'
              }`}>
                {option.label}
              </span>
              
              {isActive && (
                <div className="absolute top-3 right-3">
                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                </div>
              )}
            </button>
          )
        })}
      </div>
    </div>
  )
}


================================================
FILE: frontend/src/components/ThemeSwitcher.tsx
================================================
'use client';

import { useTheme } from '@/contexts/ThemeContext';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Sun, Moon, Monitor } from 'lucide-react';

export function ThemeSwitcher() {
  const { theme, setTheme } = useTheme();

  const themeOptions = [
    { value: 'light' as const, label: 'Light', icon: Sun },
    { value: 'dark' as const, label: 'Dark', icon: Moon },
    { value: 'system' as const, label: 'System', icon: Monitor },
  ];

  const currentTheme = themeOptions.find(t => t.value === theme);
  const Icon = currentTheme?.icon || Monitor;

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon" className="h-9 w-9">
          <Icon className="h-4 w-4" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        {themeOptions.map((option) => {
          const OptionIcon = option.icon;
          return (
            <DropdownMenuItem
              key={option.value}
              onClick={() => setTheme(option.value)}
              className="cursor-pointer"
            >
              <OptionIcon className="mr-2 h-4 w-4" />
              <span>{option.label}</span>
              {theme === option.value && (
                <span className="ml-auto text-blue-500">✓</span>
              )}
            </DropdownMenuItem>
          );
        })}
      </DropdownMenuContent>
    </DropdownMenu>
  );
}



================================================
FILE: frontend/src/components/ThemeToggle.tsx
================================================
"use client";

import * as React from "react";
import { Moon, Sun } from "lucide-react";
import { useTheme } from "next-themes";

import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

export function ThemeToggle() {
  const { setTheme } = useTheme();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}



================================================
FILE: frontend/src/components/WelcomeScreen.tsx
================================================
import React from "react";
import { Brain, Zap, FileText, Users, Globe, Shield, Sparkles, ArrowRight } from "lucide-react";

interface WelcomeScreenProps {
  handleSubmit: (
    submittedInputValue: string,
    effort: string,
    model: string,
    fileIds: string[]
  ) => void;
  onCancel: () => void;
  isLoading: boolean;
  onExampleClick?: (text: string) => void;
}

const YCDemoExamples = [
  {
    title: "PhD Dissertation",
    description: "10 files → Complete dissertation",
    prompt: "Create a comprehensive PhD dissertation on 'AI-Powered Educational Technology Impact' using the uploaded literature review, methodology, interview transcripts, statistical analysis, and supporting materials.",
    icon: FileText,
    gradient: "from-blue-500/20 to-purple-500/20"
  },
  {
    title: "Market Research",
    description: "Industry analysis → Strategic insights",
    prompt: "Conduct comprehensive market analysis of the EdTech sector, focusing on AI integration trends, competitive landscape, and growth opportunities for a Series A startup.",
    icon: Globe,
    gradient: "from-green-500/20 to-teal-500/20"
  },
  {
    title: "Technical Report",
    description: "Complex data → Clear conclusions",
    prompt: "Generate a technical report analyzing machine learning model performance across different educational contexts, including statistical validation and implementation recommendations.",
    icon: Brain,
    gradient: "from-orange-500/20 to-red-500/20"
  }
];

export const WelcomeScreen: React.FC<WelcomeScreenProps> = ({
  handleSubmit,
  onCancel,
  isLoading,
  onExampleClick,
}) => {
  const handleExampleCardClick = (prompt: string) => {
    if (onExampleClick) {
      onExampleClick(prompt);
    }
  };

  return (
    <div className="h-full flex flex-col items-center justify-center text-center px-8 py-12 bg-gray-900">
      {/* YC Demo Examples - Clean and focused */}
      <div className="w-full max-w-4xl">
        <h2 className="text-2xl font-semibold text-gray-200 mb-8">
          ✨ YC Demo Examples
        </h2>
        <div className="grid md:grid-cols-3 gap-6">
          {YCDemoExamples.map((example, index) => {
            const Icon = example.icon;
            return (
              <div
                key={index}
                className={`relative p-6 rounded-xl border border-gray-700 bg-gradient-to-br ${example.gradient} backdrop-blur-sm hover:border-gray-600 hover:scale-[1.02] transition-all duration-200 group cursor-pointer`}
                onClick={() => handleExampleCardClick(example.prompt)}
              >
                <div className="flex items-center gap-3 mb-3">
                  <Icon className="h-6 w-6 text-white" />
                  <h3 className="text-lg font-semibold text-white">{example.title}</h3>
                </div>
                <p className="text-gray-300 text-sm mb-3 leading-relaxed">{example.description}</p>
                <div className="flex items-center gap-2 text-blue-400 text-sm font-medium opacity-0 group-hover:opacity-100 transition-opacity">
                  <span>Try this example</span>
                  <ArrowRight className="h-4 w-4" />
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
};



================================================
FILE: frontend/src/components/admin/ModelConfigPanel.tsx
================================================
'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/components/ui/use-toast';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Progress } from '@/components/ui/progress';
import { 
  Settings, 
  RefreshCw, 
  Save, 
  X, 
  TrendingUp, 
  Cloud, 
  Info, 
  AlertTriangle, 
  CheckCircle2 
} from 'lucide-react';

interface ModelConfig {
  id: string;
  name: string;
  provider: string;
  status: 'active' | 'inactive' | 'maintenance';
  latency: number;
  cost_per_token: number;
  max_tokens: number;
  enabled: boolean;
}

interface ModelMetrics {
  requests_per_hour: number;
  success_rate: number;
  avg_response_time: number;
  cost_today: number;
}

export const ModelConfigPanel: React.FC = () => {
  const [models, setModels] = useState<ModelConfig[]>([]);
  const [metrics, setMetrics] = useState<Record<string, ModelMetrics>>({});
  const [loading, setLoading] = useState(true);
  const [editingModel, setEditingModel] = useState<string | null>(null);
  const [selectedProvider, setSelectedProvider] = useState<string>('all');
  const { toast } = useToast();

  const providers = ['OpenAI', 'Anthropic', 'Google', 'Cohere', 'Meta'];
  const statuses = ['active', 'inactive', 'maintenance'] as const;

  useEffect(() => {
    loadModels();
    loadMetrics();
  }, []);

  const loadModels = async () => {
    try {
      setLoading(true);
      // Mock data - replace with actual API call
      const mockModels: ModelConfig[] = [
        {
          id: 'gpt-4',
          name: 'GPT-4',
          provider: 'OpenAI',
          status: 'active',
          latency: 2.5,
          cost_per_token: 0.00003,
          max_tokens: 8192,
          enabled: true
        },
        {
          id: 'claude-3',
          name: 'Claude 3 Sonnet',
          provider: 'Anthropic',
          status: 'active',
          latency: 1.8,
          cost_per_token: 0.000015,
          max_tokens: 4096,
          enabled: true
        }
      ];
      setModels(mockModels);
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to load models",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const loadMetrics = async () => {
    try {
      // Mock metrics - replace with actual API call
      const mockMetrics: Record<string, ModelMetrics> = {
        'gpt-4': {
          requests_per_hour: 150,
          success_rate: 99.2,
          avg_response_time: 2.5,
          cost_today: 12.45
        },
        'claude-3': {
          requests_per_hour: 89,
          success_rate: 99.8,
          avg_response_time: 1.8,
          cost_today: 8.32
        }
      };
      setMetrics(mockMetrics);
    } catch (error) {
      console.error('Failed to load metrics:', error);
    }
  };

  const handleSaveModel = async (modelId: string) => {
    try {
      // Save model configuration - replace with actual API call
      toast({
        title: "Success",
        description: "Model configuration saved successfully",
      });
      setEditingModel(null);
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to save model configuration",
        variant: "destructive",
      });
    }
  };

  const handleToggleModel = async (modelId: string, enabled: boolean) => {
    try {
      setModels(prev => prev.map(model => 
        model.id === modelId ? { ...model, enabled } : model
      ));
      toast({
        title: "Success",
        description: `Model ${enabled ? 'enabled' : 'disabled'} successfully`,
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to update model status",
        variant: "destructive",
      });
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'active':
        return <CheckCircle2 className="h-4 w-4 text-green-500" />;
      case 'maintenance':
        return <AlertTriangle className="h-4 w-4 text-yellow-500" />;
      default:
        return <X className="h-4 w-4 text-red-500" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800';
      case 'maintenance':
        return 'bg-yellow-100 text-yellow-800';
      default:
        return 'bg-red-100 text-red-800';
    }
  };

  const filteredModels = selectedProvider === 'all' 
    ? models 
    : models.filter(model => model.provider === selectedProvider);

  if (loading) {
    return (
      <div className="p-6">
        <div className="flex items-center gap-2 mb-4">
          <RefreshCw className="h-5 w-5 animate-spin" />
          <span>Loading model configurations...</span>
        </div>
        <Progress value={45} className="w-full" />
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Settings className="h-6 w-6" />
          <h1 className="text-2xl font-bold">Model Configuration</h1>
        </div>
        <div className="flex items-center gap-2">
          <Button onClick={loadModels} variant="outline" size="sm">
            <RefreshCw className="h-4 w-4 mr-2" />
            Refresh
          </Button>
          <Select value={selectedProvider} onValueChange={setSelectedProvider}>
            <SelectTrigger className="w-40">
              <SelectValue placeholder="Filter by provider" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Providers</SelectItem>
              {providers.map(provider => (
                <SelectItem key={provider} value={provider}>{provider}</SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>


      {/* Models Table */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Cloud className="h-5 w-5" />
            Available Models
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Model</TableHead>
                <TableHead>Provider</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Latency</TableHead>
                <TableHead>Cost/Token</TableHead>
                <TableHead>Max Tokens</TableHead>
                <TableHead>Enabled</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredModels.map((model) => (
                <TableRow key={model.id}>
                  <TableCell className="font-medium">{model.name}</TableCell>
                  <TableCell>
                    <Badge variant="outline">{model.provider}</Badge>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      {getStatusIcon(model.status)}
                      <Badge className={getStatusColor(model.status)}>
                        {model.status}
                      </Badge>
                    </div>
                  </TableCell>
                  <TableCell>{model.latency}s</TableCell>
                  <TableCell>${model.cost_per_token}</TableCell>
                  <TableCell>{model.max_tokens.toLocaleString()}</TableCell>
                  <TableCell>
                    <Button
                      variant={model.enabled ? "default" : "outline"}
                      size="sm"
                      onClick={() => handleToggleModel(model.id, !model.enabled)}
                    >
                      {model.enabled ? "Enabled" : "Disabled"}
                    </Button>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setEditingModel(model.id)}
                      >
                        <Settings className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                      >
                        <TrendingUp className="h-4 w-4" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Metrics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {filteredModels.map((model) => {
          const modelMetrics = metrics[model.id];
          if (!modelMetrics) return null;

          return (
            <Card key={`metrics-${model.id}`}>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium">{model.name} Metrics</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>Requests/hr:</span>
                  <span className="font-medium">{modelMetrics.requests_per_hour}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span>Success Rate:</span>
                  <span className="font-medium">{modelMetrics.success_rate}%</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span>Avg Response:</span>
                  <span className="font-medium">{modelMetrics.avg_response_time}s</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span>Cost Today:</span>
                  <span className="font-medium">${modelMetrics.cost_today}</span>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>
    </div>
  );
};


================================================
FILE: frontend/src/components/agent/AgentOrchestrationDashboard.tsx
================================================
/**
 * Revolutionary Agent Orchestration Dashboard for YC Demo Day
 * Real-time visualization of 32 agents working in parallel
 * 156 different event types for complete transparency
 */

'use client';

import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Brain, 
  Search, 
  FileText, 
  Shield, 
  Zap, 
  CheckCircle, 
  Clock, 
  DollarSign,
  Users,
  TrendingUp,
  Activity,
  Pause,
  Play,
  RotateCcw,
  Eye,
  Download,
  Star,
  Trophy,
  Sparkles,
  Target
} from 'lucide-react';

export interface AgentStatus {
  agentId: string;
  name: string;
  type: 'research' | 'writing' | 'qa' | 'support' | 'orchestration';
  status: 'pending' | 'active' | 'completed' | 'error' | 'paused';
  progress: number;
  currentTask: string;
  startTime?: Date;
  completedTime?: Date;
  processingTime: number;
  outputPreview?: string;
  qualityScore?: number;
  tokensUsed: number;
  cost: number;
}

export interface ProcessingPhase {
  phase: 'initialization' | 'file_processing' | 'research' | 'source_verification' | 
         'writing' | 'qa_validation' | 'formatting' | 'final_processing' | 'completed';
  progress: number;
  status: 'pending' | 'active' | 'completed';
  startTime?: Date;
  estimatedCompletion?: Date;
  agentsInvolved: string[];
  milestones: ProcessingMilestone[];
}

export interface ProcessingMilestone {
  id: string;
  name: string;
  description: string;
  achieved: boolean;
  achievedAt?: Date;
  impact: 'low' | 'medium' | 'high' | 'critical';
}

export interface QualityMetrics {
  overallScore: number;
  academicRigor: number;
  originalityScore: number;
  citationAccuracy: number;
  evidenceIntegration: number;
  argumentCoherence: number;
  biasDetection: number;
  factAccuracy: number;
  styleConsistency: number;
}

export interface CostMetrics {
  totalCost: number;
  budgetAllocated: number;
  tokensUsed: number;
  tokensAllocated: number;
  costPerQualityPoint: number;
  projectedFinalCost: number;
}

export interface AgentOrchestrationDashboardProps {
  traceId: string;
  isActive: boolean;
  onPause?: () => void;
  onResume?: () => void;
  onStop?: () => void;
  onPreview?: () => void;
}

export const AgentOrchestrationDashboard: React.FC<AgentOrchestrationDashboardProps> = ({
  traceId,
  isActive,
  onPause,
  onResume,
  onStop,
  onPreview
}) => {
  const [agents, setAgents] = useState<AgentStatus[]>([]);
  const [phases, setPhases] = useState<ProcessingPhase[]>([]);
  const [qualityMetrics, setQualityMetrics] = useState<QualityMetrics>({
    overallScore: 0,
    academicRigor: 0,
    originalityScore: 0,
    citationAccuracy: 0,
    evidenceIntegration: 0,
    argumentCoherence: 0,
    biasDetection: 0,
    factAccuracy: 0,
    styleConsistency: 0
  });
  const [costMetrics, setCostMetrics] = useState<CostMetrics>({
    totalCost: 0,
    budgetAllocated: 35.00,
    tokensUsed: 0,
    tokensAllocated: 250000,
    costPerQualityPoint: 0,
    projectedFinalCost: 0
  });
  const [startTime, setStartTime] = useState<Date>(new Date());
  const [currentTime, setCurrentTime] = useState<Date>(new Date());
  const [estimatedCompletion, setEstimatedCompletion] = useState<Date>(new Date(Date.now() + 810000)); // 13.5 minutes
  const [isPaused, setIsPaused] = useState(false);
  const [showCelebration, setShowCelebration] = useState(false);
  const [eventCount, setEventCount] = useState(0);
  const websocketRef = useRef<WebSocket | null>(null);

  useEffect(() => {
    // Initialize WebSocket connection for real-time updates
    const wsUrl = `${process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:8000'}/ws/orchestration/${traceId}`;
    websocketRef.current = new WebSocket(wsUrl);

    websocketRef.current.onmessage = (event) => {
      const data = JSON.parse(event.data);
      handleRealtimeUpdate(data);
      setEventCount(prev => prev + 1);
    };

    websocketRef.current.onopen = () => {
      console.log('Agent orchestration WebSocket connected');
    };

    websocketRef.current.onclose = () => {
      console.log('Agent orchestration WebSocket disconnected');
    };

    // Update current time every second
    const timeInterval = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    return () => {
      if (websocketRef.current) {
        websocketRef.current.close();
      }
      clearInterval(timeInterval);
    };
  }, [traceId]);

  const handleRealtimeUpdate = (data: any) => {
    switch (data.event_type) {
      case 'agent_started':
        updateAgentStatus(data.data.agent, { status: 'active', startTime: new Date() });
        break;
      case 'agent_progress':
        updateAgentStatus(data.data.agent, { 
          progress: data.data.progress_percentage,
          currentTask: data.data.current_task,
          processingTime: data.data.processing_time || 0
        });
        break;
      case 'agent_completed':
        updateAgentStatus(data.data.agent, { 
          status: 'completed', 
          completedTime: new Date(),
          progress: 100,
          outputPreview: data.data.output_preview,
          qualityScore: data.data.quality_score
        });
        break;
      case 'phase_transition':
        updatePhaseStatus(data.data.to_phase, { status: 'active', startTime: new Date() });
        break;
      case 'quality_score_updated':
        setQualityMetrics(prev => ({ ...prev, ...data.data.scores }));
        break;
      case 'cost_update':
        setCostMetrics(prev => ({ ...prev, ...data.data }));
        break;
      case 'milestone_reached':
        updateMilestone(data.data.milestone_id, true);
        break;
      case 'workflow_completed':
        setShowCelebration(true);
        setTimeout(() => setShowCelebration(false), 5000);
        break;
    }
  };

  const updateAgentStatus = (agentId: string, updates: Partial<AgentStatus>) => {
    setAgents(prev => prev.map(agent => 
      agent.agentId === agentId ? { ...agent, ...updates } : agent
    ));
  };

  const updatePhaseStatus = (phaseId: string, updates: Partial<ProcessingPhase>) => {
    setPhases(prev => prev.map(phase => 
      phase.phase === phaseId ? { ...phase, ...updates } : phase
    ));
  };

  const updateMilestone = (milestoneId: string, achieved: boolean) => {
    setPhases(prev => prev.map(phase => ({
      ...phase,
      milestones: phase.milestones.map(milestone => 
        milestone.id === milestoneId ? { ...milestone, achieved, achievedAt: new Date() } : milestone
      )
    })));
  };

  const getAgentIcon = (type: AgentStatus['type']) => {
    switch (type) {
      case 'research': return <Search className="w-4 h-4" />;
      case 'writing': return <FileText className="w-4 h-4" />;
      case 'qa': return <Shield className="w-4 h-4" />;
      case 'support': return <Zap className="w-4 h-4" />;
      case 'orchestration': return <Brain className="w-4 h-4" />;
    }
  };

  const getStatusColor = (status: AgentStatus['status']) => {
    switch (status) {
      case 'pending': return 'bg-gray-500';
      case 'active': return 'bg-blue-500 animate-pulse';
      case 'completed': return 'bg-green-500';
      case 'error': return 'bg-red-500';
      case 'paused': return 'bg-yellow-500';
    }
  };

  const formatDuration = (start: Date, end?: Date) => {
    const duration = (end ? end.getTime() : currentTime.getTime()) - start.getTime();
    const minutes = Math.floor(duration / 60000);
    const seconds = Math.floor((duration % 60000) / 1000);
    return `${minutes}m ${seconds}s`;
  };

  const overallProgress = agents.length > 0 
    ? Math.round(agents.reduce((sum, agent) => sum + agent.progress, 0) / agents.length)
    : 0;

  const activeAgents = agents.filter(agent => agent.status === 'active').length;
  const completedAgents = agents.filter(agent => agent.status === 'completed').length;
  const totalProcessingTime = formatDuration(startTime);

  return (
    <div className="w-full max-w-7xl mx-auto p-6 space-y-6">
      {/* Header with Controls */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2">
            <Brain className="w-8 h-8 text-blue-600" />
            <h1 className="text-3xl font-bold">HandyWriterz AI Orchestration</h1>
          </div>
          <Badge variant="outline" className="text-sm">
            32 Agents • {eventCount} Events • Demo Ready
          </Badge>
        </div>

        <div className="flex items-center space-x-2">
          {isActive ? (
            <Button 
              onClick={onPause} 
              variant="outline" 
              size="sm"
              className="flex items-center space-x-2"
            >
              <Pause className="w-4 h-4" />
              <span>Pause</span>
            </Button>
          ) : (
            <Button 
              onClick={onResume} 
              variant="outline" 
              size="sm"
              className="flex items-center space-x-2"
            >
              <Play className="w-4 h-4" />
              <span>Resume</span>
            </Button>
          )}
          
          <Button 
            onClick={onPreview} 
            variant="outline" 
            size="sm"
            className="flex items-center space-x-2"
          >
            <Eye className="w-4 h-4" />
            <span>Preview</span>
          </Button>

          <Button 
            onClick={onStop} 
            variant="destructive" 
            size="sm"
            className="flex items-center space-x-2"
          >
            <RotateCcw className="w-4 h-4" />
            <span>Stop</span>
          </Button>
        </div>
      </div>

      {/* Success Celebration Animation */}
      {showCelebration && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
          <div className="bg-white rounded-lg p-8 text-center space-y-4 animate-bounce">
            <Trophy className="w-16 h-16 text-yellow-500 mx-auto" />
            <h2 className="text-2xl font-bold">🎉 Dissertation Complete! 🎉</h2>
            <div className="text-lg space-y-2">
              <div className="flex items-center justify-center space-x-2">
                <Star className="w-5 h-5 text-yellow-500" />
                <span>Quality Score: {qualityMetrics.overallScore.toFixed(1)}/10.0</span>
              </div>
              <div className="flex items-center justify-center space-x-2">
                <Target className="w-5 h-5 text-green-500" />
                <span>Originality: {qualityMetrics.originalityScore.toFixed(1)}%</span>
              </div>
              <div className="flex items-center justify-center space-x-2">
                <Clock className="w-5 h-5 text-blue-500" />
                <span>Time: {totalProcessingTime}</span>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Key Metrics Overview */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Overall Progress</p>
                <p className="text-2xl font-bold">{overallProgress}%</p>
              </div>
              <Activity className="w-8 h-8 text-blue-500" />
            </div>
            <Progress value={overallProgress} className="mt-2" />
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Quality Score</p>
                <p className="text-2xl font-bold text-green-600">
                  {qualityMetrics.overallScore.toFixed(1)}/10.0
                </p>
              </div>
              <Star className="w-8 h-8 text-yellow-500" />
            </div>
            <div className="flex items-center mt-2 text-sm text-green-600">
              <TrendingUp className="w-4 h-4 mr-1" />
              <span>Doctoral Standard</span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Active Agents</p>
                <p className="text-2xl font-bold">{activeAgents}/{agents.length}</p>
              </div>
              <Users className="w-8 h-8 text-purple-500" />
            </div>
            <div className="text-sm text-gray-500 mt-2">
              {completedAgents} completed
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Cost Tracking</p>
                <p className="text-2xl font-bold">${costMetrics.totalCost.toFixed(2)}</p>
              </div>
              <DollarSign className="w-8 h-8 text-green-500" />
            </div>
            <div className="text-sm text-gray-500 mt-2">
              ${costMetrics.budgetAllocated.toFixed(2)} budget
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Main Dashboard Tabs */}
      <Tabs defaultValue="agents" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="agents">Agent Swarm</TabsTrigger>
          <TabsTrigger value="phases">Process Phases</TabsTrigger>
          <TabsTrigger value="quality">Quality Metrics</TabsTrigger>
          <TabsTrigger value="timeline">Live Timeline</TabsTrigger>
        </TabsList>

        <TabsContent value="agents" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Brain className="w-6 h-6" />
                <span>32-Agent Orchestration System</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {agents.map((agent) => (
                  <div key={agent.agentId} className="border rounded-lg p-4 space-y-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        {getAgentIcon(agent.type)}
                        <span className="font-semibold text-sm">{agent.name}</span>
                      </div>
                      <div className={`w-3 h-3 rounded-full ${getStatusColor(agent.status)}`} />
                    </div>
                    
                    <Progress value={agent.progress} className="h-2" />
                    
                    <div className="space-y-1 text-xs text-gray-600">
                      <div>Task: {agent.currentTask || 'Waiting...'}</div>
                      {agent.startTime && (
                        <div>Time: {formatDuration(agent.startTime, agent.completedTime)}</div>
                      )}
                      {agent.qualityScore && (
                        <div className="flex items-center space-x-1">
                          <Star className="w-3 h-3 text-yellow-500" />
                          <span>Quality: {agent.qualityScore.toFixed(1)}</span>
                        </div>
                      )}
                    </div>

                    {agent.outputPreview && (
                      <div className="mt-2 p-2 bg-gray-50 rounded text-xs">
                        <div className="font-semibold mb-1">Output Preview:</div>
                        <div className="line-clamp-2">{agent.outputPreview}</div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="phases" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Processing Phases</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {phases.map((phase) => (
                  <div key={phase.phase} className="border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="font-semibold capitalize">
                        {phase.phase.replace('_', ' ')}
                      </h3>
                      <Badge 
                        variant={phase.status === 'completed' ? 'default' : 'secondary'}
                        className={phase.status === 'active' ? 'animate-pulse' : ''}
                      >
                        {phase.status}
                      </Badge>
                    </div>
                    
                    <Progress value={phase.progress} className="mb-3" />
                    
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                      {phase.milestones.map((milestone) => (
                        <div 
                          key={milestone.id}
                          className={`p-2 rounded text-xs border ${
                            milestone.achieved ? 'bg-green-50 border-green-200' : 'bg-gray-50 border-gray-200'
                          }`}
                        >
                          <div className="flex items-center space-x-1">
                            {milestone.achieved ? (
                              <CheckCircle className="w-3 h-3 text-green-500" />
                            ) : (
                              <Clock className="w-3 h-3 text-gray-400" />
                            )}
                            <span className="font-medium">{milestone.name}</span>
                          </div>
                          <div className="text-gray-600 mt-1">{milestone.description}</div>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="quality" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Star className="w-6 h-6 text-yellow-500" />
                  <span>Quality Metrics</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {Object.entries(qualityMetrics).map(([key, value]) => (
                  <div key={key}>
                    <div className="flex justify-between text-sm mb-1">
                      <span className="capitalize">{key.replace(/([A-Z])/g, ' $1').trim()}</span>
                      <span className="font-semibold">{value.toFixed(1)}/10.0</span>
                    </div>
                    <Progress value={value * 10} className="h-2" />
                  </div>
                ))}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <DollarSign className="w-6 h-6 text-green-500" />
                  <span>Cost Analysis</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <div className="text-gray-600">Total Cost</div>
                    <div className="text-lg font-bold">${costMetrics.totalCost.toFixed(2)}</div>
                  </div>
                  <div>
                    <div className="text-gray-600">Budget Used</div>
                    <div className="text-lg font-bold">
                      {((costMetrics.totalCost / costMetrics.budgetAllocated) * 100).toFixed(1)}%
                    </div>
                  </div>
                  <div>
                    <div className="text-gray-600">Tokens Used</div>
                    <div className="text-lg font-bold">{costMetrics.tokensUsed.toLocaleString()}</div>
                  </div>
                  <div>
                    <div className="text-gray-600">Cost/Quality</div>
                    <div className="text-lg font-bold">${costMetrics.costPerQualityPoint.toFixed(2)}</div>
                  </div>
                </div>
                
                <div className="mt-4">
                  <div className="flex justify-between text-sm mb-1">
                    <span>Budget Usage</span>
                    <span>${costMetrics.projectedFinalCost.toFixed(2)} projected</span>
                  </div>
                  <Progress 
                    value={(costMetrics.totalCost / costMetrics.budgetAllocated) * 100} 
                    className="h-2" 
                  />
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="timeline" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>Live Event Timeline</span>
                <Badge variant="outline">{eventCount} Events</Badge>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center text-gray-500 py-8">
                <Activity className="w-12 h-12 mx-auto mb-4 animate-pulse" />
                <p>Real-time events will appear here during processing...</p>
                <p className="text-sm mt-2">156 event types supported</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};


================================================
FILE: frontend/src/components/chat/ContextUploadMenu.tsx
================================================
import React from 'react';
import { Plus, Camera, Image as ImageIcon, File as FileIcon } from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

const MAX_FILES = 50;
const MAX_SIZE = 100 * 1024 * 1024; // 100 MB

function toast(msg: string) {
  const t = document.createElement('div');
  t.className = 'fixed top-4 right-4 bg-black/80 text-white px-3 py-1 rounded';
  t.textContent = msg;
  document.body.appendChild(t);
  setTimeout(() => t.remove(), 2000);
}

import * as tus from "tus-js-client";

async function sendToAgents(files: File[]) {
  for (const file of files) {
    const upload = new tus.Upload(file, {
      endpoint: "/api/files",
      retryDelays: [0, 3000, 5000, 10000, 20000],
      metadata: {
        filename: file.name,
        filetype: file.type,
      },
      onError: (error) => {
        console.log("Failed because: " + error);
        toast(`Error: ${error}`);
      },
      onProgress: (bytesUploaded, bytesTotal) => {
        const percentage = ((bytesUploaded / bytesTotal) * 100).toFixed(2);
        console.log(bytesUploaded, bytesTotal, percentage + "%");
      },
      onSuccess: () => {
        const fileName = upload.file instanceof File ? upload.file.name : 'unknown file';
        console.log("Download %s from %s", fileName, upload.url);
        toast("Files uploaded successfully!");
      },
    });

    // Start the upload
    upload.start();
  }
}

export const ContextUploadMenu: React.FC = () => {
  const fileInputRef = React.useRef<HTMLInputElement>(null);

  const k2Pick = () => {
    fileInputRef.current?.click();
  };

  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files ? Array.from(e.target.files) : [];
    if (files.length === 0) return;

    if (files.length > MAX_FILES) {
      return toast(`Error: Cannot select more than ${MAX_FILES} files.`);
    }

    for (const file of files) {
      if (file.size > MAX_SIZE) {
        return toast(`Error: File "${file.name}" exceeds the ${MAX_SIZE / (1024 * 1024)}MB size limit.`);
      }
    }

    toast(`📎 ${files.length} file(s)`);

    // chunk + embed + store
    await sendToAgents(files);
  };

  return (
    <>
      <input
        id="k2-file"
        type="file"
        multiple
        style={{ display: 'none' }}
        accept="*"
        ref={fileInputRef}
        onChange={handleFileChange}
      />
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            type="button"
            variant="ghost"
            size="icon"
            className="h-8 w-8"
          >
            <Plus className="h-5 w-5" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent>
          <DropdownMenuItem onClick={k2Pick}>
            <ImageIcon className="mr-2 h-4 w-4" />
            <span>Add photos & files</span>
          </DropdownMenuItem>
          <DropdownMenuItem disabled>
            <Camera className="mr-2 h-4 w-4" />
            <span>Take photo</span>
          </DropdownMenuItem>
          <DropdownMenuItem disabled>
            <FileIcon className="mr-2 h-4 w-4" />
            <span>Take screenshot</span>
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </>
  );
};



================================================
FILE: frontend/src/components/chat/CostMeter.tsx
================================================
"use client";

import { useState, useEffect } from "react";

async function fetchCostEstimate(prompt: string): Promise<{ cost: number }> {
  // In a real application, this would make an API call to the backend.
  // For now, we'll just estimate the cost based on the prompt length.
  const cost = (prompt.length / 1000) * 0.01; // $0.01 per 1000 characters
  return { cost };
}

export function CostMeter({ prompt }: { prompt: string }) {
  const [cost, setCost] = useState<number | null>(null);

  useEffect(() => {
    if (prompt) {
      fetchCostEstimate(prompt).then(({ cost }) => setCost(cost));
    } else {
      setCost(null);
    }
  }, [prompt]);

  if (cost === null) {
    return null;
  }

  return (
    <div className="text-sm text-muted-foreground">
      Estimated cost: ${cost.toFixed(4)}
    </div>
  );
}



================================================
FILE: frontend/src/components/chat/DemoReadyChatInterface.tsx
================================================
/**
 * Demo-Ready Chat Interface for YC Demo Day
 * 13-minute doctoral dissertation generation with live visualization
 * Integration of all revolutionary components
 */

'use client';

import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Send, 
  Sparkles, 
  Trophy, 
  Clock, 
  Star, 
  Target, 
  DollarSign, 
  Brain, 
  Zap, 
  FileText, 
  Download, 
  Eye, 
  Share,
  Rocket,
  Crown,
  Award,
  TrendingUp,
  CheckCircle2,
  Users,
  Globe,
  Timer,
  Lightbulb,
  ArrowRight,
  Play,
  Pause,
  RotateCcw
} from 'lucide-react';

import { RevolutionaryFileUploader } from '@/components/upload/RevolutionaryFileUploader';
import { AgentOrchestrationDashboard } from '@/components/agent/AgentOrchestrationDashboard';
import { ProcessedContent } from '@/types/multimodal';

// Define ProcessingProgress locally since it's not exported from multimodal types
interface ProcessingProgress {
  fileId: string;
  fileName: string;
  progress: number;
  stage: string;
  insights: any[]; // Array of insights for metrics calculation
  processingTime: number; // Processing time for metrics
}
import { useAdvancedChat } from '@/hooks/useAdvancedChat';

interface DissertationResult {
  id: string;
  title: string;
  wordCount: number;
  qualityScore: number;
  originalityScore: number;
  citationCount: number;
  processingTime: number;
  cost: number;
  downloadUrls: {
    docx: string;
    pdf: string;
    slides: string;
    executive: string;
  };
  achievements: Achievement[];
}

interface Achievement {
  id: string;
  name: string;
  description: string;
  icon: 'quality' | 'speed' | 'originality' | 'citations' | 'innovation';
  achieved: boolean;
  value: number;
  target: number;
}

export const DemoReadyChatInterface: React.FC = () => {
  // Core state
  const [prompt, setPrompt] = useState('');
  const [writeupType, setWriteupType] = useState('dissertation');
  const [citationStyle, setCitationStyle] = useState('harvard');
  const [academicLevel, setAcademicLevel] = useState('doctoral');
  const [traceId] = useState(`trace_${Date.now()}_demo`);
  
  // Processing state
  const [isProcessing, setIsProcessing] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [processedFiles, setProcessedFiles] = useState<ProcessedContent[]>([]);
  const [overallProgress, setOverallProgress] = useState(0);
  const [currentPhase, setCurrentPhase] = useState('initialization');
  const [startTime, setStartTime] = useState<Date | null>(null);
  const [estimatedCompletion, setEstimatedCompletion] = useState<Date | null>(null);
  
  // Results state
  const [dissertationResult, setDissertationResult] = useState<DissertationResult | null>(null);
  const [showCelebration, setShowCelebration] = useState(false);
  const [achievements, setAchievements] = useState<Achievement[]>([
    {
      id: 'quality',
      name: 'Doctoral Excellence',
      description: 'Achieve 9.0+ quality score',
      icon: 'quality',
      achieved: false,
      value: 0,
      target: 9.0
    },
    {
      id: 'speed',
      name: 'Lightning Fast',
      description: 'Complete in under 15 minutes',
      icon: 'speed',
      achieved: false,
      value: 0,
      target: 900 // 15 minutes in seconds
    },
    {
      id: 'originality',
      name: 'Highly Original',
      description: '85%+ originality score',
      icon: 'originality',
      achieved: false,
      value: 0,
      target: 85
    },
    {
      id: 'citations',
      name: 'Research Master',
      description: '40+ academic citations',
      icon: 'citations',
      achieved: false,
      value: 0,
      target: 40
    }
  ]);

  // Demo metrics
  const [liveMetrics, setLiveMetrics] = useState({
    agentsActive: 0,
    eventsProcessed: 0,
    tokensGenerated: 0,
    currentCost: 0,
    qualityScore: 0,
    processingTime: 0
  });

  const { sendMessage, messages, isLoading } = useAdvancedChat();

  // Sample sophisticated prompt for demo
  const demoPrompt = `I need a comprehensive 8000-word doctoral dissertation on "The Intersection of Artificial Intelligence and International Cancer Treatment Protocols: Legal, Ethical, and Implementation Frameworks in Global Healthcare Governance"

Requirements:
- Focus on international law and regulatory compliance
- Analyze AI implementation in 15+ countries  
- Include cost-benefit analysis with economic modeling
- Integrate uploaded research files and audio/video sources
- Use PRISMA methodology for systematic review
- Harvard citation style with 40+ peer-reviewed sources
- Include methodology section, literature review, analysis, and conclusions
- Generate supplementary slides and infographics
- Ensure 90%+ originality score
- Target high-impact journal submission standards

Please process all uploaded files and integrate their content strategically throughout the dissertation.`;

  useEffect(() => {
    // Set demo prompt by default
    setPrompt(demoPrompt);
  }, []);

  const handleFilesProcessed = (files: ProcessedContent[]) => {
    setProcessedFiles(files);
  };

  const handleProcessingUpdate = (progress: ProcessingProgress[]) => {
    const totalProgress = progress.reduce((sum, p) => sum + p.progress, 0) / progress.length;
    setOverallProgress(totalProgress);
    
    // Update live metrics
    setLiveMetrics(prev => ({
      ...prev,
      tokensGenerated: progress.reduce((sum, p) => sum + p.insights.length * 100, 0),
      processingTime: progress.reduce((sum, p) => sum + p.processingTime, 0)
    }));
  };

  const handleStartDissertation = async () => {
    if (!prompt.trim()) return;

    setIsProcessing(true);
    setStartTime(new Date());
    setEstimatedCompletion(new Date(Date.now() + 810000)); // 13.5 minutes
    setCurrentPhase('file_processing');

    try {
      // This would call the actual API
      const response = await sendMessage(prompt, writeupType, {
        citationStyle,
        academicLevel,
        // Note: processedFiles and traceId would need to be handled differently
        // in the actual implementation as they're not part of the options interface
      });

      // Simulate processing completion after demo duration
      setTimeout(() => {
        simulateCompletion();
      }, 13.5 * 60 * 1000);

    } catch (error) {
      console.error('Processing failed:', error);
      setIsProcessing(false);
    }
  };

  const simulateCompletion = () => {
    const result: DissertationResult = {
      id: 'diss_001',
      title: 'The Intersection of Artificial Intelligence and International Cancer Treatment Protocols',
      wordCount: 8734,
      qualityScore: 9.1,
      originalityScore: 88.7,
      citationCount: 67,
      processingTime: 13.45, // 13 minutes 27 seconds
      cost: 34.72,
      downloadUrls: {
        docx: '/downloads/dissertation.docx',
        pdf: '/downloads/dissertation.pdf',
        slides: '/downloads/presentation.pptx',
        executive: '/downloads/executive-summary.pdf'
      },
      achievements: []
    };

    setDissertationResult(result);
    setIsProcessing(false);
    setShowCelebration(true);

    // Update achievements
    setAchievements(prev => prev.map(achievement => {
      let achieved = false;
      let value = 0;

      switch (achievement.id) {
        case 'quality':
          value = result.qualityScore;
          achieved = value >= achievement.target;
          break;
        case 'speed':
          value = result.processingTime * 60; // Convert to seconds
          achieved = value <= achievement.target;
          break;
        case 'originality':
          value = result.originalityScore;
          achieved = value >= achievement.target;
          break;
        case 'citations':
          value = result.citationCount;
          achieved = value >= achievement.target;
          break;
      }

      return { ...achievement, achieved, value };
    }));

    setTimeout(() => setShowCelebration(false), 10000);
  };

  const handlePause = () => setIsPaused(true);
  const handleResume = () => setIsPaused(false);
  const handleStop = () => {
    setIsProcessing(false);
    setIsPaused(false);
    setOverallProgress(0);
  };

  const getAchievementIcon = (icon: Achievement['icon']) => {
    switch (icon) {
      case 'quality': return <Star className="w-5 h-5" />;
      case 'speed': return <Zap className="w-5 h-5" />;
      case 'originality': return <Target className="w-5 h-5" />;
      case 'citations': return <FileText className="w-5 h-5" />;
      case 'innovation': return <Lightbulb className="w-5 h-5" />;
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}m ${secs}s`;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 p-4">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Demo Header */}
        <div className="text-center space-y-4">
          <div className="flex items-center justify-center space-x-3">
            <Crown className="w-12 h-12 text-yellow-500" />
            <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              HandyWriterz AI
            </h1>
            <Crown className="w-12 h-12 text-yellow-500" />
          </div>
          <p className="text-xl text-gray-600">
            Revolutionary Academic AI • 13-Minute Doctoral Dissertations • 9.1/10.0 Quality
          </p>
          <div className="flex justify-center space-x-4">
            <Badge variant="outline" className="text-green-600 border-green-600">
              ✨ YC Demo Day Ready
            </Badge>
            <Badge variant="outline" className="text-blue-600 border-blue-600">
              🚀 32 AI Agents
            </Badge>
            <Badge variant="outline" className="text-purple-600 border-purple-600">
              🧠 Gemini 2.5 Pro
            </Badge>
            <Badge variant="outline" className="text-red-600 border-red-600">
              💎 $2.3B Market
            </Badge>
          </div>
        </div>

        {/* Success Celebration */}
        {showCelebration && dissertationResult && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm">
            <Card className="max-w-2xl w-full mx-4 border-2 border-yellow-400">
              <CardContent className="p-8 text-center space-y-6">
                <div className="animate-bounce">
                  <Trophy className="w-20 h-20 text-yellow-500 mx-auto" />
                </div>
                
                <div className="space-y-2">
                  <h2 className="text-3xl font-bold text-green-600">
                    🎉 DISSERTATION COMPLETE! 🎉
                  </h2>
                  <p className="text-lg text-gray-600">
                    Revolutionary AI generates doctoral-quality research in record time
                  </p>
                </div>

                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="space-y-1">
                    <div className="text-2xl font-bold text-green-600">
                      {dissertationResult.qualityScore.toFixed(1)}
                    </div>
                    <div className="text-sm text-gray-600">Quality Score</div>
                  </div>
                  <div className="space-y-1">
                    <div className="text-2xl font-bold text-blue-600">
                      {dissertationResult.originalityScore.toFixed(1)}%
                    </div>
                    <div className="text-sm text-gray-600">Originality</div>
                  </div>
                  <div className="space-y-1">
                    <div className="text-2xl font-bold text-purple-600">
                      {formatTime(dissertationResult.processingTime * 60)}
                    </div>
                    <div className="text-sm text-gray-600">Processing Time</div>
                  </div>
                  <div className="space-y-1">
                    <div className="text-2xl font-bold text-yellow-600">
                      {dissertationResult.wordCount.toLocaleString()}
                    </div>
                    <div className="text-sm text-gray-600">Words</div>
                  </div>
                </div>

                <div className="flex justify-center space-x-3">
                  <Button className="flex items-center space-x-2">
                    <Download className="w-4 h-4" />
                    <span>Download All</span>
                  </Button>
                  <Button variant="outline" className="flex items-center space-x-2">
                    <Eye className="w-4 h-4" />
                    <span>Preview</span>
                  </Button>
                  <Button variant="outline" className="flex items-center space-x-2">
                    <Share className="w-4 h-4" />
                    <span>Share</span>
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        <Tabs defaultValue="compose" className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="compose">Compose</TabsTrigger>
            <TabsTrigger value="upload">File Upload</TabsTrigger>
            <TabsTrigger value="orchestration">AI Orchestration</TabsTrigger>
            <TabsTrigger value="results">Results</TabsTrigger>
          </TabsList>

          <TabsContent value="compose" className="space-y-6">
            {/* Configuration Panel */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Sparkles className="w-6 h-6 text-purple-500" />
                  <span>Dissertation Configuration</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="text-sm font-medium mb-2 block">Document Type</label>
                    <Select value={writeupType} onValueChange={setWriteupType}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="dissertation">Doctoral Dissertation</SelectItem>
                        <SelectItem value="thesis">Master's Thesis</SelectItem>
                        <SelectItem value="research_paper">Research Paper</SelectItem>
                        <SelectItem value="review_article">Review Article</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <label className="text-sm font-medium mb-2 block">Citation Style</label>
                    <Select value={citationStyle} onValueChange={setCitationStyle}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="harvard">Harvard</SelectItem>
                        <SelectItem value="apa">APA 7th</SelectItem>
                        <SelectItem value="mla">MLA 9th</SelectItem>
                        <SelectItem value="chicago">Chicago</SelectItem>
                        <SelectItem value="ieee">IEEE</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <label className="text-sm font-medium mb-2 block">Academic Level</label>
                    <Select value={academicLevel} onValueChange={setAcademicLevel}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="doctoral">Doctoral/PhD</SelectItem>
                        <SelectItem value="masters">Master's</SelectItem>
                        <SelectItem value="undergraduate">Undergraduate</SelectItem>
                        <SelectItem value="professional">Professional</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Prompt Input */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Brain className="w-6 h-6 text-blue-500" />
                  <span>Research Prompt</span>
                  <Badge variant="outline">Demo Ready</Badge>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <Textarea
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  placeholder="Enter your dissertation prompt..."
                  className="min-h-[200px] text-sm"
                />
                
                <div className="flex items-center justify-between">
                  <div className="text-sm text-gray-500">
                    {prompt.length} characters • Complexity Score: 9.3/10.0
                  </div>
                  
                  <Button 
                    onClick={handleStartDissertation}
                    disabled={isProcessing || !prompt.trim()}
                    className="flex items-center space-x-2 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                    size="lg"
                  >
                    <Rocket className="w-5 h-5" />
                    <span>Generate Dissertation</span>
                    <ArrowRight className="w-5 h-5" />
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Live Progress */}
            {isProcessing && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <Timer className="w-6 h-6 text-green-500" />
                      <span>Live Processing Status</span>
                    </div>
                    <Badge variant="outline" className="animate-pulse">
                      Processing...
                    </Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex items-center justify-between text-sm">
                    <span>Overall Progress</span>
                    <span>{Math.round(overallProgress)}%</span>
                  </div>
                  <Progress value={overallProgress} className="h-3" />
                  
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>
                      <div className="text-gray-600">Phase</div>
                      <div className="font-semibold capitalize">{currentPhase.replace('_', ' ')}</div>
                    </div>
                    <div>
                      <div className="text-gray-600">Quality Score</div>
                      <div className="font-semibold">{liveMetrics.qualityScore.toFixed(1)}/10.0</div>
                    </div>
                    <div>
                      <div className="text-gray-600">Cost</div>
                      <div className="font-semibold">${liveMetrics.currentCost.toFixed(2)}</div>
                    </div>
                    <div>
                      <div className="text-gray-600">Time</div>
                      <div className="font-semibold">
                        {startTime ? formatTime((Date.now() - startTime.getTime()) / 1000) : '0m 0s'}
                      </div>
                    </div>
                  </div>

                  <div className="flex justify-center space-x-2">
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={isPaused ? handleResume : handlePause}
                    >
                      {isPaused ? <Play className="w-4 h-4" /> : <Pause className="w-4 h-4" />}
                      <span className="ml-2">{isPaused ? 'Resume' : 'Pause'}</span>
                    </Button>
                    <Button variant="outline" size="sm" onClick={handleStop}>
                      <RotateCcw className="w-4 h-4" />
                      <span className="ml-2">Stop</span>
                    </Button>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Achievement Tracking */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Award className="w-6 h-6 text-yellow-500" />
                  <span>Achievement Tracking</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {achievements.map((achievement) => (
                    <div 
                      key={achievement.id}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        achievement.achieved 
                          ? 'border-green-500 bg-green-50' 
                          : 'border-gray-200 bg-gray-50'
                      }`}
                    >
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center space-x-2">
                          <div className={achievement.achieved ? 'text-green-600' : 'text-gray-400'}>
                            {getAchievementIcon(achievement.icon)}
                          </div>
                          <span className="font-semibold">{achievement.name}</span>
                        </div>
                        {achievement.achieved && <CheckCircle2 className="w-5 h-5 text-green-600" />}
                      </div>
                      <p className="text-sm text-gray-600 mb-2">{achievement.description}</p>
                      <div className="flex items-center justify-between text-sm">
                        <span>Progress:</span>
                        <span className="font-semibold">
                          {achievement.value}/{achievement.target}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="upload">
            <RevolutionaryFileUploader
              traceId={traceId}
              onFilesProcessed={handleFilesProcessed}
              onProcessingUpdate={handleProcessingUpdate}
              maxFiles={10}
              maxFileSize={500}
            />
          </TabsContent>

          <TabsContent value="orchestration">
            <AgentOrchestrationDashboard
              traceId={traceId}
              isActive={isProcessing}
              onPause={handlePause}
              onResume={handleResume}
              onStop={handleStop}
            />
          </TabsContent>

          <TabsContent value="results" className="space-y-6">
            {dissertationResult ? (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Trophy className="w-6 h-6 text-yellow-500" />
                    <span>Dissertation Complete</span>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div className="text-center p-4 border rounded-lg">
                      <div className="text-2xl font-bold text-green-600">
                        {dissertationResult.qualityScore.toFixed(1)}
                      </div>
                      <div className="text-sm text-gray-600">Quality Score</div>
                    </div>
                    <div className="text-center p-4 border rounded-lg">
                      <div className="text-2xl font-bold text-blue-600">
                        {dissertationResult.originalityScore.toFixed(1)}%
                      </div>
                      <div className="text-sm text-gray-600">Originality</div>
                    </div>
                    <div className="text-center p-4 border rounded-lg">
                      <div className="text-2xl font-bold text-purple-600">
                        {dissertationResult.citationCount}
                      </div>
                      <div className="text-sm text-gray-600">Citations</div>
                    </div>
                    <div className="text-center p-4 border rounded-lg">
                      <div className="text-2xl font-bold text-yellow-600">
                        {formatTime(dissertationResult.processingTime * 60)}
                      </div>
                      <div className="text-sm text-gray-600">Time</div>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    {Object.entries(dissertationResult.downloadUrls).map(([format, url]) => (
                      <Button key={format} variant="outline" className="flex items-center space-x-2">
                        <Download className="w-4 h-4" />
                        <span>{format.toUpperCase()}</span>
                      </Button>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ) : (
              <Card>
                <CardContent className="py-12 text-center">
                  <FileText className="w-16 h-16 mx-auto mb-4 text-gray-400" />
                  <p className="text-lg text-gray-600">No results yet</p>
                  <p className="text-sm text-gray-500">Start processing to see your dissertation results</p>
                </CardContent>
              </Card>
            )}
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};


================================================
FILE: frontend/src/components/chat/DownloadMenu.tsx
================================================
"use client";

import { useState, useEffect } from "react";
import { useStream } from "@/hooks/useStream";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Download } from "lucide-react";

export function DownloadMenu({ traceId }: { traceId: string | null }) {
  const { timeline } = useStream(traceId);
  const [downloads, setDownloads] = useState<{ kind: string; url: string }[]>([]);

  useEffect(() => {
    const newDownloads = timeline
      .filter((event) => event.type === "derivative_ready" || event.type === "format_done")
      .map((event) => ({
        kind: event.kind || (event.type === "format_done" ? "document" : "unknown"),
        url: event.url,
      }));
    setDownloads(newDownloads);
  }, [timeline]);

  if (downloads.length === 0) {
    return null;
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Download className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent>
        {downloads.map((download, index) => (
          <DropdownMenuItem key={index} asChild>
            <a href={download.url} target="_blank" rel="noopener noreferrer">
              Download {download.kind}
            </a>
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  );
}



================================================
FILE: frontend/src/components/chat/MicButton.tsx
================================================
import React, { useState, useEffect, useRef } from 'react';
import { Mic, MicOff } from 'lucide-react';
import { Button } from '@/components/ui/button';

interface MicButtonProps {
  onTranscript: (transcript: string) => void;
}

export const MicButton: React.FC<MicButtonProps> = ({ onTranscript }) => {
  const [listening, setListening] = useState(false);
  const [transcript, setTranscript] = useState('');
  const recognitionRef = useRef<any>(null);

  useEffect(() => {
    if (!('webkitSpeechRecognition' in window)) {
      console.error('Speech recognition not supported');
      return;
    }

    const recognition = new (window as any).webkitSpeechRecognition();
    recognition.continuous = false;
    recognition.interimResults = false;
    recognition.lang = 'en-US';

    recognition.onstart = () => {
      setListening(true);
    };

    recognition.onend = () => {
      setListening(false);
    };

    recognition.onresult = (event: any) => {
      const newTranscript = event.results[0][0].transcript;
      setTranscript(newTranscript);
      onTranscript(newTranscript);
    };

    recognitionRef.current = recognition;
  }, [onTranscript]);

  const handleMicClick = () => {
    if (listening) {
      recognitionRef.current?.stop();
    } else {
      recognitionRef.current?.start();
    }
  };

  return (
    <Button
      type="button"
      variant="ghost"
      size="icon"
      onClick={handleMicClick}
      className={`h-8 w-8 ${listening ? 'text-emerald-500' : ''}`}
    >
      {listening ? <MicOff className="h-5 w-5" /> : <Mic className="h-5 w-5" />}
    </Button>
  );
};


================================================
FILE: frontend/src/components/chat/OptimizedFileUpload.tsx
================================================
/**
 * Optimized File Upload Component for Railway Deployment
 * Handles chat context files with improved UX and performance
 */

'use client';

import React, { useState, useCallback, useRef } from 'react';
import { useDropzone } from 'react-dropzone';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { 
  Upload, 
  X, 
  File, 
  Image, 
  FileText, 
  Video, 
  Music,
  Archive,
  AlertCircle,
  CheckCircle2,
  Loader2
} from 'lucide-react';
import * as tus from 'tus-js-client';

// Configuration for Railway deployment
const MAX_FILES = 10; // Reduced for better performance
const MAX_SIZE = 25 * 1024 * 1024; // 25MB per file (Railway friendly)
const TOTAL_MAX_SIZE = 100 * 1024 * 1024; // 100MB total
const BACKEND_URL = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:8000';

interface UploadedFile {
  id: string;
  name: string;
  size: number;
  type: string;
  progress: number;
  status: 'uploading' | 'completed' | 'error' | 'processing';
  file_id?: string;
  error?: string;
  preview?: string;
  chunks?: number;
}

interface OptimizedFileUploadProps {
  onFilesReady: (fileIds: string[]) => void;
  disabled?: boolean;
  className?: string;
}

const getFileIcon = (type: string) => {
  if (type.startsWith('image/')) return <Image className="h-4 w-4" />;
  if (type.startsWith('video/')) return <Video className="h-4 w-4" />;
  if (type.startsWith('audio/')) return <Music className="h-4 w-4" />;
  if (type.includes('pdf') || type.includes('document')) return <FileText className="h-4 w-4" />;
  if (type.includes('zip') || type.includes('archive')) return <Archive className="h-4 w-4" />;
  return <File className="h-4 w-4" />;
};

const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

export const OptimizedFileUpload: React.FC<OptimizedFileUploadProps> = ({
  onFilesReady,
  disabled = false,
  className = ''
}) => {
  const [files, setFiles] = useState<UploadedFile[]>([]);
  const [isDragging, setIsDragging] = useState(false);
  const [totalProgress, setTotalProgress] = useState(0);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // File validation
  const validateFiles = (newFiles: File[]): { valid: File[], errors: string[] } => {
    const errors: string[] = [];
    const valid: File[] = [];

    // Check total file count
    if (files.length + newFiles.length > MAX_FILES) {
      errors.push(`Maximum ${MAX_FILES} files allowed`);
      return { valid: [], errors };
    }

    // Check individual files
    for (const file of newFiles) {
      if (file.size > MAX_SIZE) {
        errors.push(`${file.name} exceeds ${formatFileSize(MAX_SIZE)} limit`);
        continue;
      }

      // Check if file already exists
      if (files.some(f => f.name === file.name && f.size === file.size)) {
        errors.push(`${file.name} already uploaded`);
        continue;
      }

      valid.push(file);
    }

    // Check total size
    const currentSize = files.reduce((sum, f) => sum + f.size, 0);
    const newSize = valid.reduce((sum, f) => sum + f.size, 0);
    if (currentSize + newSize > TOTAL_MAX_SIZE) {
      errors.push(`Total size would exceed ${formatFileSize(TOTAL_MAX_SIZE)} limit`);
      return { valid: [], errors };
    }

    return { valid, errors };
  };

  // Upload single file with tus resumable upload
  const uploadFile = useCallback(async (file: File): Promise<string> => {
    const fileId = crypto.randomUUID();
    
    // Add file to state immediately
    const uploadFile: UploadedFile = {
      id: fileId,
      name: file.name,
      size: file.size,
      type: file.type,
      progress: 0,
      status: 'uploading'
    };

    // Generate preview for images
    if (file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setFiles(prev => prev.map(f => 
          f.id === fileId ? { ...f, preview: e.target?.result as string } : f
        ));
      };
      reader.readAsDataURL(file);
    }

    setFiles(prev => [...prev, uploadFile]);

    return new Promise((resolve, reject) => {
      const upload = new tus.Upload(file, {
        endpoint: `${BACKEND_URL}/api/files/upload`,
        retryDelays: [0, 1000, 3000, 5000],
        chunkSize: 5 * 1024 * 1024, // 5MB chunks for Railway
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('access_token') || ''}`
        },
        metadata: {
          filename: file.name,
          filetype: file.type,
          filesize: file.size.toString(),
          context: 'chat'
        },
        
        onError: (error) => {
          console.error('Upload failed:', error);
          setFiles(prev => prev.map(f => 
            f.id === fileId 
              ? { ...f, status: 'error', error: error.message }
              : f
          ));
          reject(error);
        },

        onProgress: (bytesUploaded, bytesTotal) => {
          const progress = Math.round((bytesUploaded / bytesTotal) * 100);
          setFiles(prev => prev.map(f => 
            f.id === fileId 
              ? { ...f, progress }
              : f
          ));
          
          // Update total progress
          updateTotalProgress();
        },

        onSuccess: () => {
          const uploadedFileId = upload.url?.split('/').pop() || fileId;
          
          setFiles(prev => prev.map(f => 
            f.id === fileId 
              ? { 
                  ...f, 
                  status: 'processing', 
                  file_id: uploadedFileId, 
                  progress: 100 
                }
              : f
          ));

          // Start background processing
          processFile(uploadedFileId, fileId);
          resolve(uploadedFileId);
        }
      });

      upload.start();
    });
  }, [files]);

  // Process file after upload (chunking, embedding)
  const processFile = async (fileId: string, localId: string) => {
    try {
      const response = await fetch(`${BACKEND_URL}/api/files/${fileId}/process`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('access_token') || ''}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ context: 'chat' })
      });

      if (response.ok) {
        const result = await response.json();
        setFiles(prev => prev.map(f => 
          f.id === localId 
            ? { 
                ...f, 
                status: 'completed',
                chunks: result.chunks || 0
              }
            : f
        ));
      } else {
        throw new Error('Processing failed');
      }
    } catch (error) {
      console.error('File processing failed:', error);
      setFiles(prev => prev.map(f => 
        f.id === localId 
          ? { ...f, status: 'error', error: 'Processing failed' }
          : f
      ));
    }
  };

  // Update total progress
  const updateTotalProgress = () => {
    setFiles(current => {
      if (current.length === 0) {
        setTotalProgress(0);
        return current;
      }
      
      const totalProgress = current.reduce((sum, f) => sum + f.progress, 0);
      setTotalProgress(totalProgress / current.length);
      return current;
    });
  };

  // Handle file drop/selection
  const handleFiles = useCallback(async (newFiles: File[]) => {
    if (disabled) return;

    const { valid, errors } = validateFiles(newFiles);
    
    // Show errors
    if (errors.length > 0) {
      // You can replace this with a proper toast notification
      alert(errors.join('\n'));
      return;
    }

    // Upload valid files
    try {
      const uploadPromises = valid.map(file => uploadFile(file));
      await Promise.all(uploadPromises);
      
      // Notify parent when all files are ready
      const completedFileIds = files
        .filter(f => f.status === 'completed' && f.file_id)
        .map(f => f.file_id!);
      
      if (completedFileIds.length > 0) {
        onFilesReady(completedFileIds);
      }
    } catch (error) {
      console.error('Upload failed:', error);
    }
  }, [files, disabled, uploadFile, onFilesReady]);

  // Dropzone configuration
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop: handleFiles,
    disabled,
    maxFiles: MAX_FILES,
    maxSize: MAX_SIZE,
    multiple: true,
    noClick: files.length >= MAX_FILES
  });

  // Remove file
  const removeFile = (id: string) => {
    setFiles(prev => prev.filter(f => f.id !== id));
    updateTotalProgress();
  };

  // Get completed file IDs
  const getCompletedFileIds = () => {
    return files
      .filter(f => f.status === 'completed' && f.file_id)
      .map(f => f.file_id!);
  };

  // Clear all files
  const clearAll = () => {
    setFiles([]);
    setTotalProgress(0);
  };

  const isUploading = files.some(f => f.status === 'uploading');
  const hasErrors = files.some(f => f.status === 'error');
  const completedCount = files.filter(f => f.status === 'completed').length;

  return (
    <div className={`space-y-4 ${className}`}>
      {/* Upload Zone */}
      <Card className={`border-2 border-dashed transition-colors ${
        isDragActive 
          ? 'border-blue-500 bg-blue-50' 
          : disabled 
            ? 'border-gray-200 bg-gray-50'
            : 'border-gray-300 hover:border-gray-400'
      }`}>
        <CardContent className="p-6">
          <div 
            {...getRootProps()} 
            className={`text-center ${disabled ? 'cursor-not-allowed' : 'cursor-pointer'}`}
          >
            <input {...getInputProps()} ref={fileInputRef} />
            
            <Upload className={`mx-auto h-12 w-12 mb-4 ${
              disabled ? 'text-gray-300' : 'text-gray-400'
            }`} />
            
            <h3 className="text-lg font-medium mb-2">
              {isDragActive 
                ? 'Drop files here...' 
                : 'Upload context files'
              }
            </h3>
            
            <p className="text-sm text-gray-500 mb-4">
              Drag & drop files or click to browse
            </p>
            
            <div className="flex flex-wrap justify-center gap-2 text-xs text-gray-400">
              <Badge variant="outline">Max {MAX_FILES} files</Badge>
              <Badge variant="outline">Up to {formatFileSize(MAX_SIZE)} each</Badge>
              <Badge variant="outline">Total: {formatFileSize(TOTAL_MAX_SIZE)}</Badge>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Progress Bar */}
      {(isUploading || files.length > 0) && (
        <div className="space-y-2">
          <div className="flex justify-between items-center text-sm">
            <span className="text-gray-600">
              {completedCount}/{files.length} files processed
            </span>
            <span className="text-gray-500">
              {Math.round(totalProgress)}%
            </span>
          </div>
          <Progress value={totalProgress} className="h-2" />
        </div>
      )}

      {/* File List */}
      {files.length > 0 && (
        <Card>
          <CardContent className="p-4">
            <div className="flex justify-between items-center mb-4">
              <h4 className="font-medium">Uploaded Files</h4>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={clearAll}
                disabled={isUploading}
              >
                Clear All
              </Button>
            </div>
            
            <div className="space-y-2">
              {files.map((file) => (
                <div 
                  key={file.id} 
                  className="flex items-center gap-3 p-3 border rounded-lg"
                >
                  {/* File Preview/Icon */}
                  <div className="flex-shrink-0">
                    {file.preview ? (
                      <img 
                        src={file.preview} 
                        alt={file.name}
                        className="w-10 h-10 object-cover rounded"
                      />
                    ) : (
                      <div className="w-10 h-10 bg-gray-100 rounded flex items-center justify-center">
                        {getFileIcon(file.type)}
                      </div>
                    )}
                  </div>

                  {/* File Info */}
                  <div className="flex-grow min-w-0">
                    <div className="flex items-center gap-2">
                      <p className="text-sm font-medium truncate">
                        {file.name}
                      </p>
                      
                      {/* Status Badge */}
                      {file.status === 'uploading' && (
                        <Badge variant="secondary">
                          <Loader2 className="w-3 h-3 mr-1 animate-spin" />
                          Uploading
                        </Badge>
                      )}
                      {file.status === 'processing' && (
                        <Badge variant="secondary">
                          <Loader2 className="w-3 h-3 mr-1 animate-spin" />
                          Processing
                        </Badge>
                      )}
                      {file.status === 'completed' && (
                        <Badge variant="default">
                          <CheckCircle2 className="w-3 h-3 mr-1" />
                          Ready
                        </Badge>
                      )}
                      {file.status === 'error' && (
                        <Badge variant="destructive">
                          <AlertCircle className="w-3 h-3 mr-1" />
                          Error
                        </Badge>
                      )}
                    </div>
                    
                    <div className="flex items-center gap-4 text-xs text-gray-500 mt-1">
                      <span>{formatFileSize(file.size)}</span>
                      {file.chunks && (
                        <span>{file.chunks} chunks</span>
                      )}
                      {file.error && (
                        <span className="text-red-500">{file.error}</span>
                      )}
                    </div>

                    {/* Progress Bar for individual file */}
                    {file.status === 'uploading' && (
                      <Progress value={file.progress} className="h-1 mt-2" />
                    )}
                  </div>

                  {/* Remove Button */}
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => removeFile(file.id)}
                    disabled={file.status === 'uploading'}
                    className="flex-shrink-0"
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};


================================================
FILE: frontend/src/components/chat/PromptEditor.tsx
================================================
"use client";

import * as React from "react";
import Textarea from "react-textarea-autosize";
import { Button } from "@/components/ui/button";
import { ContextUploadMenu } from "./ContextUploadMenu";
import { CostMeter } from "./CostMeter";

export function PromptEditor({
  onSubmit,
  isLoading,
}: {
  onSubmit: (value: string) => Promise<void>;
  isLoading: boolean;
}) {
  const [value, setValue] = React.useState("");
  const inputRef = React.useRef<HTMLTextAreaElement>(null);

  const onKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      if (value.trim()) {
        onSubmit(value);
        setValue("");
      }
    }
  };

  return (
    <div className="relative flex max-h-[50vh] w-full grow flex-col overflow-hidden bg-background px-8 sm:rounded-md sm:border sm:px-12">
      <Textarea
        ref={inputRef}
        tabIndex={0}
        onKeyDown={onKeyDown}
        rows={1}
        value={value}
        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setValue(e.target.value)}
        placeholder="Send a message."
        spellCheck={false}
        className="w-full resize-none bg-transparent focus-within:outline-none sm:text-sm"
      />
      <div className="absolute right-4 top-2/4 -translate-y-2/4">
        <div className="flex items-center space-x-2">
          <CostMeter prompt={value} />
          <ContextUploadMenu />
          <Button
            type="submit"
            size="icon"
            disabled={isLoading || !value.trim()}
            onClick={() => onSubmit(value)}
          >
            <span>Send</span>
          </Button>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: frontend/src/components/Composer/AttachButton.tsx
================================================
'use client';

import React, { useRef } from 'react';
import { Plus, Camera, Image, FileText } from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';

interface AttachButtonProps {
  onFiles: (files: FileList) => void;
  disabled?: boolean;
}

export function AttachButton({ onFiles, disabled }: AttachButtonProps) {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const cameraInputRef = useRef<HTMLInputElement>(null);

  const handleScreenshot = async () => {
    try {
      // Check if the Screen Capture API is available
      if (!navigator.mediaDevices || !navigator.mediaDevices.getDisplayMedia) {
        throw new Error('Screen capture not supported');
      }

      const stream = await navigator.mediaDevices.getDisplayMedia({
        video: { mediaSource: 'screen' } as any,
      });

      const video = document.createElement('video');
      video.srcObject = stream;
      video.play();

      video.onloadedmetadata = () => {
        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext('2d');

        if (ctx) {
          ctx.drawImage(video, 0, 0);

          canvas.toBlob((blob) => {
            if (blob) {
              const file = new File([blob], `screenshot-${Date.now()}.png`, { type: 'image/png' });
              const dt = new DataTransfer();
              dt.items.add(file);
              onFiles(dt.files);
            }

            // Stop the stream
            stream.getTracks().forEach(track => track.stop());
          }, 'image/png');
        }
      };
    } catch (error) {
      console.error('Screenshot failed:', error);
    }
  };

  const handleFileSelect = () => {
    fileInputRef.current?.click();
  };

  const handleCameraSelect = () => {
    cameraInputRef.current?.click();
  };

  return (
    <>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            size="icon"
            className={cn(
              "h-10 w-10 rounded-lg",
              "hover:bg-accent hover:text-accent-foreground",
              "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring"
            )}
            disabled={disabled}
          >
            <Plus className="h-5 w-5" />
            <span className="sr-only">Attach files</span>
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="start" className="w-48">
          <DropdownMenuItem onClick={handleScreenshot}>
            <Camera className="mr-2 h-4 w-4" />
            Take screenshot
          </DropdownMenuItem>
          <DropdownMenuItem onClick={handleCameraSelect}>
            <Image className="mr-2 h-4 w-4" />
            Take photo
          </DropdownMenuItem>
          <DropdownMenuItem onClick={handleFileSelect}>
            <FileText className="mr-2 h-4 w-4" />
            Add photos & files
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>

      {/* Hidden file inputs */}
      <input
        ref={fileInputRef}
        type="file"
        multiple
        className="hidden"
        onChange={(e) => e.target.files && onFiles(e.target.files)}
        accept="image/*,video/*,audio/*,.pdf,.doc,.docx,.txt,.md,.csv,.xlsx,.xls"
      />
      <input
        ref={cameraInputRef}
        type="file"
        capture="environment"
        accept="image/*"
        className="hidden"
        onChange={(e) => e.target.files && onFiles(e.target.files)}
      />
    </>
  );
}



================================================
FILE: frontend/src/components/Composer/Composer.tsx
================================================
'use client';

import React, { useState, useRef, useCallback, useEffect } from 'react';
import TextareaAutosize from 'react-textarea-autosize';
import { AttachButton } from './AttachButton';
import { WriteupSelect } from './WriteupSelect';
import { MicButton } from './MicButton';
import { SendButton } from './SendButton';
import { cn } from '@/lib/utils';
import { useToast } from '@/components/ui/use-toast';

interface FileAttachment {
  id: string;
  file: File;
  url: string;
  name: string;
  size: number;
  mime: string;
  uploading?: boolean;
  uploaded?: boolean;
}

interface ComposerProps {
  conversationId: string;
  onSend: (payload: {
    conversationId: string;
    author: 'user';
    content: string;
    writeupType: string;
    attachments?: Array<{
      url: string;
      mime: string;
      name: string;
      size: number;
    }>;
  }) => void;
  disabled?: boolean;
  className?: string;
}

export function Composer({ conversationId, onSend, disabled = false, className }: ComposerProps) {
  const [content, setContent] = useState('');
  const [writeupType, setWriteupType] = useState('general');
  const [attachments, setAttachments] = useState<FileAttachment[]>([]);
  const [isDragging, setIsDragging] = useState(false);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  const canSend = (content.trim().length > 0 || attachments.length > 0) && !disabled;

  const handleSend = useCallback(async () => {
    if (!canSend || disabled) return;

    // Prevent double submission
    const currentContent = content.trim();
    if (!currentContent && attachments.length === 0) return;

    // Check if any files are still uploading
    const stillUploading = attachments.some(a => a.uploading);
    
    if (stillUploading) {
      toast({
        title: "Files still uploading",
        description: "Please wait for all files to finish uploading.",
        variant: "destructive",
      });
      return;
    }

    // Get all attachments (uploaded or not)
    const uploadedAttachments = attachments;

    // Clear state immediately to prevent duplicate sends
    setContent('');
    setAttachments([]);

    const payload = {
      conversationId,
      author: 'user' as const,
      content: currentContent,
      writeupType,
      attachments: uploadedAttachments.map(a => ({
        url: a.url,
        mime: a.mime,
        name: a.name,
        size: a.size,
      })),
    };

    try {
      await onSend(payload);
    } catch (error) {
      console.error('Failed to send message:', error);
      // Restore content if send failed
      setContent(currentContent);
      setAttachments(attachments);
    } finally {
      textareaRef.current?.focus();
    }
  }, [content, writeupType, attachments, conversationId, onSend, canSend, disabled, toast]);

  const handleKeyDown = useCallback((e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  }, [handleSend]);

  const handleFiles = useCallback(async (files: FileList) => {
    const newAttachments: FileAttachment[] = Array.from(files).map((file, index) => ({
      id: `${file.name}-${Date.now()}-${Math.random().toString(36)}-${index}`,
      file,
      url: URL.createObjectURL(file),
      name: file.name,
      size: file.size,
      mime: file.type,
      uploading: true,
      uploaded: false,
    }));

    setAttachments(prev => [...prev, ...newAttachments]);

    // Upload files to backend
    const formData = new FormData();
    Array.from(files).forEach((file) => {
      formData.append('files', file);
    });

    try {
      const uploadResponse = await fetch('/api/upload', {
        method: 'POST',
        body: formData,
      });

      if (uploadResponse.ok) {
        const uploadResult = await uploadResponse.json();
        const fileIds = uploadResult.file_ids || [];

        // Update attachments with backend file IDs
        setAttachments(prev =>
          prev.map((attachment, index) => {
            const newAttachment = newAttachments.find(na => na.id === attachment.id);
            if (newAttachment) {
              return {
                ...attachment,
                uploading: false,
                uploaded: true,
                url: fileIds[newAttachments.indexOf(newAttachment)] || attachment.url
              };
            }
            return attachment;
          })
        );
      } else {
        throw new Error('Upload failed');
      }
    } catch (error) {
      console.error('File upload failed:', error);
      
      // Mark as uploaded with local reference (ChatGPT-style)
      setAttachments(prev =>
        prev.map(a =>
          newAttachments.find(na => na.id === a.id)
            ? { ...a, uploading: false, uploaded: true }
            : a
        )
      );
      
      toast({
        title: "Files attached",
        description: "Files will be included in your message (backend upload failed - using local references).",
        variant: "default",
      });
    }
  }, [toast]);

  const handleTranscript = useCallback((transcript: string) => {
    setContent(prev => prev + (prev ? ' ' : '') + transcript);
    textareaRef.current?.focus();
  }, []);

  const removeAttachment = useCallback((id: string) => {
    setAttachments(prev => {
      const attachment = prev.find(a => a.id === id);
      if (attachment?.url.startsWith('blob:')) {
        URL.revokeObjectURL(attachment.url);
      }
      return prev.filter(a => a.id !== id);
    });
  }, []);

  // Drag and drop handlers
  const handleDragEnter = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(true);
  }, []);

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.currentTarget === e.target) {
      setIsDragging(false);
    }
  }, []);

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
  }, []);

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);

    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      handleFiles(e.dataTransfer.files);
    }
  }, [handleFiles]);

  // Cleanup blob URLs on unmount
  useEffect(() => {
    return () => {
      attachments.forEach(a => {
        if (a.url.startsWith('blob:')) {
          URL.revokeObjectURL(a.url);
        }
      });
    };
  }, [attachments]);

  return (
    <div className={cn("w-full px-4 py-4", className)}>
      <div
        className={cn(
          "w-full rounded-2xl border bg-background",
          "flex flex-col gap-2 px-4 py-3 transition-all relative",
          isDragging && "border-primary ring-2 ring-primary/20"
        )}
        onDragEnter={handleDragEnter}
        onDragLeave={handleDragLeave}
        onDragOver={handleDragOver}
        onDrop={handleDrop}
      >
        {/* File attachments preview */}
        {attachments.length > 0 && (
          <div className="flex flex-wrap gap-2 pb-2">
            {attachments.map((attachment, index) => (
              <div
                key={`attachment-${attachment.id}-${index}`}
                className="relative group flex items-center gap-2 px-3 py-1.5 bg-muted rounded-lg text-xs"
              >
                {attachment.mime.startsWith('image/') ? (
                  <img
                    src={attachment.url}
                    alt={attachment.name}
                    className="w-8 h-8 object-cover rounded"
                  />
                ) : (
                  <div className="w-8 h-8 bg-muted-foreground/10 rounded flex items-center justify-center">
                    📄
                  </div>
                )}
                <span className="max-w-[120px] truncate">{attachment.name}</span>
                {attachment.uploading && (
                  <div className="w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin" />
                )}
                <button
                  onClick={() => removeAttachment(attachment.id)}
                  className="absolute -top-1 -right-1 w-5 h-5 bg-destructive text-destructive-foreground rounded-full opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center text-xs"
                >
                  ×
                </button>
              </div>
            ))}
          </div>
        )}

        {/* Textarea */}
        <TextareaAutosize
          ref={textareaRef}
          value={content}
          onChange={(e) => setContent(e.target.value)}
          onKeyDown={handleKeyDown}
          placeholder="Message HandyWriterz..."
          className={cn(
            "w-full bg-transparent outline-none resize-none text-sm",
            "leading-6 scrollbar-thin placeholder:text-muted-foreground",
            "max-h-[300px] overflow-y-auto break-words overflow-wrap-anywhere"
          )}
          minRows={1}
          maxRows={10}
          disabled={disabled}
        />

        {/* Action row */}
        <div className="flex items-center justify-between text-muted-foreground">
          <div className="flex items-center gap-2">
            <AttachButton onFiles={handleFiles} disabled={disabled} />
            <WriteupSelect value={writeupType} onValueChange={setWriteupType} disabled={disabled} />
          </div>
          <div className="flex items-center gap-2">
            <MicButton onTranscript={handleTranscript} disabled={disabled} />
            <SendButton onClick={handleSend} disabled={!canSend} />
          </div>
        </div>

        {/* Hidden file input */}
        <input
          ref={fileInputRef}
          type="file"
          multiple
          className="hidden"
          onChange={(e) => e.target.files && handleFiles(e.target.files)}
        />
      </div>
    </div>
  );
}



================================================
FILE: frontend/src/components/Composer/MicButton.tsx
================================================
'use client';

import React, { useState, useRef, useCallback, useEffect } from 'react';
import { Mic, MicOff } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';

interface MicButtonProps {
  onTranscript: (transcript: string) => void;
  disabled?: boolean;
}

export function MicButton({ onTranscript, disabled }: MicButtonProps) {
  const [isRecording, setIsRecording] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const [isSupported, setIsSupported] = useState(true);

  const recognitionRef = useRef<any>(null);
  const timerRef = useRef<NodeJS.Timeout | null>(null);
  const startTimeRef = useRef<number>(0);

  useEffect(() => {
    // Check if Web Speech API is supported
    if (typeof window !== 'undefined') {
      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
      if (!SpeechRecognition) {
        setIsSupported(false);
        return;
      }

      // Initialize speech recognition
      const recognition = new SpeechRecognition();
      recognition.continuous = true;
      recognition.interimResults = true;
      recognition.lang = 'en-US';

      recognition.onresult = (event: any) => {
        let finalTranscript = '';
        let interimTranscript = '';

        for (let i = event.resultIndex; i < event.results.length; i++) {
          const transcript = event.results[i][0].transcript;
          if (event.results[i].isFinal) {
            finalTranscript += transcript + ' ';
          } else {
            interimTranscript += transcript;
          }
        }

        if (finalTranscript) {
          onTranscript(finalTranscript.trim());
        }
      };

      recognition.onerror = (event: any) => {
        console.error('Speech recognition error:', event.error);
        stopRecording();
      };

      recognition.onend = () => {
        if (isRecording) {
          // Restart if still recording (happens on silence)
          try {
            recognition.start();
          } catch (e) {
            stopRecording();
          }
        }
      };

      recognitionRef.current = recognition;
    }

    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, [isRecording, onTranscript]);

  const startRecording = useCallback(() => {
    if (!recognitionRef.current || disabled) return;

    try {
      recognitionRef.current.start();
      setIsRecording(true);
      startTimeRef.current = Date.now();

      // Update timer every 100ms
      timerRef.current = setInterval(() => {
        const elapsed = Math.floor((Date.now() - startTimeRef.current) / 1000);
        setRecordingTime(elapsed);
      }, 100);
    } catch (error) {
      console.error('Failed to start recording:', error);
    }
  }, [disabled]);

  const stopRecording = useCallback(() => {
    if (!recognitionRef.current) return;

    try {
      recognitionRef.current.stop();
      setIsRecording(false);
      setRecordingTime(0);

      if (timerRef.current) {
        clearInterval(timerRef.current);
        timerRef.current = null;
      }
    } catch (error) {
      console.error('Failed to stop recording:', error);
    }
  }, []);

  const toggleRecording = useCallback(() => {
    if (isRecording) {
      stopRecording();
    } else {
      startRecording();
    }
  }, [isRecording, startRecording, stopRecording]);

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  if (!isSupported) {
    return null;
  }

  return (
    <div className="relative flex items-center">
      {isRecording && (
        <span className="absolute -left-12 text-xs text-muted-foreground font-mono">
          {formatTime(recordingTime)}
        </span>
      )}
      <Button
        variant="ghost"
        size="icon"
        onClick={toggleRecording}
        disabled={disabled}
        className={cn(
          "h-10 w-10 rounded-lg transition-all",
          "hover:bg-accent hover:text-accent-foreground",
          "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring",
          isRecording && "text-destructive animate-pulse"
        )}
      >
        {isRecording ? (
          <MicOff className="h-5 w-5" />
        ) : (
          <Mic className="h-5 w-5" />
        )}
        <span className="sr-only">
          {isRecording ? 'Stop recording' : 'Start recording'}
        </span>
      </Button>
    </div>
  );
}



================================================
FILE: frontend/src/components/Composer/SendButton.tsx
================================================
'use client';

import React from 'react';
import { ArrowUp } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';

interface SendButtonProps {
  onClick: () => void;
  disabled?: boolean;
}

export function SendButton({ onClick, disabled }: SendButtonProps) {
  return (
    <Button
      onClick={onClick}
      disabled={disabled}
      size="icon"
      className={cn(
        "h-10 w-10 rounded-full transition-all",
        "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring",
        disabled
          ? "bg-muted text-muted-foreground cursor-not-allowed"
          : "bg-primary text-primary-foreground hover:bg-primary/90 shadow-sm hover:shadow-md"
      )}
    >
      <ArrowUp className="h-5 w-5" />
      <span className="sr-only">Send message</span>
    </Button>
  );
}



================================================
FILE: frontend/src/components/Composer/WriteupSelect.tsx
================================================
'use client';

import React, { useEffect, useState } from 'react';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { cn } from '@/lib/utils';

interface WriteupType {
  value: string;
  label: string;
}

interface WriteupSelectProps {
  value: string;
  onValueChange: (value: string) => void;
  disabled?: boolean;
}

// Default writeup types - will be replaced by API call
const DEFAULT_WRITEUP_TYPES: WriteupType[] = [
  { value: 'general', label: 'General' },
  { value: 'essay', label: 'Essay' },
  { value: 'report', label: 'Report' },
  { value: 'dissertation', label: 'PhD Dissertation' },
  { value: 'case_study', label: 'Case Study' },
  { value: 'market_research', label: 'Market Research' },
  { value: 'technical_report', label: 'Technical Report' },
  { value: 'presentation', label: 'Presentation' },
  { value: 'coding', label: 'Coding' },
];

export function WriteupSelect({ value, onValueChange, disabled }: WriteupSelectProps) {
  const [writeupTypes, setWriteupTypes] = useState<WriteupType[]>(DEFAULT_WRITEUP_TYPES);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    // Fetch writeup types from API
    const fetchWriteupTypes = async () => {
      setIsLoading(true);
      try {
        const response = await fetch('/api/writing-types');
        if (response.ok) {
          const data: WriteupType[] = await response.json();
          if (Array.isArray(data) && data.length > 0) {
            setWriteupTypes(data);
          }
        }
      } catch (error) {
        console.error('Failed to fetch writeup types:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchWriteupTypes();
  }, []);

  return (
    <Select value={value} onValueChange={onValueChange} disabled={disabled || isLoading}>
      <SelectTrigger
        className={cn(
          "h-10 px-3 text-sm font-medium",
          "bg-transparent hover:bg-secondary/20",
          "border-0 focus:ring-0 focus:ring-offset-0",
          "min-w-[140px] text-muted-foreground"
        )}
      >
        <SelectValue placeholder="Select type" />
      </SelectTrigger>
      <SelectContent 
        position="popper" 
        side="top" 
        align="start"
        className="z-50 max-h-96 overflow-y-auto bg-background border-border"
        avoidCollisions={true}
        collisionPadding={8}
      >
        {writeupTypes.map((type) => (
          <SelectItem 
            key={type.value} 
            value={type.value} 
            className="text-sm text-foreground hover:bg-secondary/80 focus:bg-secondary/80"
          >
            {type.label}
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
}



================================================
FILE: frontend/src/components/nav/Sidebar.tsx
================================================
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { cn } from "@/lib/utils";

const routes = [
  { href: "/app/dashboard", label: "Dashboard" },
  { href: "/app/settings/general", label: "General" },
  { href: "/app/settings/billing", label: "Billing" },
  { href: "/app/settings/usage", label: "Usage" },
  { href: "/app/settings/security", label: "Security" },
  { href: "/app/profile", label: "Profile" },
];

export default function Sidebar() {
  const pathname = usePathname();

  if (pathname === "/app/chat") {
    return null;
  }

  return (
    <div className="hidden border-r bg-muted/40 md:block">
      <div className="flex h-full max-h-screen flex-col gap-2">
        <div className="flex h-14 items-center border-b px-4 lg:h-[60px] lg:px-6">
          <Link href="/" className="flex items-center gap-2 font-semibold">
            <span>HandyWriterz</span>
          </Link>
        </div>
        <div className="flex-1">
          <nav className="grid items-start px-2 text-sm font-medium lg:px-4">
            {routes.map((route) => (
              <Link
                key={route.href}
                href={route.href}
                className={cn(
                  "flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary",
                  { "bg-muted text-primary": pathname === route.href }
                )}
              >
                {route.label}
              </Link>
            ))}
          </nav>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: frontend/src/components/nav/UserPopover.tsx
================================================
import React from 'react';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { useQuery } from '@tanstack/react-query';
import { Skeleton } from '@/components/ui/skeleton';

// Mock API call
const fetchCredits = async (): Promise<{ credits: number; wallet: string }> => {
  await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate network delay
  return { credits: 1234, wallet: '0xABcdeFG1234567890hIjKLMnOPQRstUVwXYZ1234' };
};

const truncateWallet = (wallet: string) => {
    if (wallet.length < 10) return wallet;
    return `${wallet.substring(0, 4)}...${wallet.substring(wallet.length - 4)}`;
}

export const UserPopover: React.FC = () => {
  const { data, isLoading } = useQuery({
    queryKey: ['userCredits'],
    queryFn: fetchCredits,
  });

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="ghost" className="relative h-8 w-8 rounded-full">
          <Avatar className="h-8 w-8">
            <AvatarImage src="/avatars/01.png" alt="@shadcn" />
            <AvatarFallback>SC</AvatarFallback>
          </Avatar>
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80">
        <div className="grid gap-4">
          <div className="space-y-2">
            <h4 className="font-medium leading-none">Wallet</h4>
            {isLoading ? (
              <Skeleton className="h-4 w-[250px]" />
            ) : (
              <p className="text-sm text-muted-foreground">
                {truncateWallet(data?.wallet ?? '')}
              </p>
            )}
          </div>
          <div className="grid gap-2">
            <div className="grid grid-cols-3 items-center gap-4">
              <span>Credits</span>
              {isLoading ? (
                <Skeleton className="h-4 w-[100px]" />
              ) : (
                <span className="font-semibold">{data?.credits}</span>
              )}
            </div>
            <Button>Add Credits</Button>
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
};


================================================
FILE: frontend/src/components/ui/AgentActivityDisplay.tsx
================================================
import React from 'react';

export interface AgentActivity {
  agentName: string;
  status: 'running' | 'completed' | 'failed';
  timestamp: string;
}

interface AgentActivityDisplayProps {
  activities: AgentActivity[];
}

const AgentActivityDisplay: React.FC<AgentActivityDisplayProps> = ({ activities }) => {
  return (
    <div className="p-4 border rounded-lg">
      <h3 className="text-lg font-semibold mb-2">Agent Activity</h3>
      <ul className="space-y-2">
        {activities.map((activity, index) => (
          <li key={index} className="flex items-center justify-between">
            <span>{activity.agentName}</span>
            <span className={`px-2 py-1 text-xs rounded-full ${
              activity.status === 'completed' ? 'bg-green-500 text-white' :
              activity.status === 'running' ? 'bg-blue-500 text-white' :
              'bg-red-500 text-white'
            }`}>
              {activity.status}
            </span>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default AgentActivityDisplay;


================================================
FILE: frontend/src/components/ui/avatar.tsx
================================================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }



================================================
FILE: frontend/src/components/ui/badge.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }



================================================
FILE: frontend/src/components/ui/button.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }



================================================
FILE: frontend/src/components/ui/card.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};



================================================
FILE: frontend/src/components/ui/context-menu.tsx
================================================
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function ContextMenu({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {
  return <ContextMenuPrimitive.Root data-slot="context-menu" {...props} />
}

function ContextMenuTrigger({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {
  return (
    <ContextMenuPrimitive.Trigger data-slot="context-menu-trigger" {...props} />
  )
}

function ContextMenuGroup({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {
  return (
    <ContextMenuPrimitive.Group data-slot="context-menu-group" {...props} />
  )
}

function ContextMenuPortal({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {
  return (
    <ContextMenuPrimitive.Portal data-slot="context-menu-portal" {...props} />
  )
}

function ContextMenuSub({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {
  return <ContextMenuPrimitive.Sub data-slot="context-menu-sub" {...props} />
}

function ContextMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {
  return (
    <ContextMenuPrimitive.RadioGroup
      data-slot="context-menu-radio-group"
      {...props}
    />
  )
}

function ContextMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <ContextMenuPrimitive.SubTrigger
      data-slot="context-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto" />
    </ContextMenuPrimitive.SubTrigger>
  )
}

function ContextMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {
  return (
    <ContextMenuPrimitive.SubContent
      data-slot="context-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

function ContextMenuContent({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {
  return (
    <ContextMenuPrimitive.Portal>
      <ContextMenuPrimitive.Content
        data-slot="context-menu-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </ContextMenuPrimitive.Portal>
  )
}

function ContextMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <ContextMenuPrimitive.Item
      data-slot="context-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function ContextMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {
  return (
    <ContextMenuPrimitive.CheckboxItem
      data-slot="context-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.CheckboxItem>
  )
}

function ContextMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {
  return (
    <ContextMenuPrimitive.RadioItem
      data-slot="context-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.RadioItem>
  )
}

function ContextMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <ContextMenuPrimitive.Label
      data-slot="context-menu-label"
      data-inset={inset}
      className={cn(
        "text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function ContextMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {
  return (
    <ContextMenuPrimitive.Separator
      data-slot="context-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function ContextMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="context-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}



================================================
FILE: frontend/src/components/ui/ContextUploader.tsx
================================================
import React, { useCallback, useEffect } from 'react';
import { useDropzone } from 'react-dropzone';
import { FileTile } from '@/components/ui/FileTile';
import { UploadCloud, AlertCircle } from 'lucide-react';
import { useFileUpload } from '@/hooks/useFileUpload';

interface ContextUploaderProps {
  onFileIdsChange: (fileIds: string[]) => void;
  maxFiles?: number;
  maxFileSize?: number;
}

export const ContextUploader: React.FC<ContextUploaderProps> = ({ 
  onFileIdsChange, 
  maxFiles = 50, 
  maxFileSize = 100 * 1024 * 1024 // 100MB
}) => {
  const { 
    files, 
    totalProgress, 
    uploadFiles, 
    removeFile, 
    clearFiles, 
    getFileIds, 
    isUploading 
  } = useFileUpload();

  // Notify parent when file IDs change
  useEffect(() => {
    onFileIdsChange(getFileIds());
  }, [files, getFileIds, onFileIdsChange]);

  const onDrop = useCallback(async (acceptedFiles: File[], rejectedFiles: any[]) => {
    // Handle rejected files
    if (rejectedFiles.length > 0) {
      console.warn('Some files were rejected:', rejectedFiles);
    }

    // Check total file count
    if (files.length + acceptedFiles.length > maxFiles) {
      alert(`Maximum ${maxFiles} files allowed`);
      return;
    }

    try {
      await uploadFiles(acceptedFiles);
    } catch (error) {
      console.error('Upload failed:', error);
    }
  }, [uploadFiles, files.length, maxFiles]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({ 
    onDrop,
    maxFiles,
    maxSize: maxFileSize,
    accept: {
      'image/*': ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'],
      'application/pdf': ['.pdf'],
      'application/msword': ['.doc'],
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],
      'text/plain': ['.txt'],
      'text/csv': ['.csv'],
      'application/vnd.ms-excel': ['.xls'],
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx'],
      'audio/*': ['.mp3', '.wav', '.m4a', '.flac'],
      'video/*': ['.mp4', '.avi', '.mov', '.wmv']
    }
  });

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const getFileIcon = (type: string) => {
    if (type.startsWith('image/')) return '🖼️';
    if (type.startsWith('audio/')) return '🎵';
    if (type.startsWith('video/')) return '🎬';
    if (type.includes('pdf')) return '📄';
    if (type.includes('word')) return '📝';
    if (type.includes('excel') || type.includes('csv')) return '📊';
    return '📄';
  };

  return (
    <div className="flex flex-col gap-4 p-4 border rounded-lg bg-gray-800 border-gray-700">
      <div
        {...getRootProps()}
        className={`flex flex-col items-center justify-center p-6 border-2 border-dashed rounded-lg cursor-pointer transition-colors
          ${isDragActive ? 'border-blue-500 bg-gray-700' : 'border-gray-600 hover:bg-gray-700'}`}
      >
        <input {...getInputProps()} />
        <UploadCloud className="w-10 h-10 mb-2 text-gray-400" />
        <p className="text-sm text-gray-400 text-center">
          {isDragActive ? 'Drop the files here ...' : `Drag 'n' drop up to ${maxFiles} files here, or click to select`}
        </p>
        <p className="text-xs text-gray-500 mt-1">
          Max {formatFileSize(maxFileSize)} per file • PDF, DOCX, Images, Audio, Video supported
        </p>
      </div>

      {/* Upload Progress */}
      {isUploading && (
        <div className="flex items-center gap-2 p-2 bg-gray-700 rounded">
          <div className="w-full bg-gray-600 rounded-full h-2">
            <div 
              className="bg-blue-500 h-2 rounded-full transition-all duration-300" 
              style={{ width: `${totalProgress}%` }}
            />
          </div>
          <span className="text-xs text-gray-300">{Math.round(totalProgress)}%</span>
        </div>
      )}

      {/* File List */}
      {files.length > 0 && (
        <div className="flex flex-col gap-2 max-h-64 overflow-y-auto">
          {files.map(file => (
            <div key={file.id} className="flex items-center gap-3 p-3 bg-gray-700 rounded-lg">
              <div className="flex-shrink-0">
                {file.thumbnail ? (
                  <img src={file.thumbnail} alt="" className="w-8 h-8 object-cover rounded" />
                ) : (
                  <span className="text-lg">{getFileIcon(file.type)}</span>
                )}
              </div>
              
              <div className="flex-grow min-w-0">
                <div className="flex items-center gap-2">
                  <span className="text-sm font-medium text-white truncate">{file.name}</span>
                  <span className="text-xs text-gray-400">{formatFileSize(file.size)}</span>
                </div>
                
                {file.status === 'uploading' && (
                  <div className="w-full bg-gray-600 rounded-full h-1 mt-1">
                    <div 
                      className="bg-blue-500 h-1 rounded-full transition-all duration-300" 
                      style={{ width: `${file.progress}%` }}
                    />
                  </div>
                )}
                
                {file.status === 'error' && (
                  <div className="flex items-center gap-1 mt-1">
                    <AlertCircle className="w-3 h-3 text-red-400" />
                    <span className="text-xs text-red-400">{file.error}</span>
                  </div>
                )}
              </div>
              
              <div className="flex items-center gap-2">
                {file.status === 'completed' && (
                  <span className="text-xs text-green-400">✓</span>
                )}
                <button
                  onClick={() => removeFile(file.id)}
                  className="text-gray-400 hover:text-red-400 text-sm"
                >
                  ×
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};



================================================
FILE: frontend/src/components/ui/dialog.tsx
================================================
'use client'

import * as React from 'react'
import * as DialogPrimitive from '@radix-ui/react-dialog'
import { X } from 'lucide-react'

import { cn } from '@/lib/utils'

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      'fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    >
      {children}
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-1.5 text-center sm:text-left',
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = 'DialogHeader'

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = 'DialogFooter'

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      'text-lg font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


================================================
FILE: frontend/src/components/ui/dropdown-menu.tsx
================================================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}



================================================
FILE: frontend/src/components/ui/FileTile.tsx
================================================
import React from 'react';
import { File, X } from 'lucide-react';

interface FileTileProps {
  fileName: string;
  progress: number;
  onRemove: () => void;
}

export const FileTile: React.FC<FileTileProps> = ({ fileName, progress, onRemove }) => {
  return (
    <div className="relative flex items-center p-2 border rounded-lg bg-slate-700">
      <File className="w-6 h-6 mr-2 text-slate-400" />
      <div className="flex-grow">
        <div className="text-sm font-medium text-slate-200">{fileName}</div>
        <div className="w-full bg-slate-600 rounded-full h-1.5 mt-1">
          <div
            className="bg-blue-500 h-1.5 rounded-full"
            style={{ width: `${progress}%` }}
          ></div>
        </div>
      </div>
      <button onClick={onRemove} className="ml-2 text-slate-400 hover:text-slate-200">
        <X className="w-4 h-4" />
      </button>
    </div>
  );
};



================================================
FILE: frontend/src/components/ui/FileUploadZone.tsx
================================================
import React, { useCallback } from 'react';
import { useDropzone } from 'react-dropzone';

interface FileUploadZoneProps {
  onFilesSelected: (files: File[]) => void;
}

const FileUploadZone: React.FC<FileUploadZoneProps> = ({ onFilesSelected }) => {
  const onDrop = useCallback((acceptedFiles: File[]) => {
    onFilesSelected(acceptedFiles);
  }, [onFilesSelected]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });

  return (
    <div
      {...getRootProps()}
      className={`p-8 border-2 border-dashed rounded-lg text-center cursor-pointer ${
        isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300'
      }`}
    >
      <input {...getInputProps()} />
      {isDragActive ? (
        <p>Drop the files here ...</p>
      ) : (
        <p>Drag 'n' drop some files here, or click to select files</p>
      )}
    </div>
  );
};

export default FileUploadZone;


================================================
FILE: frontend/src/components/ui/input.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }



================================================
FILE: frontend/src/components/ui/label.tsx
================================================
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };



================================================
FILE: frontend/src/components/ui/popover.tsx
================================================
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }



================================================
FILE: frontend/src/components/ui/progress.tsx
================================================
"use client";

import * as React from "react";
import * as ProgressPrimitive from "@radix-ui/react-progress";

import { cn } from "@/lib/utils";

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
));
Progress.displayName = ProgressPrimitive.Root.displayName;

export { Progress };



================================================
FILE: frontend/src/components/ui/radio-group.tsx
================================================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }



================================================
FILE: frontend/src/components/ui/scroll-area.tsx
================================================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
        style={{ overscrollBehavior: 'none' }}
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-1.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-1.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-neutral-600/30 relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }



================================================
FILE: frontend/src/components/ui/select.tsx
================================================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}



================================================
FILE: frontend/src/components/ui/separator.tsx
================================================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


================================================
FILE: frontend/src/components/ui/skeleton.tsx
================================================
import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }



================================================
FILE: frontend/src/components/ui/switch.tsx
================================================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }



================================================
FILE: frontend/src/components/ui/table.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
));
Table.displayName = "Table";

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
));
TableHeader.displayName = "TableHeader";

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
));
TableBody.displayName = "TableBody";

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
));
TableFooter.displayName = "TableFooter";

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
));
TableRow.displayName = "TableRow";

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
));
TableHead.displayName = "TableHead";

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
));
TableCell.displayName = "TableCell";

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
));
TableCaption.displayName = "TableCaption";

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};



================================================
FILE: frontend/src/components/ui/tabs.tsx
================================================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }



================================================
FILE: frontend/src/components/ui/textarea.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }



================================================
FILE: frontend/src/components/ui/toast.tsx
================================================
import * as React from 'react';
import * as ToastPrimitives from '@radix-ui/react-toast';
import { cva, type VariantProps } from 'class-variance-authority';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const toastVariants = cva(
  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',
  {
    variants: {
      variant: {
        default: 'border bg-background text-foreground',
        destructive:
          'destructive group border-destructive bg-destructive text-destructive-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  );
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',
      className
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn('text-sm font-semibold', className)}
    {...props}
  />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn('text-sm opacity-90', className)}
    {...props}
  />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',
      className
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};



================================================
FILE: frontend/src/components/ui/toaster.tsx
================================================
'use client'

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from '@/components/ui/toast'
import { useToast } from '@/components/ui/use-toast'

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


================================================
FILE: frontend/src/components/ui/tooltip.tsx
================================================
import React from 'react'

interface TooltipProps {
  content: string
  children: React.ReactNode
  side?: 'top' | 'right' | 'bottom' | 'left'
}

export function Tooltip({ content, children, side = 'right' }: TooltipProps) {
  const sideClasses = {
    top: 'bottom-full mb-2 left-1/2 transform -translate-x-1/2',
    right: 'left-full ml-2 top-1/2 transform -translate-y-1/2',
    bottom: 'top-full mt-2 left-1/2 transform -translate-x-1/2',
    left: 'right-full mr-2 top-1/2 transform -translate-y-1/2'
  }

  return (
    <div className="relative group">
      {children}
      <span
        className={`absolute z-50 px-2 py-1 bg-gray-800 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap ${sideClasses[side]}`}
      >
        {content}
      </span>
    </div>
  )
}


================================================
FILE: frontend/src/components/ui/use-toast.ts
================================================
// Inspired by react-hot-toast library
import * as React from 'react';

import type { ToastActionElement, ToastProps } from '@/components/ui/toast';

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterT = {
  toasts: ToasterToast[];
  toast: (toast: Omit<ToasterToast, 'id'>) => {
    id: string;
    dismiss: () => void;
    update: (props: ToasterToast) => void;
  };
  dismiss: (toastId?: string) => void;
};

const actionTypes = {
  ADD_TOAST: 'ADD_TOAST',
  UPDATE_TOAST: 'UPDATE_TOAST',
  DISMISS_TOAST: 'DISMISS_TOAST',
  REMOVE_TOAST: 'REMOVE_TOAST',
} as const;

let count = 0;

function genId() {
  count = (count + 1) % 100;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType['ADD_TOAST'];
      toast: ToasterToast;
    }
  | {
      type: ActionType['UPDATE_TOAST'];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType['DISMISS_TOAST'];
      toastId?: ToasterToast['id'];
    }
  | {
      type: ActionType['REMOVE_TOAST'];
      toastId?: ToasterToast['id'];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: 'REMOVE_TOAST',
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'ADD_TOAST':
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case 'UPDATE_TOAST':
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      };

    case 'DISMISS_TOAST': {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      };
    }
    case 'REMOVE_TOAST':
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, 'id'>;

function toast(props: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: 'UPDATE_TOAST',
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });

  dispatch({
    type: 'ADD_TOAST',
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) =>
      dispatch({ type: 'DISMISS_TOAST', toastId }),
  };
}

export { useToast, toast };



================================================
FILE: frontend/src/components/upload/RevolutionaryFileUploader.tsx
================================================
/**
 * Revolutionary File Uploader for YC Demo Day
 * Handles 10 multimodal files: PDF, DOCX, MP3, WAV, MP4, YouTube, XLSX, TXT
 * Real-time processing visualization with Gemini 2.5 Pro integration
 */

'use client';

import React, { useState, useCallback, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Upload, 
  FileText, 
  Music, 
  Video, 
  Table, 
  Link, 
  CheckCircle, 
  AlertCircle, 
  Clock, 
  Eye, 
  Trash2,
  Sparkles,
  Brain,
  Zap,
  FileAudio,
  FileVideo,
  FileSpreadsheet,
  Youtube,
  Mic,
  Image,
  X,
  Play,
  Download
} from 'lucide-react';
import { useDropzone } from 'react-dropzone';
import { multimodalProcessor } from '@/services/multimodal-processor';
import { ProcessedContent, ProcessingProgress, MultimediaInsight } from '@/types/multimodal';

interface FileUploadItem {
  id: string;
  file: File | null;
  url?: string; // For YouTube links
  name: string;
  type: 'pdf' | 'docx' | 'mp3' | 'wav' | 'mp4' | 'youtube' | 'xlsx' | 'txt';
  size: number;
  status: 'pending' | 'uploading' | 'processing' | 'completed' | 'error';
  uploadProgress: number;
  processingProgress: number;
  insights: MultimediaInsight[];
  previewContent?: string;
  processingTime: number;
  quality: number;
  tokensGenerated: number;
  thumbnail?: string;
}

interface RevolutionaryFileUploaderProps {
  onFilesProcessed: (processedFiles: ProcessedContent[]) => void;
  onProcessingUpdate: (progress: ProcessingProgress[]) => void;
  maxFiles?: number;
  maxFileSize?: number; // in MB
  traceId: string;
}

export const RevolutionaryFileUploader: React.FC<RevolutionaryFileUploaderProps> = ({
  onFilesProcessed,
  onProcessingUpdate,
  maxFiles = 10,
  maxFileSize = 500,
  traceId
}) => {
  const [uploadedFiles, setUploadedFiles] = useState<FileUploadItem[]>([]);
  const [youtubeUrl, setYoutubeUrl] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [overallProgress, setOverallProgress] = useState(0);
  const [totalInsights, setTotalInsights] = useState(0);
  const [processingStats, setProcessingStats] = useState({
    totalFiles: 0,
    completedFiles: 0,
    totalProcessingTime: 0,
    averageQuality: 0,
    totalTokens: 0
  });
  
  const fileInputRef = useRef<HTMLInputElement>(null);

  const supportedFileTypes = {
    'application/pdf': 'pdf',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'docx',
    'audio/mpeg': 'mp3',
    'audio/wav': 'wav',
    'video/mp4': 'mp4',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'xlsx',
    'text/plain': 'txt',
  } as const;

  const onDrop = useCallback((acceptedFiles: File[]) => {
    const newFiles = acceptedFiles.slice(0, maxFiles - uploadedFiles.length).map(file => {
      const fileType = supportedFileTypes[file.type as keyof typeof supportedFileTypes] || 'txt';
      return {
        id: `file_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        file,
        name: file.name,
        type: fileType,
        size: file.size,
        status: 'pending' as const,
        uploadProgress: 0,
        processingProgress: 0,
        insights: [],
        processingTime: 0,
        quality: 0,
        tokensGenerated: 0
      };
    });

    setUploadedFiles(prev => [...prev, ...newFiles]);
    
    // Start upload immediately
    newFiles.forEach(fileItem => {
      uploadFile(fileItem);
    });
  }, [uploadedFiles.length, maxFiles]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: Object.keys(supportedFileTypes).reduce((acc, key) => {
      acc[key] = [];
      return acc;
    }, {} as any),
    maxFiles: maxFiles - uploadedFiles.length,
    maxSize: maxFileSize * 1024 * 1024,
    disabled: uploadedFiles.length >= maxFiles
  });

  const uploadFile = async (fileItem: FileUploadItem) => {
    try {
      setUploadedFiles(prev => prev.map(item => 
        item.id === fileItem.id 
          ? { ...item, status: 'uploading' }
          : item
      ));

      // Simulate upload progress
      for (let progress = 0; progress <= 100; progress += 10) {
        await new Promise(resolve => setTimeout(resolve, 100));
        setUploadedFiles(prev => prev.map(item => 
          item.id === fileItem.id 
            ? { ...item, uploadProgress: progress }
            : item
        ));
      }

      setUploadedFiles(prev => prev.map(item => 
        item.id === fileItem.id 
          ? { ...item, status: 'completed', uploadProgress: 100 }
          : item
      ));

    } catch (error) {
      console.error('Upload failed:', error);
      setUploadedFiles(prev => prev.map(item => 
        item.id === fileItem.id 
          ? { ...item, status: 'error' }
          : item
      ));
    }
  };

  const addYouTubeUrl = () => {
    if (!youtubeUrl.trim()) return;

    const youtubeFile: FileUploadItem = {
      id: `youtube_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      file: null,
      url: youtubeUrl,
      name: `YouTube: ${youtubeUrl}`,
      type: 'youtube',
      size: 0,
      status: 'completed',
      uploadProgress: 100,
      processingProgress: 0,
      insights: [],
      processingTime: 0,
      quality: 0,
      tokensGenerated: 0
    };

    setUploadedFiles(prev => [...prev, youtubeFile]);
    setYoutubeUrl('');
  };

  const removeFile = (fileId: string) => {
    setUploadedFiles(prev => prev.filter(item => item.id !== fileId));
  };

  const startProcessing = async () => {
    if (uploadedFiles.length === 0) return;

    setIsProcessing(true);
    setOverallProgress(0);

    try {
      // Initialize real-time connection
      multimodalProcessor.initializeRealtimeConnection(traceId, (event) => {
        // Update individual file progress
        setUploadedFiles(prev => prev.map(item => 
          item.id === event.fileId 
            ? { 
                ...item, 
                status: event.stage === 'completed' ? 'completed' : 'processing',
                processingProgress: event.progress,
                processingTime: event.processingTime || 0,
                insights: event.insights || item.insights
              }
            : item
        ));

        // Update overall progress
        const completedFiles = uploadedFiles.filter(f => f.status === 'completed').length;
        setOverallProgress((completedFiles / uploadedFiles.length) * 100);
      });

      // Prepare processing requests
      const processingRequests = uploadedFiles.map(file => ({
        fileId: file.id,
        fileType: file.type,
        fileName: file.name,
        url: file.url || '',
        processingOptions: {
          useGeminiVision: ['mp4', 'youtube'].includes(file.type),
          extractCharts: ['pdf', 'docx', 'xlsx'].includes(file.type),
          identifySpeakers: ['mp3', 'wav', 'youtube'].includes(file.type),
          preserveCitations: ['pdf', 'docx'].includes(file.type),
          generateInsights: true
        }
      }));

      // Start multimodal processing
      const processedContent = await multimodalProcessor.processFiles(
        processingRequests,
        traceId,
        (progress) => {
          onProcessingUpdate(progress);
          updateProcessingStats(progress);
        }
      );

      onFilesProcessed(processedContent);
      setIsProcessing(false);

    } catch (error) {
      console.error('Processing failed:', error);
      setIsProcessing(false);
    }
  };

  const updateProcessingStats = (progress: ProcessingProgress[]) => {
    const totalFiles = progress.length;
    const completedFiles = progress.filter(p => p.stage === 'completed').length;
    const totalProcessingTime = progress.reduce((sum, p) => sum + p.processingTime, 0);
    const totalInsightsCount = progress.reduce((sum, p) => sum + p.insights.length, 0);

    setProcessingStats({
      totalFiles,
      completedFiles,
      totalProcessingTime,
      averageQuality: 0, // Will be calculated from insights
      totalTokens: 0 // Will be calculated from processed content
    });

    setTotalInsights(totalInsightsCount);
  };

  const getFileIcon = (type: FileUploadItem['type']) => {
    switch (type) {
      case 'pdf':
      case 'docx':
        return <FileText className="w-6 h-6 text-red-500" />;
      case 'mp3':
      case 'wav':
        return <FileAudio className="w-6 h-6 text-green-500" />;
      case 'mp4':
        return <FileVideo className="w-6 h-6 text-blue-500" />;
      case 'youtube':
        return <Youtube className="w-6 h-6 text-red-600" />;
      case 'xlsx':
        return <FileSpreadsheet className="w-6 h-6 text-green-600" />;
      case 'txt':
        return <FileText className="w-6 h-6 text-gray-500" />;
    }
  };

  const getStatusColor = (status: FileUploadItem['status']) => {
    switch (status) {
      case 'pending': return 'text-gray-500';
      case 'uploading': return 'text-blue-500';
      case 'processing': return 'text-purple-500';
      case 'completed': return 'text-green-500';
      case 'error': return 'text-red-500';
    }
  };

  const getStatusIcon = (status: FileUploadItem['status']) => {
    switch (status) {
      case 'pending': return <Clock className="w-4 h-4" />;
      case 'uploading': return <Upload className="w-4 h-4" />;
      case 'processing': return <Brain className="w-4 h-4" />;
      case 'completed': return <CheckCircle className="w-4 h-4" />;
      case 'error': return <AlertCircle className="w-4 h-4" />;
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const canStartProcessing = uploadedFiles.length > 0 && 
    uploadedFiles.every(file => file.status === 'completed' || file.status === 'error') &&
    !isProcessing;

  return (
    <div className="w-full max-w-6xl mx-auto space-y-6">
      {/* Header */}
      <div className="text-center space-y-2">
        <h2 className="text-2xl font-bold flex items-center justify-center space-x-2">
          <Sparkles className="w-8 h-8 text-purple-500" />
          <span>Revolutionary Multimodal File Processor</span>
        </h2>
        <p className="text-gray-600">
          Upload up to {maxFiles} files (PDF, DOCX, MP3, WAV, MP4, XLSX, TXT) + YouTube links
        </p>
        <div className="flex justify-center space-x-4 text-sm">
          <Badge variant="outline">Gemini 2.5 Pro Processing</Badge>
          <Badge variant="outline">1M Token Context</Badge>
          <Badge variant="outline">Real-time Analysis</Badge>
        </div>
      </div>

      {/* Upload Interface */}
      <Tabs defaultValue="files" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="files">File Upload</TabsTrigger>
          <TabsTrigger value="youtube">YouTube Links</TabsTrigger>
          <TabsTrigger value="processing">Processing Status</TabsTrigger>
        </TabsList>

        <TabsContent value="files" className="space-y-4">
          {/* Drag & Drop Zone */}
          <Card>
            <CardContent className="p-6">
              <div
                {...getRootProps()}
                className={`
                  border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors
                  ${isDragActive 
                    ? 'border-blue-500 bg-blue-50' 
                    : 'border-gray-300 hover:border-blue-400'
                  }
                  ${uploadedFiles.length >= maxFiles ? 'opacity-50 cursor-not-allowed' : ''}
                `}
              >
                <input {...getInputProps()} ref={fileInputRef} />
                <Upload className="w-12 h-12 mx-auto mb-4 text-gray-400" />
                {isDragActive ? (
                  <p className="text-lg text-blue-600">Drop the files here...</p>
                ) : (
                  <div className="space-y-2">
                    <p className="text-lg">Drag & drop files here, or click to select</p>
                    <p className="text-sm text-gray-500">
                      Supports: PDF, DOCX, MP3, WAV, MP4, XLSX, TXT (Max {maxFileSize}MB each)
                    </p>
                    <p className="text-xs text-gray-400">
                      {uploadedFiles.length}/{maxFiles} files uploaded
                    </p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="youtube" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Youtube className="w-6 h-6 text-red-600" />
                <span>YouTube Video Processing</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex space-x-2">
                <Input
                  placeholder="Paste YouTube URL here..."
                  value={youtubeUrl}
                  onChange={(e) => setYoutubeUrl(e.target.value)}
                  className="flex-1"
                />
                <Button 
                  onClick={addYouTubeUrl}
                  disabled={!youtubeUrl.trim() || uploadedFiles.length >= maxFiles}
                >
                  Add Video
                </Button>
              </div>
              <div className="text-sm text-gray-500">
                YouTube videos will be downloaded and processed for audio transcription and visual analysis
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="processing" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Brain className="w-6 h-6 text-purple-500" />
                  <span>Processing Status</span>
                </div>
                <Button 
                  onClick={startProcessing}
                  disabled={!canStartProcessing}
                  className="flex items-center space-x-2"
                >
                  <Zap className="w-4 h-4" />
                  <span>Start Processing</span>
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent>
              {isProcessing && (
                <div className="mb-6 space-y-2">
                  <div className="flex items-center justify-between text-sm">
                    <span>Overall Progress</span>
                    <span>{Math.round(overallProgress)}%</span>
                  </div>
                  <Progress value={overallProgress} className="h-2" />
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>
                      <div className="text-gray-600">Files</div>
                      <div className="font-semibold">
                        {processingStats.completedFiles}/{processingStats.totalFiles}
                      </div>
                    </div>
                    <div>
                      <div className="text-gray-600">Insights</div>
                      <div className="font-semibold">{totalInsights}</div>
                    </div>
                    <div>
                      <div className="text-gray-600">Time</div>
                      <div className="font-semibold">
                        {Math.round(processingStats.totalProcessingTime)}s
                      </div>
                    </div>
                    <div>
                      <div className="text-gray-600">Quality</div>
                      <div className="font-semibold">
                        {processingStats.averageQuality.toFixed(1)}/10.0
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* File List */}
      {uploadedFiles.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span>Uploaded Files ({uploadedFiles.length})</span>
              <Badge variant="outline">
                {uploadedFiles.filter(f => f.status === 'completed').length} ready for processing
              </Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {uploadedFiles.map((file) => (
                <div key={file.id} className="border rounded-lg p-4 space-y-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      {getFileIcon(file.type)}
                      <div>
                        <div className="font-semibold text-sm">{file.name}</div>
                        <div className="text-xs text-gray-500">
                          {file.size > 0 ? formatFileSize(file.size) : 'External URL'} • 
                          <span className={`ml-1 ${getStatusColor(file.status)}`}>
                            {file.status}
                          </span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <div className={getStatusColor(file.status)}>
                        {getStatusIcon(file.status)}
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => removeFile(file.id)}
                        className="text-red-500 hover:text-red-700"
                      >
                        <X className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>

                  {/* Upload Progress */}
                  {file.status === 'uploading' && (
                    <div className="space-y-1">
                      <div className="flex justify-between text-xs">
                        <span>Uploading...</span>
                        <span>{file.uploadProgress}%</span>
                      </div>
                      <Progress value={file.uploadProgress} className="h-1" />
                    </div>
                  )}

                  {/* Processing Progress */}
                  {file.status === 'processing' && (
                    <div className="space-y-1">
                      <div className="flex justify-between text-xs">
                        <span>Processing with AI...</span>
                        <span>{file.processingProgress}%</span>
                      </div>
                      <Progress value={file.processingProgress} className="h-1" />
                    </div>
                  )}

                  {/* Insights Preview */}
                  {file.insights.length > 0 && (
                    <div className="mt-3 p-3 bg-purple-50 rounded-lg">
                      <div className="flex items-center space-x-2 mb-2">
                        <Sparkles className="w-4 h-4 text-purple-500" />
                        <span className="text-sm font-semibold">AI Insights ({file.insights.length})</span>
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-xs">
                        {file.insights.slice(0, 4).map((insight, idx) => (
                          <div key={idx} className="bg-white p-2 rounded border">
                            <div className="font-semibold capitalize mb-1">
                              {insight.type.replace(/_/g, ' ')}
                            </div>
                            <div className="line-clamp-2">{insight.content}</div>
                            <div className="text-gray-500 mt-1">
                              Confidence: {Math.round(insight.confidence * 100)}%
                            </div>
                          </div>
                        ))}
                      </div>
                      {file.insights.length > 4 && (
                        <div className="text-xs text-center mt-2 text-purple-600">
                          +{file.insights.length - 4} more insights
                        </div>
                      )}
                    </div>
                  )}

                  {/* Processing Stats */}
                  {file.status === 'completed' && file.processingTime > 0 && (
                    <div className="flex justify-between text-xs text-gray-500">
                      <span>Processing time: {file.processingTime}s</span>
                      <span>Quality: {file.quality.toFixed(1)}/10.0</span>
                      <span>Tokens: {file.tokensGenerated.toLocaleString()}</span>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};


================================================
FILE: frontend/src/contexts/ThemeContext.tsx
================================================
'use client';

import React, { createContext, useContext, useEffect, useState } from 'react';

type Theme = 'light' | 'dark' | 'system';

interface ThemeContextType {
  theme: Theme;
  setTheme: (theme: Theme) => void;
  resolvedTheme: 'light' | 'dark';
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [theme, setTheme] = useState<Theme>('system');
  const [resolvedTheme, setResolvedTheme] = useState<'light' | 'dark'>('dark');

  useEffect(() => {
    // Load theme from localStorage
    const savedTheme = localStorage.getItem('theme') as Theme;
    if (savedTheme) {
      setTheme(savedTheme);
    }
  }, []);

  useEffect(() => {
    // Apply theme to document
    const root = window.document.documentElement;

    if (theme === 'system') {
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      setResolvedTheme(systemTheme);
      root.classList.remove('light', 'dark');
      root.classList.add(systemTheme);
    } else {
      setResolvedTheme(theme);
      root.classList.remove('light', 'dark');
      root.classList.add(theme);
    }

    // Save theme preference
    localStorage.setItem('theme', theme);
  }, [theme]);

  // Listen for system theme changes
  useEffect(() => {
    if (theme !== 'system') return;

    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    const handleChange = (e: MediaQueryListEvent) => {
      const systemTheme = e.matches ? 'dark' : 'light';
      setResolvedTheme(systemTheme);
      const root = window.document.documentElement;
      root.classList.remove('light', 'dark');
      root.classList.add(systemTheme);
    };

    mediaQuery.addEventListener('change', handleChange);
    return () => mediaQuery.removeEventListener('change', handleChange);
  }, [theme]);

  return (
    <ThemeContext.Provider value={{ theme, setTheme, resolvedTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}

export function useTheme() {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
}



================================================
FILE: frontend/src/hooks/useAdvancedApi.ts
================================================
import { useCallback, useEffect, useRef, useState } from 'react';
import { apiClient } from '@/lib/api-client';
import { ApiResponse } from '@/types/api';
import { UseApiState, UseApiOptions } from '@/types/hooks';

interface CacheEntry<T> {
  data: T;
  timestamp: number;
  staleTime: number;
}

// Global cache for API responses
const apiCache = new Map<string, CacheEntry<unknown>>();

export function useAdvancedApi<T>(
  endpoint: string,
  options: UseApiOptions<T> = {}
): UseApiState<T> {
  const {
    immediate = true,
    onSuccess,
    onError,
    retries = 3,
    retryDelay = 1000,
    staleTime = 5 * 60 * 1000, // 5 minutes
    cacheTime = 10 * 60 * 1000, // 10 minutes
    refetchOnWindowFocus = true,
    refetchOnMount = true,
  } = options;

  const [state, setState] = useState<{
    data: T | null;
    loading: boolean;
    error: Error | null;
  }>({
    data: null,
    loading: false,
    error: null,
  });

  const abortControllerRef = useRef<AbortController | null>(null);
  const retryCountRef = useRef(0);
  const requestIdRef = useRef<string | null>(null);

  // Generate cache key
  const getCacheKey = useCallback(() => {
    return `${endpoint}`;
  }, [endpoint]);

  // Check if data is stale
  const isStale = useCallback((entry: CacheEntry<T>) => {
    return Date.now() - entry.timestamp > entry.staleTime;
  }, []);

  // Execute API request
  const execute = useCallback(
    async (force = false): Promise<T | null> => {
      const cacheKey = getCacheKey();
      
      // Check cache first
      if (!force) {
        const cached = apiCache.get(cacheKey) as CacheEntry<T> | undefined;
        if (cached && !isStale(cached)) {
          setState(prev => ({ ...prev, data: cached.data, loading: false, error: null }));
          return cached.data;
        }
      }

      // Cancel previous request
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }

      // Create new abort controller
      abortControllerRef.current = new AbortController();
      requestIdRef.current = `${endpoint}-${Date.now()}`;

      setState(prev => ({ ...prev, loading: true, error: null }));

      try {
        const response = await apiClient.get<T>(
          endpoint,
          { 
            retries,
            timeout: 30000,
          },
          requestIdRef.current
        );

        if (!response.success) {
          throw new Error(response.error.message);
        }

        const data = response.data;

        // Cache the response
        apiCache.set(cacheKey, {
          data,
          timestamp: Date.now(),
          staleTime,
        });

        setState({ data, loading: false, error: null });
        onSuccess?.(data);
        retryCountRef.current = 0;

        return data;
      } catch (error) {
        const apiError = error instanceof Error ? error : new Error('Unknown error');
        
        // Retry logic
        if (retryCountRef.current < retries && !abortControllerRef.current?.signal.aborted) {
          retryCountRef.current++;
          await new Promise(resolve => setTimeout(resolve, retryDelay * Math.pow(2, retryCountRef.current - 1)));
          return execute(force);
        }

        setState(prev => ({ ...prev, loading: false, error: apiError }));
        onError?.(apiError);
        return null;
      }
    },
    [endpoint, retries, retryDelay, staleTime, getCacheKey, isStale, onSuccess, onError]
  );

  // Refetch function
  const refetch = useCallback(() => {
    return execute(true);
  }, [execute]);

  // Mutate function for optimistic updates
  const mutate = useCallback(
    (data: T | ((prev: T | null) => T)) => {
      setState(prev => ({
        ...prev,
        data: typeof data === 'function' ? (data as (prev: T | null) => T)(prev.data) : data,
      }));

      // Update cache
      const cacheKey = getCacheKey();
      const newData = typeof data === 'function' ? (data as (prev: T | null) => T)(state.data) : data;
      apiCache.set(cacheKey, {
        data: newData,
        timestamp: Date.now(),
        staleTime,
      });
    },
    [getCacheKey, staleTime, state.data]
  );

  // Effect for initial fetch
  useEffect(() => {
    if (immediate && refetchOnMount) {
      execute();
    }
  }, [immediate, refetchOnMount, execute]);

  // Effect for window focus refetch
  useEffect(() => {
    if (!refetchOnWindowFocus) return;

    const handleFocus = () => {
      const cacheKey = getCacheKey();
      const cached = apiCache.get(cacheKey) as CacheEntry<T> | undefined;
      if (cached && isStale(cached)) {
        execute();
      }
    };

    window.addEventListener('focus', handleFocus);
    return () => window.removeEventListener('focus', handleFocus);
  }, [refetchOnWindowFocus, getCacheKey, isStale, execute]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }
      if (requestIdRef.current) {
        apiClient.cancelRequest(requestIdRef.current);
      }
    };
  }, []);

  return {
    ...state,
    refetch,
    mutate,
  };
}

// Hook for mutations
export function useApiMutation<TData, TVariables = unknown>(
  endpoint: string,
  options: {
    onSuccess?: (data: TData) => void;
    onError?: (error: Error) => void;
    onSettled?: (data: TData | null, error: Error | null) => void;
  } = {}
) {
  const { onSuccess, onError, onSettled } = options;
  
  const [state, setState] = useState<{
    data: TData | null;
    loading: boolean;
    error: Error | null;
  }>({
    data: null,
    loading: false,
    error: null,
  });

  const mutate = useCallback(
    async (variables: TVariables, method: 'POST' | 'PUT' | 'PATCH' | 'DELETE' = 'POST') => {
      setState(prev => ({ ...prev, loading: true, error: null }));

      try {
        const response = await apiClient.request<TData>(endpoint, {
          method,
          body: variables,
        });

        if (!response.success) {
          throw new Error(response.error.message);
        }

        const data = response.data;
        setState({ data, loading: false, error: null });
        onSuccess?.(data);
        onSettled?.(data, null);
        return data;
      } catch (error) {
        const apiError = error instanceof Error ? error : new Error('Unknown error');
        setState(prev => ({ ...prev, loading: false, error: apiError }));
        onError?.(apiError);
        onSettled?.(null, apiError);
        throw apiError;
      }
    },
    [endpoint, onSuccess, onError, onSettled]
  );

  const reset = useCallback(() => {
    setState({ data: null, loading: false, error: null });
  }, []);

  return {
    ...state,
    mutate,
    reset,
  };
}

// Hook for streaming data
export function useApiStream<T>(
  endpoint: string,
  options: {
    onMessage?: (data: T) => void;
    onError?: (error: Error) => void;
    onComplete?: () => void;
    autoConnect?: boolean;
  } = {}
) {
  const { onMessage, onError, onComplete, autoConnect = false } = options;
  
  const [state, setState] = useState<{
    connected: boolean;
    connecting: boolean;
    error: Error | null;
    messages: T[];
  }>({
    connected: false,
    connecting: false,
    error: null,
    messages: [],
  });

  const connectionRef = useRef<boolean>(false);

  const connect = useCallback(async () => {
    if (connectionRef.current) return;

    setState(prev => ({ ...prev, connecting: true, error: null }));
    connectionRef.current = true;

    try {
      await apiClient.stream<T>(
        endpoint,
        {},
        (data) => {
          setState(prev => ({ ...prev, messages: [...prev.messages, data] }));
          onMessage?.(data);
        },
        (error) => {
          setState(prev => ({ ...prev, error, connected: false, connecting: false }));
          connectionRef.current = false;
          onError?.(error);
        },
        () => {
          setState(prev => ({ ...prev, connected: false, connecting: false }));
          connectionRef.current = false;
          onComplete?.();
        }
      );

      setState(prev => ({ ...prev, connected: true, connecting: false }));
    } catch (error) {
      const apiError = error instanceof Error ? error : new Error('Connection failed');
      setState(prev => ({ ...prev, error: apiError, connecting: false }));
      connectionRef.current = false;
      onError?.(apiError);
    }
  }, [endpoint, onMessage, onError, onComplete]);

  const disconnect = useCallback(() => {
    connectionRef.current = false;
    setState(prev => ({ ...prev, connected: false, connecting: false }));
  }, []);

  const clearMessages = useCallback(() => {
    setState(prev => ({ ...prev, messages: [] }));
  }, []);

  useEffect(() => {
    if (autoConnect) {
      connect();
    }

    return () => {
      disconnect();
    };
  }, [autoConnect, connect, disconnect]);

  return {
    ...state,
    connect,
    disconnect,
    clearMessages,
  };
}

// Hook for paginated data
export function useApiPagination<T>(
  endpoint: string,
  options: {
    limit?: number;
    onSuccess?: (data: T[]) => void;
    onError?: (error: Error) => void;
  } = {}
) {
  const { limit = 10, onSuccess, onError } = options;
  
  const [state, setState] = useState<{
    data: T[];
    loading: boolean;
    error: Error | null;
    hasMore: boolean;
    page: number;
  }>({
    data: [],
    loading: false,
    error: null,
    hasMore: true,
    page: 1,
  });

  const loadMore = useCallback(async () => {
    if (state.loading || !state.hasMore) return;

    setState(prev => ({ ...prev, loading: true, error: null }));

    try {
      const response = await apiClient.get<{
        items: T[];
        hasMore: boolean;
        total: number;
      }>(`${endpoint}?page=${state.page}&limit=${limit}`);

      if (!response.success) {
        throw new Error(response.error.message);
      }

      const { items, hasMore } = response.data;

      setState(prev => ({
        ...prev,
        data: [...prev.data, ...items],
        loading: false,
        hasMore,
        page: prev.page + 1,
      }));

      onSuccess?.(items);
    } catch (error) {
      const apiError = error instanceof Error ? error : new Error('Unknown error');
      setState(prev => ({ ...prev, loading: false, error: apiError }));
      onError?.(apiError);
    }
  }, [endpoint, limit, state.loading, state.hasMore, state.page, onSuccess, onError]);

  const reset = useCallback(() => {
    setState({
      data: [],
      loading: false,
      error: null,
      hasMore: true,
      page: 1,
    });
  }, []);

  return {
    ...state,
    loadMore,
    reset,
  };
}

// Clear cache utility
export function clearApiCache(pattern?: string) {
  if (pattern) {
    const regex = new RegExp(pattern);
    for (const [key] of apiCache.entries()) {
      if (regex.test(key)) {
        apiCache.delete(key);
      }
    }
  } else {
    apiCache.clear();
  }
}

// Preload data utility
export function preloadApiData<T>(endpoint: string, staleTime = 5 * 60 * 1000) {
  const cacheKey = endpoint;
  
  return apiClient.get<T>(endpoint).then(response => {
    if (response.success) {
      apiCache.set(cacheKey, {
        data: response.data,
        timestamp: Date.now(),
        staleTime,
      });
    }
  });
}


================================================
FILE: frontend/src/hooks/useAdvancedChat.ts
================================================
import { useState, useEffect, useCallback, useRef } from 'react';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { useStream } from './useStream';
import { useFileUpload } from './useFileUpload';

export interface ChatMessage {
  id: string;
  type: 'human' | 'ai';
  content: string;
  timestamp: number;
  metadata?: {
    model?: string;
    tokens?: number;
    cost?: number;
    processing_time?: number;
    sources?: any[];
    quality_score?: number;
  };
}

export interface ChatRequest {
  prompt: string;
  mode: string;
  file_ids: string[];
  user_params: {
    citationStyle: string;
    wordCount: number;
    model: string;
    user_id: string;
    academic_level?: string;
    deadline?: string;
    special_instructions?: string;
  };
}

export interface ChatResponse {
  success: boolean;
  response: string;
  sources: any[];
  workflow_status: string;
  system_used: string;
  complexity_score: number;
  routing_reason: string;
  routing_confidence?: number;
  processing_time: number;
  conversation_id?: string;
  citation_count?: number;
  agent_metrics?: any;
}

export interface ChatSession {
  id: string;
  messages: ChatMessage[];
  created_at: number;
  updated_at: number;
  status: 'active' | 'completed' | 'failed' | 'cancelled';
  metadata: {
    total_cost: number;
    total_tokens: number;
    quality_scores: number[];
    processing_times: number[];
  };
}

export interface UseAdvancedChatOptions {
  sessionId?: string;
  onMessage?: (message: ChatMessage) => void;
  onError?: (error: Error) => void;
  onCostUpdate?: (cost: number) => void;
  onQualityUpdate?: (score: number) => void;
  maxRetries?: number;
  retryDelay?: number;
}

export const useAdvancedChat = (options: UseAdvancedChatOptions = {}) => {
  const {
    sessionId: initialSessionId,
    onMessage,
    onError,
    onCostUpdate,
    onQualityUpdate,
    maxRetries = 3,
    retryDelay = 1000
  } = options;

  const [sessionId, setSessionId] = useState<string | null>(initialSessionId || null);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [currentTraceId, setCurrentTraceId] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [retryCount, setRetryCount] = useState(0);
  const [estimatedCost, setEstimatedCost] = useState(0);
  const [estimatedTime, setEstimatedTime] = useState(0);
  const [routingDecision, setRoutingDecision] = useState<any>(null);
  
  const queryClient = useQueryClient();
  const retryTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const abortControllerRef = useRef<AbortController | null>(null);

  // File upload hook
  const { getFileIds, clearFiles } = useFileUpload();

  // WebSocket streaming
  const { 
    events, 
    streamingText, 
    totalCost, 
    plagiarismScore, 
    qualityScore, 
    derivatives,
    isConnected,
    connectionError 
  } = useStream(currentTraceId, {
    onMessage: (event) => {
      if (event.type === 'stream' && event.text) {
        // Update the current AI message with streaming text
        setMessages(prev => prev.map(msg => 
          msg.id === currentTraceId 
            ? { ...msg, content: msg.content + event.text }
            : msg
        ));
      }
      
      if (event.type === 'workflow_finished') {
        setIsProcessing(false);
        onQualityUpdate?.(event.payload?.quality || 0);
      }
      
      if (event.type === 'error') {
        handleError(new Error(event.error || 'Unknown error'));
      }
    },
    onError: (error) => {
      handleError(error);
    }
  });

  // Load chat session
  const { data: session, isLoading: isLoadingSession } = useQuery({
    queryKey: ['chat-session', sessionId],
    queryFn: async () => {
      if (!sessionId) return null;
      
      const response = await fetch(`/api/chat/sessions/${sessionId}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('access_token')}`
        }
      });
      
      if (!response.ok) {
        throw new Error('Failed to load chat session');
      }
      
      return response.json();
    },
    enabled: !!sessionId,
    staleTime: 5 * 60 * 1000, // 5 minutes
    cacheTime: 10 * 60 * 1000, // 10 minutes
  });

  // Chat mutation with advanced error handling
  const chatMutation = useMutation({
    mutationFn: async (request: ChatRequest): Promise<ChatResponse> => {
      // Cancel any ongoing request
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }
      
      abortControllerRef.current = new AbortController();
      
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('access_token')}`,
          'X-Session-ID': sessionId || 'new'
        },
        body: JSON.stringify(request),
        signal: abortControllerRef.current.signal
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);
      }
      
      return response.json();
    },
    onSuccess: (response) => {
      setCurrentTraceId(response.conversation_id || Date.now().toString());
      setEstimatedCost(0); // Backend doesn't provide cost estimate
      setEstimatedTime(response.processing_time || 0);
      setRoutingDecision({
        system: response.system_used as 'simple' | 'advanced' | 'hybrid',
        reason: response.routing_reason,
        confidence: response.routing_confidence || 0
      });
      setRetryCount(0);
      
      // Add AI response message if we have content
      if (response.response) {
        const aiMessage: ChatMessage = {
          id: response.conversation_id || Date.now().toString(),
          type: 'ai',
          content: response.response,
          timestamp: Date.now(),
          metadata: {
            model: response.system_used,
            cost: 0,
            processing_time: response.processing_time,
            sources: response.sources,
            quality_score: response.complexity_score
          }
        };
        
        setMessages(prev => [...prev, aiMessage]);
        onMessage?.(aiMessage);
      }
    },
    onError: (error) => {
      handleError(error as Error);
    },
    retry: false // Handle retries manually
  });

  // Advanced error handling with exponential backoff
  const handleError = useCallback((error: Error) => {
    console.error('Chat error:', error);
    setIsProcessing(false);
    
    // Check if we should retry
    if (retryCount < maxRetries && !error.message.includes('abort')) {
      const delay = retryDelay * Math.pow(2, retryCount);
      
      retryTimeoutRef.current = setTimeout(() => {
        setRetryCount(prev => prev + 1);
        console.log(`Retrying chat request (${retryCount + 1}/${maxRetries})`);
        
        // Retry the last request
        if (chatMutation.variables) {
          chatMutation.mutate(chatMutation.variables);
        }
      }, delay);
    } else {
      onError?.(error);
    }
  }, [retryCount, maxRetries, retryDelay, onError, chatMutation]);

  // Send message with validation and preprocessing
  const sendMessage = useCallback(async (
    prompt: string,
    mode: string = 'general',
    options: {
      citationStyle?: string;
      wordCount?: number;
      model?: string;
      academicLevel?: string;
      deadline?: string;
      specialInstructions?: string;
    } = {}
  ) => {
    if (!prompt.trim()) {
      throw new Error('Message cannot be empty');
    }
    
    if (isProcessing) {
      throw new Error('Another message is currently being processed');
    }
    
    setIsProcessing(true);
    
    // Add user message immediately
    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'human',
      content: prompt,
      timestamp: Date.now()
    };
    
    setMessages(prev => [...prev, userMessage]);
    onMessage?.(userMessage);
    
    // Get uploaded file IDs
    const fileIds = getFileIds();

    if (fileIds.length > 0) {
      console.log('Processing files:', fileIds);
      // Call the new endpoint to process files
      try {
        const processResponse = await fetch('/api/process-files', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ file_ids: fileIds }),
        });
        const processResult = await processResponse.json();
        console.log('File processing started:', processResult);
        // In a full implementation, we would wait for a callback here.
      } catch (error) {
        console.error('Failed to initiate file processing:', error);
        // Handle error appropriately
      }
    }
    
    // Prepare request
    const request: ChatRequest = {
      prompt,
      mode,
      file_ids: fileIds,
      user_params: {
        citationStyle: options.citationStyle || 'Harvard',
        wordCount: options.wordCount || 3000,
        model: options.model || 'gemini-2.5-pro',
        user_id: 'current_user', // Replace with actual user ID
        academic_level: options.academicLevel,
        deadline: options.deadline,
        special_instructions: options.specialInstructions
      }
    };
    
    // Send to backend
    try {
      await chatMutation.mutateAsync(request);
      
      // Clear uploaded files after successful submission
      clearFiles();
    } catch (error) {
      setIsProcessing(false);
      throw error;
    }
  }, [isProcessing, getFileIds, clearFiles, onMessage, chatMutation]);

  // Cancel current request
  const cancelRequest = useCallback(() => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }
    
    if (retryTimeoutRef.current) {
      clearTimeout(retryTimeoutRef.current);
    }
    
    setIsProcessing(false);
    setRetryCount(0);
    setCurrentTraceId(null);
  }, []);

  // Create new session
  const createSession = useCallback(async () => {
    const response = await fetch('/api/chat/sessions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('access_token')}`
      }
    });
    
    if (!response.ok) {
      throw new Error('Failed to create chat session');
    }
    
    const session = await response.json();
    setSessionId(session.id);
    setMessages([]);
    
    return session;
  }, []);

  // Load session messages
  useEffect(() => {
    if (session?.messages) {
      setMessages(session.messages);
    }
  }, [session]);

  // Update cost tracking
  useEffect(() => {
    if (totalCost !== undefined) {
      onCostUpdate?.(totalCost);
    }
  }, [totalCost, onCostUpdate]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }
      if (retryTimeoutRef.current) {
        clearTimeout(retryTimeoutRef.current);
      }
    };
  }, []);

  return {
    // State
    sessionId,
    messages,
    isProcessing,
    isLoadingSession,
    estimatedCost,
    estimatedTime,
    routingDecision,
    
    // WebSocket data
    events,
    streamingText,
    totalCost,
    plagiarismScore,
    qualityScore,
    derivatives,
    isConnected,
    connectionError,
    
    // Actions
    sendMessage,
    cancelRequest,
    createSession,
    
    // Status
    retryCount,
    maxRetries,
    
    // Mutation state
    isLoading: chatMutation.isPending,
    error: chatMutation.error,
    
    // Session data
    session
  };
};


================================================
FILE: frontend/src/hooks/useFileUpload.ts
================================================
import { useState, useCallback } from 'react';
import * as tus from 'tus-js-client';

export interface UploadFile {
  id: string;
  name: string;
  size: number;
  type: string;
  progress: number;
  status: 'pending' | 'uploading' | 'completed' | 'error';
  file_id?: string;
  error?: string;
  thumbnail?: string;
}

export const useFileUpload = () => {
  const [files, setFiles] = useState<UploadFile[]>([]);
  const [totalProgress, setTotalProgress] = useState(0);

  const uploadFile = useCallback(async (file: File): Promise<string> => {
    const uploadId = crypto.randomUUID();
    
    // Add file to state
    const uploadFile: UploadFile = {
      id: uploadId,
      name: file.name,
      size: file.size,
      type: file.type,
      progress: 0,
      status: 'pending'
    };
    
    setFiles(prev => [...prev, uploadFile]);

    return new Promise((resolve, reject) => {
      // Create thumbnail for images
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = (e) => {
          setFiles(prev => prev.map(f => 
            f.id === uploadId 
              ? { ...f, thumbnail: e.target?.result as string }
              : f
          ));
        };
        reader.readAsDataURL(file);
      }

      // Initialize tus upload
      const upload = new tus.Upload(file, {
        endpoint: 'http://localhost:8000/api/files/upload',
        retryDelays: [0, 1000, 3000, 5000],
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('access_token')}`
        },
        metadata: {
          filename: file.name,
          filetype: file.type,
          filesize: file.size.toString()
        },
        onError: (error) => {
          console.error('Upload failed:', error);
          setFiles(prev => prev.map(f => 
            f.id === uploadId 
              ? { ...f, status: 'error', error: error.message }
              : f
          ));
          reject(error);
        },
        onProgress: (bytesUploaded, bytesTotal) => {
          const progress = Math.round((bytesUploaded / bytesTotal) * 100);
          setFiles(prev => prev.map(f => 
            f.id === uploadId 
              ? { ...f, progress, status: 'uploading' }
              : f
          ));
          
          // Calculate total progress
          setFiles(current => {
            const totalFiles = current.length;
            const totalProgress = current.reduce((sum, f) => sum + f.progress, 0);
            setTotalProgress(totalProgress / totalFiles);
            return current;
          });
        },
        onSuccess: () => {
          // Extract file_id from upload URL
          const fileId = upload.url?.split('/').pop();
          
          setFiles(prev => prev.map(f => 
            f.id === uploadId 
              ? { ...f, status: 'completed', file_id: fileId, progress: 100 }
              : f
          ));
          
          resolve(fileId!);
        }
      });

      // Start upload
      upload.start();
    });
  }, []);

  const uploadFiles = useCallback(async (fileList: FileList | File[]) => {
    const fileArray = Array.from(fileList);
    const uploadPromises = fileArray.map(file => uploadFile(file));
    
    try {
      const fileIds = await Promise.all(uploadPromises);
      return fileIds;
    } catch (error) {
      console.error('Batch upload failed:', error);
      throw error;
    }
  }, [uploadFile]);

  const removeFile = useCallback((id: string) => {
    setFiles(prev => prev.filter(f => f.id !== id));
  }, []);

  const clearFiles = useCallback(() => {
    setFiles([]);
    setTotalProgress(0);
  }, []);

  const getFileIds = useCallback(() => {
    return files
      .filter(f => f.status === 'completed' && f.file_id)
      .map(f => f.file_id!);
  }, [files]);

  return {
    files,
    totalProgress,
    uploadFile,
    uploadFiles,
    removeFile,
    clearFiles,
    getFileIds,
    isUploading: files.some(f => f.status === 'uploading'),
    hasFiles: files.length > 0,
    completedFiles: files.filter(f => f.status === 'completed')
  };
};


================================================
FILE: frontend/src/hooks/useSidebar.ts
================================================
import { useState, useEffect } from 'react'

const SIDEBAR_STORAGE_KEY = 'sidebar-collapsed'

export function useSidebar() {
  const [collapsed, setCollapsed] = useState(false)
  const [isMobile, setIsMobile] = useState(false)
  const [showMobileOverlay, setShowMobileOverlay] = useState(false)

  // Initialize from localStorage
  useEffect(() => {
    const saved = localStorage.getItem(SIDEBAR_STORAGE_KEY)
    if (saved !== null) {
      setCollapsed(JSON.parse(saved))
    }
  }, [])

  // Detect mobile breakpoint
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768) // md breakpoint
    }
    
    checkMobile()
    window.addEventListener('resize', checkMobile)
    return () => window.removeEventListener('resize', checkMobile)
  }, [])

  // Auto-collapse on mobile
  useEffect(() => {
    if (isMobile && !collapsed) {
      setCollapsed(true)
    }
  }, [isMobile])

  const toggle = () => {
    const newCollapsed = !collapsed
    setCollapsed(newCollapsed)
    localStorage.setItem(SIDEBAR_STORAGE_KEY, JSON.stringify(newCollapsed))
    
    // On mobile, show overlay when expanding
    if (isMobile && !newCollapsed) {
      setShowMobileOverlay(true)
    } else {
      setShowMobileOverlay(false)
    }
  }

  const closeMobileOverlay = () => {
    setShowMobileOverlay(false)
    if (isMobile) {
      setCollapsed(true)
    }
  }

  return {
    collapsed,
    isMobile,
    showMobileOverlay,
    toggle,
    closeMobileOverlay
  }
}


================================================
FILE: frontend/src/hooks/useStream.ts
================================================
import { useState, useEffect, useRef } from 'react';
import { create } from 'zustand';

export interface TimelineEvent {
  type: string;
  name?: string;
  tokens?: number;
  text?: string;
  cost?: number;
  [key: string]: any;
}

interface StreamState {
  events: TimelineEvent[];
  streamingText: string;
  reasoningText: string;
  totalCost: number;
  plagiarismScore: number;
  qualityScore: number;
  derivatives: { kind: string; url: string }[];
  addEvent: (event: TimelineEvent) => void;
  appendStreamingText: (text: string) => void;
  appendReasoningText: (text: string) => void;
  setMetrics: (metrics: { cost?: number; plagiarismScore?: number; qualityScore?: number }) => void;
  addDerivative: (derivative: { kind: string; url: string }) => void;
  reset: () => void;
}

const useStreamStore = create<StreamState>((set) => ({
  events: [],
  streamingText: '',
  reasoningText: '',
  totalCost: 0,
  plagiarismScore: 0,
  qualityScore: 0,
  derivatives: [],
  addEvent: (event) => set((state) => ({ events: [...state.events, event] })),
  appendStreamingText: (text) => set((state) => ({ streamingText: state.streamingText + text })),
  appendReasoningText: (text) => set((state) => ({ reasoningText: state.reasoningText + text })),
  setMetrics: (metrics) => set((state) => ({ ...state, ...metrics })),
  addDerivative: (derivative) => set((state) => ({ derivatives: [...state.derivatives, derivative] })),
  reset: () => set({
    events: [],
    streamingText: '',
    reasoningText: '',
    totalCost: 0,
    plagiarismScore: 0,
    qualityScore: 0,
    derivatives: []
  })
}));

interface UseStreamOptions {
  onMessage?: (event: TimelineEvent) => void;
  onClose?: () => void;
}

export function useStream(traceId: string | null, options?: UseStreamOptions) {
  const [isConnected, setIsConnected] = useState(false);
  const eventSourceRef = useRef<EventSource | null>(null);
  const optionsRef = useRef(options);
  const store = useStreamStore();

  // Update options ref
  useEffect(() => {
    optionsRef.current = options;
  }, [options]);

  useEffect(() => {
    // Clean up previous connection
    if (eventSourceRef.current) {
      eventSourceRef.current.close();
      eventSourceRef.current = null;
    }
    
    // Reset store for new conversation
    store.reset();

    if (traceId) {
      const sseUrl = `/api/chat/stream/${traceId}`;
      const eventSource = new EventSource(sseUrl);
      eventSourceRef.current = eventSource;

      eventSource.onopen = () => {
        setIsConnected(true);
        console.log(`SSE connection established for trace: ${traceId}`);
      };

      eventSource.onerror = (error) => {
        console.error('SSE error:', error);
        setIsConnected(false);
        eventSource.close();
        if (optionsRef.current?.onClose) optionsRef.current.onClose();
      };

      const messageHandler = (event: MessageEvent) => {
        try {
          const data = JSON.parse(event.data);
          
          if (optionsRef.current?.onMessage) {
            optionsRef.current.onMessage(data);
          }

          switch (data.type) {
            case 'content':
              if (data.text) store.appendStreamingText(data.text);
              break;
            case 'thinking':
              if (data.text) store.appendReasoningText(data.text);
              break;
            case 'metrics':
              store.setMetrics({
                cost: data.cost,
                plagiarismScore: data.plagiarism_score,
                qualityScore: data.quality_score,
              });
              break;
            case 'derivative_ready':
              if (data.kind && data.url) {
                store.addDerivative({ kind: data.kind, url: data.url });
              }
              break;
            case 'done':
              eventSource.close();
              setIsConnected(false);
              if (optionsRef.current?.onClose) optionsRef.current.onClose();
              break;
            default:
              store.addEvent(data);
          }
        } catch (e) {
          console.error('Failed to parse SSE message:', e);
        }
      };

      eventSource.addEventListener('message', messageHandler);
      
      return () => {
        eventSource.removeEventListener('message', messageHandler);
        eventSource.close();
        setIsConnected(false);
      };
    }
  }, [traceId]);

  return {
    isConnected,
    ...useStreamStore(),
  };
}


================================================
FILE: frontend/src/hooks/useWallet.ts
================================================
import { useState, useEffect, useCallback } from 'react';
import { walletProviderManager, type EthereumProvider } from '@/lib/walletProvider';

export interface WalletState {
  isConnected: boolean;
  address: string | null;
  provider: EthereumProvider | null;
  availableProviders: string[];
  activeProviderName: string | null;
  isConnecting: boolean;
  error: string | null;
}

export const useWallet = () => {
  const [state, setState] = useState<WalletState>({
    isConnected: false,
    address: null,
    provider: null,
    availableProviders: [],
    activeProviderName: null,
    isConnecting: false,
    error: null
  });

  useEffect(() => {
    const availableProviders = walletProviderManager.getAvailableProviders();
    const provider = walletProviderManager.getProvider();
    
    setState(prev => ({
      ...prev,
      availableProviders,
      provider,
      activeProviderName: availableProviders[0] || null
    }));

    // Check if already connected
    if (provider) {
      checkConnection(provider);
    }
  }, []);

  const checkConnection = async (provider: EthereumProvider) => {
    try {
      const accounts = await provider.request({ method: 'eth_accounts' });
      if (accounts.length > 0) {
        setState(prev => ({
          ...prev,
          isConnected: true,
          address: accounts[0],
          error: null
        }));
      }
    } catch (error) {
      console.error('Error checking wallet connection:', error);
    }
  };

  const connect = useCallback(async (providerName?: string) => {
    setState(prev => ({ ...prev, isConnecting: true, error: null }));

    try {
      const provider = walletProviderManager.getProvider(providerName);
      
      if (!provider) {
        throw new Error('No wallet provider available');
      }

      const accounts = await provider.request({
        method: 'eth_requestAccounts'
      });

      if (accounts.length > 0) {
        setState(prev => ({
          ...prev,
          isConnected: true,
          address: accounts[0],
          provider,
          activeProviderName: providerName || prev.activeProviderName,
          isConnecting: false,
          error: null
        }));

        // Set up event listeners
        provider.on('accountsChanged', handleAccountsChanged);
        provider.on('chainChanged', handleChainChanged);
      }
    } catch (error: any) {
      setState(prev => ({
        ...prev,
        isConnecting: false,
        error: error.message || 'Failed to connect wallet'
      }));
    }
  }, []);

  const disconnect = useCallback(async () => {
    const { provider } = state;
    
    if (provider) {
      // Remove event listeners
      provider.removeListener('accountsChanged', handleAccountsChanged);
      provider.removeListener('chainChanged', handleChainChanged);
    }

    setState(prev => ({
      ...prev,
      isConnected: false,
      address: null,
      error: null
    }));
  }, [state.provider]);

  const switchProvider = useCallback(async (providerName: string) => {
    if (walletProviderManager.switchProvider(providerName)) {
      await disconnect();
      await connect(providerName);
    }
  }, [connect, disconnect]);

  const handleAccountsChanged = useCallback((accounts: string[]) => {
    if (accounts.length === 0) {
      disconnect();
    } else {
      setState(prev => ({
        ...prev,
        address: accounts[0]
      }));
    }
  }, [disconnect]);

  const handleChainChanged = useCallback((chainId: string) => {
    // Refresh the page to avoid any issues
    window.location.reload();
  }, []);

  const sendTransaction = useCallback(async (transactionParams: any) => {
    const { provider } = state;
    
    if (!provider || !state.isConnected) {
      throw new Error('Wallet not connected');
    }

    try {
      const txHash = await provider.request({
        method: 'eth_sendTransaction',
        params: [transactionParams]
      });
      return txHash;
    } catch (error: any) {
      throw new Error(error.message || 'Transaction failed');
    }
  }, [state.provider, state.isConnected]);

  return {
    ...state,
    connect,
    disconnect,
    switchProvider,
    sendTransaction
  };
};


================================================
FILE: frontend/src/lib/agentic-doc-client.ts
================================================
import { env } from 'process';

const AGENTIC_DOC_SERVICE_URL = env.AGENTIC_DOC_SERVICE_URL || 'http://localhost:8000';

interface ProcessDocumentRequest {
    bucket: string;
    key: string;
    task_id?: string;
}

interface ProcessDocumentResponse {
    accepted: boolean;
    task_id: string;
}

class AgenticDocClient {
    private baseUrl: string;

    constructor(baseUrl: string) {
        this.baseUrl = baseUrl;
    }

    async processDocument(request: ProcessDocumentRequest): Promise<ProcessDocumentResponse> {
        const response = await fetch(`${this.baseUrl}/process-document`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(request),
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(errorData.detail || `Failed to process document: ${response.statusText}`);
        }

        return response.json();
    }
}

export const agenticDocClient = new AgenticDocClient(AGENTIC_DOC_SERVICE_URL);



================================================
FILE: frontend/src/lib/api-client.ts
================================================
import { ApiResponse, ApiError, ApiRequestOptions } from '@/types/api';

export class ApiClient {
  private baseUrl: string;
  private defaultTimeout: number;
  private defaultRetries: number;
  private defaultRetryDelay: number;
  private defaultHeaders: Record<string, string>;
  private requestInterceptors: Array<(options: ApiRequestOptions) => ApiRequestOptions> = [];
  private responseInterceptors: Array<(response: Response) => Response | Promise<Response>> = [];
  private errorInterceptors: Array<(error: ApiError) => ApiError> = [];
  private abortControllers: Map<string, AbortController> = new Map();

  constructor(config: {
    baseUrl?: string;
    timeout?: number;
    retries?: number;
    retryDelay?: number;
    headers?: Record<string, string>;
  } = {}) {
    this.baseUrl = config.baseUrl || '/api';
    this.defaultTimeout = config.timeout || 30000;
    this.defaultRetries = config.retries || 3;
    this.defaultRetryDelay = config.retryDelay || 1000;
    this.defaultHeaders = {
      'Content-Type': 'application/json',
      ...config.headers,
    };
  }

  // Interceptor methods
  addRequestInterceptor(interceptor: (options: ApiRequestOptions) => ApiRequestOptions) {
    this.requestInterceptors.push(interceptor);
    return () => {
      const index = this.requestInterceptors.indexOf(interceptor);
      if (index > -1) this.requestInterceptors.splice(index, 1);
    };
  }

  addResponseInterceptor(interceptor: (response: Response) => Response | Promise<Response>) {
    this.responseInterceptors.push(interceptor);
    return () => {
      const index = this.responseInterceptors.indexOf(interceptor);
      if (index > -1) this.responseInterceptors.splice(index, 1);
    };
  }

  addErrorInterceptor(interceptor: (error: ApiError) => ApiError) {
    this.errorInterceptors.push(interceptor);
    return () => {
      const index = this.errorInterceptors.indexOf(interceptor);
      if (index > -1) this.errorInterceptors.splice(index, 1);
    };
  }

  // Request cancellation
  cancelRequest(requestId: string) {
    const controller = this.abortControllers.get(requestId);
    if (controller) {
      controller.abort();
      this.abortControllers.delete(requestId);
    }
  }

  cancelAllRequests() {
    for (const controller of this.abortControllers.values()) {
      controller.abort();
    }
    this.abortControllers.clear();
  }

  // Core request method
  async request<T = unknown>(
    endpoint: string,
    options: ApiRequestOptions = {},
    requestId?: string
  ): Promise<ApiResponse<T>> {
    const {
      method = 'GET',
      headers = {},
      body,
      timeout = this.defaultTimeout,
      retries = this.defaultRetries,
      cache,
      next,
    } = options;

    let processedOptions: ApiRequestOptions = {
      method,
      headers: { ...this.defaultHeaders, ...headers },
      body,
      timeout,
      retries,
      cache,
      next,
    };

    // Apply request interceptors
    for (const interceptor of this.requestInterceptors) {
      processedOptions = interceptor(processedOptions);
    }

    // Create abort controller
    const controller = new AbortController();
    if (requestId) {
      this.abortControllers.set(requestId, controller);
    }

    const executeRequest = async (attempt: number = 0): Promise<ApiResponse<T>> => {
      try {
        const timeoutId = setTimeout(() => {
          controller.abort();
        }, timeout);

        const fetchOptions: RequestInit = {
          method: processedOptions.method,
          headers: processedOptions.headers as HeadersInit,
          body: this.serializeBody(processedOptions.body),
          signal: controller.signal,
          cache: processedOptions.cache,
          next: processedOptions.next,
        };

        let response = await fetch(`${this.baseUrl}${endpoint}`, fetchOptions);
        clearTimeout(timeoutId);

        // Apply response interceptors
        for (const interceptor of this.responseInterceptors) {
          response = await interceptor(response);
        }

        if (!response.ok) {
          const errorData = await this.parseErrorResponse(response);
          throw new ApiError(
            errorData.code || 'HTTP_ERROR',
            errorData.message || `HTTP ${response.status}: ${response.statusText}`,
            response.status,
            errorData.details,
            new Date().toISOString(),
            response.headers.get('x-request-id') || undefined
          );
        }

        const data = await this.parseResponse<T>(response);
        return {
          success: true,
          data,
          timestamp: new Date().toISOString(),
          requestId: response.headers.get('x-request-id') || undefined,
        };
      } catch (error) {
        if (requestId) {
          this.abortControllers.delete(requestId);
        }

        if (error instanceof ApiError) {
          // Apply error interceptors
          let processedError = error;
          for (const interceptor of this.errorInterceptors) {
            processedError = interceptor(processedError);
          }

          // Retry logic
          if (attempt < retries && this.shouldRetry(error)) {
            await this.delay(this.defaultRetryDelay * Math.pow(2, attempt));
            return executeRequest(attempt + 1);
          }

          return {
            success: false,
            error: processedError,
            timestamp: new Date().toISOString(),
          };
        }

        // Handle network errors, aborted requests, etc.
        const apiError = new ApiError(
          'NETWORK_ERROR',
          error instanceof Error ? error.message : 'Network error occurred',
          0,
          { originalError: error },
          new Date().toISOString()
        );

        if (attempt < retries && !controller.signal.aborted) {
          await this.delay(this.defaultRetryDelay * Math.pow(2, attempt));
          return executeRequest(attempt + 1);
        }

        return {
          success: false,
          error: apiError,
          timestamp: new Date().toISOString(),
        };
      }
    };

    return executeRequest();
  }

  // HTTP method helpers
  async get<T = unknown>(
    endpoint: string,
    options: Omit<ApiRequestOptions, 'method'> = {},
    requestId?: string
  ): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { ...options, method: 'GET' }, requestId);
  }

  async post<T = unknown>(
    endpoint: string,
    body?: unknown,
    options: Omit<ApiRequestOptions, 'method' | 'body'> = {},
    requestId?: string
  ): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { ...options, method: 'POST', body }, requestId);
  }

  async put<T = unknown>(
    endpoint: string,
    body?: unknown,
    options: Omit<ApiRequestOptions, 'method' | 'body'> = {},
    requestId?: string
  ): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { ...options, method: 'PUT', body }, requestId);
  }

  async patch<T = unknown>(
    endpoint: string,
    body?: unknown,
    options: Omit<ApiRequestOptions, 'method' | 'body'> = {},
    requestId?: string
  ): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { ...options, method: 'PATCH', body }, requestId);
  }

  async delete<T = unknown>(
    endpoint: string,
    options: Omit<ApiRequestOptions, 'method'> = {},
    requestId?: string
  ): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { ...options, method: 'DELETE' }, requestId);
  }

  // Streaming request for SSE
  async stream<T = unknown>(
    endpoint: string,
    options: ApiRequestOptions = {},
    onMessage?: (data: T) => void,
    onError?: (error: Error) => void,
    onComplete?: () => void
  ): Promise<void> {
    const controller = new AbortController();
    const requestId = `stream-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    this.abortControllers.set(requestId, controller);

    try {
      const response = await fetch(`${this.baseUrl}${endpoint}`, {
        method: options.method || 'GET',
        headers: {
          ...this.defaultHeaders,
          ...options.headers,
          Accept: 'text/event-stream',
        },
        body: this.serializeBody(options.body),
        signal: controller.signal,
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const reader = response.body?.getReader();
      if (!reader) {
        throw new Error('Response body is not readable');
      }

      const decoder = new TextDecoder();
      let buffer = '';

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        buffer += decoder.decode(value, { stream: true });
        const lines = buffer.split('\n');
        buffer = lines.pop() || '';

        for (const line of lines) {
          if (line.startsWith('data: ')) {
            try {
              const data = JSON.parse(line.slice(6));
              onMessage?.(data);
            } catch (error) {
              onError?.(error instanceof Error ? error : new Error('Failed to parse SSE data'));
            }
          }
        }
      }

      onComplete?.();
    } catch (error) {
      onError?.(error instanceof Error ? error : new Error('Stream error'));
    } finally {
      this.abortControllers.delete(requestId);
    }
  }

  // File upload with progress
  async upload<T = unknown>(
    endpoint: string,
    file: File | File[],
    options: {
      onProgress?: (progress: number) => void;
      metadata?: Record<string, string>;
      headers?: Record<string, string>;
    } = {}
  ): Promise<ApiResponse<T>> {
    const formData = new FormData();
    const files = Array.isArray(file) ? file : [file];

    files.forEach((f, index) => {
      formData.append(`file${index}`, f);
    });

    if (options.metadata) {
      Object.entries(options.metadata).forEach(([key, value]) => {
        formData.append(key, value);
      });
    }

    return this.request<T>(endpoint, {
      method: 'POST',
      body: formData,
      headers: {
        ...options.headers,
        // Don't set Content-Type for FormData, let browser set it with boundary
      },
    });
  }

  // Utility methods
  private serializeBody(body: unknown): string | FormData | null {
    if (body === null || body === undefined) return null;
    if (body instanceof FormData) return body;
    if (typeof body === 'string') return body;
    return JSON.stringify(body);
  }

  private async parseResponse<T>(response: Response): Promise<T> {
    const contentType = response.headers.get('content-type');
    if (contentType?.includes('application/json')) {
      return response.json();
    }
    return response.text() as unknown as T;
  }

  private async parseErrorResponse(response: Response): Promise<{
    code?: string;
    message?: string;
    details?: Record<string, unknown>;
  }> {
    try {
      const contentType = response.headers.get('content-type');
      if (contentType?.includes('application/json')) {
        return await response.json();
      }
      const text = await response.text();
      return { message: text };
    } catch {
      return { message: 'Failed to parse error response' };
    }
  }

  private shouldRetry(error: ApiError): boolean {
    // Don't retry client errors (4xx) except for 429 (rate limit)
    if (error.status >= 400 && error.status < 500 && error.status !== 429) {
      return false;
    }
    return true;
  }

  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// Custom ApiError class
class ApiError extends Error {
  constructor(
    public code: string,
    message: string,
    public status: number,
    public details?: Record<string, unknown>,
    public timestamp?: string,
    public requestId?: string
  ) {
    super(message);
    this.name = 'ApiError';
  }
}

// Create default instance
export const apiClient = new ApiClient();

// Add default interceptors
apiClient.addRequestInterceptor((options) => {
  // Add authentication token if available
  const token = localStorage.getItem('auth_token');
  if (token) {
    options.headers = {
      ...options.headers,
      Authorization: `Bearer ${token}`,
    };
  }
  return options;
});

apiClient.addResponseInterceptor((response) => {
  // Handle authentication errors
  if (response.status === 401) {
    // Clear token and redirect to login
    localStorage.removeItem('auth_token');
    window.location.href = '/login';
  }
  return response;
});

apiClient.addErrorInterceptor((error) => {
  // Log errors to external service
  console.error('API Error:', error);
  
  // You can add error reporting here
  // Sentry.captureException(error);
  
  return error;
});

export { ApiError };


================================================
FILE: frontend/src/lib/api.ts
================================================
/**
 * API utility functions for connecting to the backend
 */

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';

export interface ChatRequest {
  prompt: string;
  mode: "general" | "essay" | "report" | "dissertation" | "case_study" | "case_scenario" | 
        "critical_review" | "database_search" | "reflection" | "document_analysis" | 
        "presentation" | "poster" | "exam_prep";
  file_ids?: string[];
  user_params?: Record<string, any>;
}

export interface SourceItem {
  title: string;
  url: string;
  snippet: string;
}

export interface ChatResponse {
  trace_id: string;
  response: string;
  sources: SourceItem[];
  quality_score: number;
  workflow: string;
  cost_usd: number;
}

export const chatApi = {
  async sendMessage(request: ChatRequest): Promise<ChatResponse> {
    const response = await fetch(`${API_BASE_URL}/api/chat`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: request.prompt,
        mode: request.mode,
        file_ids: request.file_ids || [],
        user_params: request.user_params || {}
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
    }

    return await response.json();
  },

  async getConversations(userId: string): Promise<{ conversations: any[] }> {
    const response = await fetch(`${API_BASE_URL}/api/users/${userId}/conversations`);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    return await response.json();
  },

  createSSEConnection(conversationId: string): EventSource {
    return new EventSource(`${API_BASE_URL}/api/stream/${conversationId}`);
  }
};


================================================
FILE: frontend/src/lib/conversationStore.ts
================================================
// Local storage-based conversation management
export interface StoredConversation {
  id: string;
  title: string;
  created_at: string;
  updated_at: string;
  message_count: number;
  last_message_preview: string;
  messages: any[];
}

export class ConversationStore {
  private static STORAGE_KEY = 'handywriterz_conversations';
  
  static getAllConversations(): StoredConversation[] {
    try {
      const stored = localStorage.getItem(this.STORAGE_KEY);
      return stored ? JSON.parse(stored) : [];
    } catch {
      return [];
    }
  }
  
  static saveConversation(conversation: StoredConversation): void {
    const conversations = this.getAllConversations();
    const existingIndex = conversations.findIndex(c => c.id === conversation.id);
    
    if (existingIndex >= 0) {
      conversations[existingIndex] = conversation;
    } else {
      conversations.unshift(conversation);
    }
    
    // Keep only the last 50 conversations
    if (conversations.length > 50) {
      conversations.splice(50);
    }
    
    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(conversations));
  }
  
  static getConversation(id: string): StoredConversation | null {
    const conversations = this.getAllConversations();
    const conversation = conversations.find(c => c.id === id);
    
    if (conversation && conversation.messages) {
      // Ensure timestamps are properly formatted
      conversation.messages = conversation.messages.map(msg => ({
        ...msg,
        timestamp: typeof msg.timestamp === 'string' ? msg.timestamp : new Date(msg.timestamp).toISOString()
      }));
    }
    
    return conversation || null;
  }
  
  static deleteConversation(id: string): void {
    const conversations = this.getAllConversations();
    const filtered = conversations.filter(c => c.id !== id);
    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(filtered));
  }
  
  static updateConversationTitle(id: string, title: string): void {
    const conversations = this.getAllConversations();
    const conversation = conversations.find(c => c.id === id);
    if (conversation) {
      conversation.title = title;
      conversation.updated_at = new Date().toISOString();
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(conversations));
    }
  }
  
  static updateConversationWithMessage(id: string, messages: any[]): void {
    const conversation = this.getConversation(id);
    if (conversation) {
      // Ensure all timestamps are strings for JSON serialization
      conversation.messages = messages.map(msg => ({
        ...msg,
        timestamp: msg.timestamp instanceof Date ? msg.timestamp.toISOString() : msg.timestamp
      }));
      conversation.message_count = messages.length;
      conversation.updated_at = new Date().toISOString();
      
      // Update preview with last message (check for both 'human' and 'user' role)
      const lastUserMessage = messages.filter(m => m.type === 'human' || m.role === 'user').pop();
      if (lastUserMessage) {
        conversation.last_message_preview = typeof lastUserMessage.content === 'string' 
          ? lastUserMessage.content.slice(0, 100) 
          : 'New message';
      }
      
      this.saveConversation(conversation);
    }
  }
  
  static createNewConversation(id: string, firstMessage?: any): StoredConversation {
    const title = firstMessage && typeof firstMessage.content === 'string' 
      ? firstMessage.content.slice(0, 50) + (firstMessage.content.length > 50 ? '...' : '')
      : 'New conversation';
      
    const conversation: StoredConversation = {
      id,
      title,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      message_count: firstMessage ? 1 : 0,
      last_message_preview: firstMessage && typeof firstMessage.content === 'string' 
        ? firstMessage.content.slice(0, 100) 
        : '',
      messages: firstMessage ? [{
        ...firstMessage,
        timestamp: firstMessage.timestamp instanceof Date ? firstMessage.timestamp.toISOString() : firstMessage.timestamp
      }] : [],
    };
    
    this.saveConversation(conversation);
    return conversation;
  }
}


================================================
FILE: frontend/src/lib/useChatStream.ts
================================================
'use client';

import { useCallback, useRef, useState } from 'react';

interface StreamOptions {
  onToken?: (token: string) => void;
  onComplete?: (fullText: string) => void;
  onError?: (error: Error) => void;
}

export function useChatStream() {
  const [isStreaming, setIsStreaming] = useState(false);
  const abortControllerRef = useRef<AbortController | null>(null);
  const accumulatedTextRef = useRef<string>('');

  const startStream = useCallback(async (
    url: string,
    payload: any,
    options: StreamOptions = {}
  ) => {
    const { onToken, onComplete, onError } = options;

    // Abort any existing stream
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }

    // Reset state
    accumulatedTextRef.current = '';
    setIsStreaming(true);
    abortControllerRef.current = new AbortController();

    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
        signal: abortControllerRef.current.signal,
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      if (!response.body) {
        throw new Error('No response body');
      }

      const reader = response.body.getReader();
      const decoder = new TextDecoder();

      while (true) {
        const { done, value } = await reader.read();

        if (done) {
          break;
        }

        const chunk = decoder.decode(value, { stream: true });

        // Handle SSE format
        const lines = chunk.split('\n');

        for (const line of lines) {
          if (line.startsWith('data: ')) {
            const data = line.slice(6);

            if (data === '[DONE]') {
              continue;
            }

            try {
              const parsed = JSON.parse(data);
              const token = parsed.token || parsed.content || parsed.text || '';

              if (token) {
                accumulatedTextRef.current += token;
                onToken?.(token);
              }
            } catch (e) {
              // If not JSON, treat as plain text
              accumulatedTextRef.current += data;
              onToken?.(data);
            }
          }
        }
      }

      onComplete?.(accumulatedTextRef.current);
    } catch (error: any) {
      if (error.name !== 'AbortError') {
        onError?.(error);
      }
    } finally {
      setIsStreaming(false);
      abortControllerRef.current = null;
    }
  }, []);

  const stopStream = useCallback(() => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
      abortControllerRef.current = null;
      setIsStreaming(false);
    }
  }, []);

  return {
    isStreaming,
    startStream,
    stopStream,
  };
}



================================================
FILE: frontend/src/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



================================================
FILE: frontend/src/lib/walletProvider.ts
================================================
/**
 * Wallet Provider Conflict Resolution
 * Handles multiple wallet extension conflicts by detecting and prioritizing providers
 */

export interface EthereumProvider {
  isMetaMask?: boolean;
  isDynamic?: boolean;
  isCoinbaseWallet?: boolean;
  request: (args: any) => Promise<any>;
  on: (event: string, handler: any) => void;
  removeListener: (event: string, handler: any) => void;
}

class WalletProviderManager {
  private providers: Map<string, EthereumProvider> = new Map();
  private activeProvider: EthereumProvider | null = null;

  constructor() {
    this.detectProviders();
  }

  private detectProviders() {
    const win = window as any;
    
    // Store original ethereum provider if exists
    if (win.ethereum) {
      this.providers.set('default', win.ethereum);
    }

    // Check for specific wallet providers
    if (win.ethereum?.isMetaMask) {
      this.providers.set('metamask', win.ethereum);
    }
    
    if (win.ethereum?.isDynamic) {
      this.providers.set('dynamic', win.ethereum);
    }
    
    if (win.ethereum?.isCoinbaseWallet) {
      this.providers.set('coinbase', win.ethereum);
    }

    // Check for multiple providers
    if (win.ethereum?.providers?.length > 0) {
      win.ethereum.providers.forEach((provider: EthereumProvider, index: number) => {
        if (provider.isMetaMask) {
          this.providers.set('metamask', provider);
        } else if (provider.isDynamic) {
          this.providers.set('dynamic', provider);
        } else if (provider.isCoinbaseWallet) {
          this.providers.set('coinbase', provider);
        } else {
          this.providers.set(`provider_${index}`, provider);
        }
      });
    }

    // Set priority order (Dynamic > MetaMask > Coinbase > Default)
    this.setActiveProvider();
  }

  private setActiveProvider() {
    const priorityOrder = ['dynamic', 'metamask', 'coinbase', 'default'];
    
    for (const providerName of priorityOrder) {
      if (this.providers.has(providerName)) {
        this.activeProvider = this.providers.get(providerName)!;
        console.log(`Active wallet provider: ${providerName}`);
        break;
      }
    }

    if (!this.activeProvider && this.providers.size > 0) {
      this.activeProvider = Array.from(this.providers.values())[0];
      console.log('Using first available provider');
    }
  }

  getProvider(preferredProvider?: string): EthereumProvider | null {
    if (preferredProvider && this.providers.has(preferredProvider)) {
      return this.providers.get(preferredProvider)!;
    }
    return this.activeProvider;
  }

  getAvailableProviders(): string[] {
    return Array.from(this.providers.keys());
  }

  switchProvider(providerName: string): boolean {
    if (this.providers.has(providerName)) {
      this.activeProvider = this.providers.get(providerName)!;
      console.log(`Switched to provider: ${providerName}`);
      return true;
    }
    return false;
  }

  // Safe ethereum object access
  safeEthereumAccess(callback: (provider: EthereumProvider) => void) {
    try {
      if (this.activeProvider) {
        callback(this.activeProvider);
      } else {
        console.warn('No ethereum provider available');
      }
    } catch (error) {
      console.error('Error accessing ethereum provider:', error);
    }
  }
}

// Singleton instance
export const walletProviderManager = new WalletProviderManager();

// Wallet conflicts are now handled by ethereum-protect.js loaded in index.html


================================================
FILE: frontend/src/services/advancedApiClient.ts
================================================
/**
 * Advanced API client with comprehensive error handling, retry logic, and monitoring
 */

import { EventEmitter } from 'events';

// Types
export interface ApiConfig {
  baseUrl: string;
  timeout: number;
  retryAttempts: number;
  retryDelay: number;
  rateLimit: {
    requests: number;
    windowMs: number;
  };
  circuitBreaker: {
    threshold: number;
    timeout: number;
    monitoringPeriod: number;
  };
}

export interface ApiError extends Error {
  code: string;
  status?: number;
  details?: any;
  timestamp: number;
  requestId?: string;
}

export interface ApiResponse<T = any> {
  data: T;
  status: number;
  headers: Record<string, string>;
  requestId: string;
  timestamp: number;
  processingTime: number;
}

export interface RequestOptions {
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
  headers?: Record<string, string>;
  body?: any;
  timeout?: number;
  retryAttempts?: number;
  cache?: boolean;
  signal?: AbortSignal;
}

export interface RateLimitState {
  requests: number;
  windowStart: number;
  blocked: boolean;
}

export interface CircuitBreakerState {
  state: 'closed' | 'open' | 'half-open';
  failures: number;
  lastFailureTime: number;
  nextRetryTime: number;
}

export interface ApiMetrics {
  totalRequests: number;
  successfulRequests: number;
  failedRequests: number;
  averageResponseTime: number;
  errorRate: number;
  rateLimitHits: number;
  circuitBreakerTrips: number;
}

export class AdvancedApiClient extends EventEmitter {
  private config: ApiConfig;
  private rateLimit: RateLimitState;
  private circuitBreaker: CircuitBreakerState;
  private metrics: ApiMetrics;
  private cache: Map<string, { data: any; timestamp: number; ttl: number }>;
  private requestQueue: Map<string, Promise<any>>;

  constructor(config: Partial<ApiConfig> = {}) {
    super();
    
    this.config = {
      baseUrl: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000',
      timeout: 30000,
      retryAttempts: 3,
      retryDelay: 1000,
      rateLimit: {
        requests: 100,
        windowMs: 60000
      },
      circuitBreaker: {
        threshold: 5,
        timeout: 30000,
        monitoringPeriod: 60000
      },
      ...config
    };

    this.rateLimit = {
      requests: 0,
      windowStart: Date.now(),
      blocked: false
    };

    this.circuitBreaker = {
      state: 'closed',
      failures: 0,
      lastFailureTime: 0,
      nextRetryTime: 0
    };

    this.metrics = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      averageResponseTime: 0,
      errorRate: 0,
      rateLimitHits: 0,
      circuitBreakerTrips: 0
    };

    this.cache = new Map();
    this.requestQueue = new Map();

    // Setup periodic cleanup
    setInterval(() => this.cleanup(), 60000);
  }

  /**
   * Make HTTP request with advanced error handling
   */
  async request<T = any>(
    endpoint: string, 
    options: RequestOptions = {}
  ): Promise<ApiResponse<T>> {
    const requestId = this.generateRequestId();
    const startTime = Date.now();
    
    try {
      // Check circuit breaker
      if (this.circuitBreaker.state === 'open') {
        if (Date.now() < this.circuitBreaker.nextRetryTime) {
          throw this.createError(
            'CIRCUIT_BREAKER_OPEN',
            'Circuit breaker is open',
            503
          );
        }
        this.circuitBreaker.state = 'half-open';
      }

      // Check rate limit
      if (this.isRateLimited()) {
        this.metrics.rateLimitHits++;
        throw this.createError(
          'RATE_LIMIT_EXCEEDED',
          'Rate limit exceeded',
          429
        );
      }

      // Check cache
      const cacheKey = this.getCacheKey(endpoint, options);
      if (options.cache !== false && this.cache.has(cacheKey)) {
        const cached = this.cache.get(cacheKey)!;
        if (Date.now() - cached.timestamp < cached.ttl) {
          return {
            data: cached.data,
            status: 200,
            headers: {},
            requestId,
            timestamp: Date.now(),
            processingTime: Date.now() - startTime
          };
        }
      }

      // Check for duplicate requests
      if (this.requestQueue.has(cacheKey)) {
        return await this.requestQueue.get(cacheKey);
      }

      // Make request
      const requestPromise = this.executeRequest<T>(endpoint, options, requestId, startTime);
      this.requestQueue.set(cacheKey, requestPromise);

      try {
        const response = await requestPromise;
        
        // Update metrics
        this.updateMetrics(true, Date.now() - startTime);
        
        // Reset circuit breaker on success
        if (this.circuitBreaker.state === 'half-open') {
          this.circuitBreaker.state = 'closed';
          this.circuitBreaker.failures = 0;
        }

        // Cache response if cacheable
        if (options.cache !== false && options.method !== 'POST') {
          this.cache.set(cacheKey, {
            data: response.data,
            timestamp: Date.now(),
            ttl: 300000 // 5 minutes
          });
        }

        return response;
      } finally {
        this.requestQueue.delete(cacheKey);
      }
    } catch (error) {
      this.updateMetrics(false, Date.now() - startTime);
      this.handleError(error as ApiError);
      throw error;
    }
  }

  /**
   * Execute HTTP request with retry logic
   */
  private async executeRequest<T>(
    endpoint: string,
    options: RequestOptions,
    requestId: string,
    startTime: number
  ): Promise<ApiResponse<T>> {
    const { method = 'GET', headers = {}, body, timeout, retryAttempts, signal } = options;
    const url = `${this.config.baseUrl}${endpoint}`;
    
    const requestHeaders = {
      'Content-Type': 'application/json',
      'X-Request-ID': requestId,
      'Authorization': `Bearer ${this.getAuthToken()}`,
      ...headers
    };

    const requestOptions: RequestInit = {
      method,
      headers: requestHeaders,
      body: body ? JSON.stringify(body) : undefined,
      signal
    };

    const maxRetries = retryAttempts ?? this.config.retryAttempts;
    let lastError: Error | null = null;

    for (let attempt = 0; attempt <= maxRetries; attempt++) {
      try {
        // Create timeout controller
        const timeoutController = new AbortController();
        const timeoutId = setTimeout(() => {
          timeoutController.abort();
        }, timeout ?? this.config.timeout);

        // Combine timeout and external abort signals
        const combinedSignal = this.combineAbortSignals([
          timeoutController.signal,
          signal
        ].filter(Boolean) as AbortSignal[]);

        const response = await fetch(url, {
          ...requestOptions,
          signal: combinedSignal
        });

        clearTimeout(timeoutId);

        // Handle HTTP errors
        if (!response.ok) {
          const errorBody = await response.text();
          let errorData: any;
          
          try {
            errorData = JSON.parse(errorBody);
          } catch {
            errorData = { message: errorBody };
          }

          throw this.createError(
            `HTTP_${response.status}`,
            errorData.message || response.statusText,
            response.status,
            errorData
          );
        }

        // Parse response
        const responseData = await response.json();
        
        return {
          data: responseData,
          status: response.status,
          headers: Object.fromEntries(response.headers.entries()),
          requestId,
          timestamp: Date.now(),
          processingTime: Date.now() - startTime
        };

      } catch (error) {
        lastError = error as Error;
        
        // Don't retry on certain errors
        if (
          error instanceof Error &&
          (error.name === 'AbortError' || 
           (error as any).status === 401 || 
           (error as any).status === 403 ||
           (error as any).status === 404)
        ) {
          break;
        }

        // Wait before retry
        if (attempt < maxRetries) {
          const delay = this.config.retryDelay * Math.pow(2, attempt);
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      }
    }

    throw lastError || new Error('Request failed after all retries');
  }

  /**
   * Specialized chat request
   */
  async chat(request: any): Promise<ApiResponse> {
    return this.request('/api/chat', {
      method: 'POST',
      body: request,
      cache: false
    });
  }

  /**
   * Upload files with progress tracking
   */
  async uploadFiles(
    files: File[],
    onProgress?: (progress: number) => void
  ): Promise<ApiResponse<{ file_ids: string[] }>> {
    const formData = new FormData();
    files.forEach(file => formData.append('files', file));

    const xhr = new XMLHttpRequest();
    
    return new Promise((resolve, reject) => {
      xhr.upload.onprogress = (event) => {
        if (event.lengthComputable) {
          const progress = (event.loaded / event.total) * 100;
          onProgress?.(progress);
        }
      };

      xhr.onload = () => {
        if (xhr.status >= 200 && xhr.status < 300) {
          resolve({
            data: JSON.parse(xhr.responseText),
            status: xhr.status,
            headers: {},
            requestId: this.generateRequestId(),
            timestamp: Date.now(),
            processingTime: 0
          });
        } else {
          reject(this.createError(
            `UPLOAD_ERROR_${xhr.status}`,
            'File upload failed',
            xhr.status
          ));
        }
      };

      xhr.onerror = () => {
        reject(this.createError(
          'UPLOAD_NETWORK_ERROR',
          'Network error during upload',
          0
        ));
      };

      xhr.open('POST', `${this.config.baseUrl}/api/files/upload`);
      xhr.setRequestHeader('Authorization', `Bearer ${this.getAuthToken()}`);
      xhr.send(formData);
    });
  }

  /**
   * Stream response handler
   */
  async streamResponse(
    endpoint: string,
    options: RequestOptions = {},
    onChunk?: (chunk: any) => void
  ): Promise<void> {
    const response = await fetch(`${this.config.baseUrl}${endpoint}`, {
      method: options.method || 'GET',
      headers: {
        'Authorization': `Bearer ${this.getAuthToken()}`,
        ...options.headers
      },
      body: options.body ? JSON.stringify(options.body) : undefined
    });

    if (!response.ok) {
      throw this.createError(
        `STREAM_ERROR_${response.status}`,
        'Stream request failed',
        response.status
      );
    }

    const reader = response.body?.getReader();
    if (!reader) {
      throw new Error('No readable stream');
    }

    const decoder = new TextDecoder();
    
    try {
      while (true) {
        const { done, value } = await reader.read();
        
        if (done) break;
        
        const chunk = decoder.decode(value, { stream: true });
        const lines = chunk.split('\n');
        
        for (const line of lines) {
          if (line.startsWith('data: ')) {
            try {
              const data = JSON.parse(line.slice(6));
              onChunk?.(data);
            } catch (error) {
              console.error('Error parsing SSE data:', error);
            }
          }
        }
      }
    } finally {
      reader.releaseLock();
    }
  }

  /**
   * Health check
   */
  async health(): Promise<ApiResponse> {
    return this.request('/api/health', {
      timeout: 5000,
      retryAttempts: 1
    });
  }

  /**
   * Get API metrics
   */
  getMetrics(): ApiMetrics {
    return { ...this.metrics };
  }

  /**
   * Reset metrics
   */
  resetMetrics(): void {
    this.metrics = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      averageResponseTime: 0,
      errorRate: 0,
      rateLimitHits: 0,
      circuitBreakerTrips: 0
    };
  }

  /**
   * Utility methods
   */
  private generateRequestId(): string {
    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private getAuthToken(): string {
    return localStorage.getItem('access_token') || '';
  }

  private getCacheKey(endpoint: string, options: RequestOptions): string {
    return `${options.method || 'GET'}:${endpoint}:${JSON.stringify(options.body || {})}`;
  }

  private isRateLimited(): boolean {
    const now = Date.now();
    
    // Reset window if needed
    if (now - this.rateLimit.windowStart > this.config.rateLimit.windowMs) {
      this.rateLimit.requests = 0;
      this.rateLimit.windowStart = now;
      this.rateLimit.blocked = false;
    }

    // Check if rate limited
    if (this.rateLimit.requests >= this.config.rateLimit.requests) {
      this.rateLimit.blocked = true;
      return true;
    }

    this.rateLimit.requests++;
    return false;
  }

  private updateMetrics(success: boolean, responseTime: number): void {
    this.metrics.totalRequests++;
    
    if (success) {
      this.metrics.successfulRequests++;
    } else {
      this.metrics.failedRequests++;
    }

    // Update average response time
    const totalResponseTime = this.metrics.averageResponseTime * (this.metrics.totalRequests - 1);
    this.metrics.averageResponseTime = (totalResponseTime + responseTime) / this.metrics.totalRequests;

    // Update error rate
    this.metrics.errorRate = this.metrics.failedRequests / this.metrics.totalRequests;
  }

  private handleError(error: ApiError): void {
    // Update circuit breaker
    if (this.circuitBreaker.state === 'closed' || this.circuitBreaker.state === 'half-open') {
      this.circuitBreaker.failures++;
      this.circuitBreaker.lastFailureTime = Date.now();

      if (this.circuitBreaker.failures >= this.config.circuitBreaker.threshold) {
        this.circuitBreaker.state = 'open';
        this.circuitBreaker.nextRetryTime = Date.now() + this.config.circuitBreaker.timeout;
        this.metrics.circuitBreakerTrips++;
        this.emit('circuitBreakerOpen', { error, failures: this.circuitBreaker.failures });
      }
    }

    // Emit error event
    this.emit('error', error);
  }

  private createError(code: string, message: string, status?: number, details?: any): ApiError {
    const error = new Error(message) as ApiError;
    error.code = code;
    error.status = status;
    error.details = details;
    error.timestamp = Date.now();
    return error;
  }

  private combineAbortSignals(signals: AbortSignal[]): AbortSignal {
    const controller = new AbortController();
    
    signals.forEach(signal => {
      if (signal.aborted) {
        controller.abort();
      } else {
        signal.addEventListener('abort', () => controller.abort());
      }
    });

    return controller.signal;
  }

  private cleanup(): void {
    // Clear expired cache entries
    const now = Date.now();
    for (const [key, entry] of this.cache.entries()) {
      if (now - entry.timestamp > entry.ttl) {
        this.cache.delete(key);
      }
    }

    // Reset circuit breaker if enough time has passed
    if (
      this.circuitBreaker.state === 'open' &&
      now - this.circuitBreaker.lastFailureTime > this.config.circuitBreaker.monitoringPeriod
    ) {
      this.circuitBreaker.failures = 0;
      this.circuitBreaker.state = 'closed';
    }
  }
}

// Export singleton instance
export const apiClient = new AdvancedApiClient();

// Export types for external use
export type {
  ApiConfig,
  ApiError,
  ApiResponse,
  RequestOptions,
  ApiMetrics
};


================================================
FILE: frontend/src/services/multimodal-processor.ts
================================================
/**
 * Advanced Multimodal Content Processor for HandyWriterz
 * Handles audio, video, documents, and structured data processing
 * Integrates with Gemini 2.5 Pro for context-aware analysis
 */

import { ProcessedContent, FileProcessingEvent, MultimediaInsight } from '@/types/multimodal';

export interface ProcessingProgress {
  fileId: string;
  fileName: string;
  progress: number;
  stage: 'uploading' | 'transcribing' | 'analyzing' | 'chunking' | 'embedding' | 'completed' | 'error';
  insights: MultimediaInsight[];
  processingTime: number;
  estimatedCompletion: number;
}

export interface MultimodalProcessingRequest {
  fileId: string;
  fileType: 'audio' | 'video' | 'pdf' | 'docx' | 'excel' | 'text';
  fileName: string;
  url: string;
  processingOptions: {
    useGeminiVision: boolean;
    extractCharts: boolean;
    identifySpeakers: boolean;
    preserveCitations: boolean;
    generateInsights: boolean;
  };
}

export class MultimodalProcessor {
  private baseUrl: string;
  private wsConnection: WebSocket | null = null;

  constructor(baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000') {
    this.baseUrl = baseUrl;
  }

  /**
   * Initialize WebSocket connection for real-time processing updates
   */
  initializeRealtimeConnection(traceId: string, onUpdate: (event: FileProcessingEvent) => void): void {
    const wsUrl = `${this.baseUrl.replace('http', 'ws')}/ws/files/${traceId}`;
    this.wsConnection = new WebSocket(wsUrl);

    this.wsConnection.onmessage = (event) => {
      const data = JSON.parse(event.data);
      onUpdate(data as FileProcessingEvent);
    };

    this.wsConnection.onerror = (error) => {
      console.error('WebSocket error:', error);
    };

    this.wsConnection.onclose = () => {
      console.log('WebSocket connection closed');
    };
  }

  /**
   * Process multiple files with parallel execution and progress tracking
   */
  async processFiles(
    files: MultimodalProcessingRequest[],
    traceId: string,
    onProgress?: (progress: ProcessingProgress[]) => void
  ): Promise<ProcessedContent[]> {
    try {
      const response = await fetch(`${this.baseUrl}/api/files/process-multimodal`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Trace-ID': traceId,
        },
        body: JSON.stringify({
          files,
          processingOptions: {
            maxContextWindow: 1000000, // 1M tokens for Gemini 2.5 Pro
            preserveSemanticStructure: true,
            enableRealtimeUpdates: true,
            qualityThreshold: 0.85,
          },
        }),
      });

      if (!response.ok) {
        throw new Error(`Processing failed: ${response.statusText}`);
      }

      const result = await response.json();
      return result.processedContent as ProcessedContent[];
    } catch (error) {
      console.error('Multimodal processing error:', error);
      throw error;
    }
  }

  /**
   * Process audio files with speaker identification and insight extraction
   */
  async processAudio(fileId: string, options: {
    identifySpeakers?: boolean;
    extractKeyQuotes?: boolean;
    academicAnalysis?: boolean;
  } = {}): Promise<ProcessedContent> {
    const response = await fetch(`${this.baseUrl}/api/files/process-audio/${fileId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        transcriptionEngine: 'whisper-large-v3',
        speakerIdentification: options.identifySpeakers ?? true,
        academicAnalysis: options.academicAnalysis ?? true,
        keyQuoteExtraction: options.extractKeyQuotes ?? true,
        geminiAnalysis: true,
      }),
    });

    if (!response.ok) {
      throw new Error(`Audio processing failed: ${response.statusText}`);
    }

    return response.json();
  }

  /**
   * Process video files with Gemini Vision and audio transcription
   */
  async processVideo(fileId: string, options: {
    extractFrames?: boolean;
    analyzeSlides?: boolean;
    extractCharts?: boolean;
  } = {}): Promise<ProcessedContent> {
    const response = await fetch(`${this.baseUrl}/api/files/process-video/${fileId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        geminiVisionEnabled: true,
        frameExtractionInterval: 30, // Every 30 seconds
        slideDetection: options.analyzeSlides ?? true,
        chartExtraction: options.extractCharts ?? true,
        audioTranscription: true,
        academicContentAnalysis: true,
      }),
    });

    if (!response.ok) {
      throw new Error(`Video processing failed: ${response.statusText}`);
    }

    return response.json();
  }

  /**
   * Process YouTube videos with download and analysis
   */
  async processYouTube(url: string, options: {
    maxDuration?: number;
    qualityPreference?: 'audio' | 'video' | 'both';
  } = {}): Promise<ProcessedContent> {
    const response = await fetch(`${this.baseUrl}/api/files/process-youtube`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url,
        maxDuration: options.maxDuration ?? 3600, // 1 hour max
        qualityPreference: options.qualityPreference ?? 'both',
        downloadQuality: 'best[height<=720]',
        processAudio: true,
        processVideo: true,
        geminiAnalysis: true,
      }),
    });

    if (!response.ok) {
      throw new Error(`YouTube processing failed: ${response.statusText}`);
    }

    return response.json();
  }

  /**
   * Process documents with advanced citation-aware chunking
   */
  async processDocument(fileId: string, options: {
    preserveCitations?: boolean;
    semanticChunking?: boolean;
    extractImages?: boolean;
  } = {}): Promise<ProcessedContent> {
    const response = await fetch(`${this.baseUrl}/api/files/process-document/${fileId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        useAgenticDoc: true,
        preserveCitations: options.preserveCitations ?? true,
        semanticChunking: options.semanticChunking ?? true,
        extractImages: options.extractImages ?? true,
        geminiAnalysis: true,
        academicProcessing: true,
      }),
    });

    if (!response.ok) {
      throw new Error(`Document processing failed: ${response.statusText}`);
    }

    return response.json();
  }

  /**
   * Process Excel/CSV files with data analysis and visualization
   */
  async processStructuredData(fileId: string, options: {
    generateCharts?: boolean;
    statisticalAnalysis?: boolean;
    dataInsights?: boolean;
  } = {}): Promise<ProcessedContent> {
    const response = await fetch(`${this.baseUrl}/api/files/process-data/${fileId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        pandasAnalysis: true,
        generateVisualizations: options.generateCharts ?? true,
        statisticalInsights: options.statisticalAnalysis ?? true,
        dataPatternRecognition: options.dataInsights ?? true,
        geminiDataAnalysis: true,
      }),
    });

    if (!response.ok) {
      throw new Error(`Data processing failed: ${response.statusText}`);
    }

    return response.json();
  }

  /**
   * Get processing status for multiple files
   */
  async getProcessingStatus(fileIds: string[]): Promise<ProcessingProgress[]> {
    const response = await fetch(`${this.baseUrl}/api/files/status`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ fileIds }),
    });

    if (!response.ok) {
      throw new Error(`Status check failed: ${response.statusText}`);
    }

    return response.json();
  }

  /**
   * Assemble intelligent context for Gemini 2.5 Pro
   */
  async assembleContext(
    processedFiles: ProcessedContent[],
    userPrompt: string,
    options: {
      maxTokens?: number;
      prioritizeRecent?: boolean;
      focusAreas?: string[];
    } = {}
  ): Promise<string> {
    const response = await fetch(`${this.baseUrl}/api/context/assemble`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        processedFiles,
        userPrompt,
        maxTokens: options.maxTokens ?? 900000, // Leave room for response
        prioritizeRecent: options.prioritizeRecent ?? false,
        focusAreas: options.focusAreas ?? [],
        semanticRanking: true,
        contextOptimization: true,
      }),
    });

    if (!response.ok) {
      throw new Error(`Context assembly failed: ${response.statusText}`);
    }

    const result = await response.json();
    return result.assembledContext;
  }

  /**
   * Cleanup resources and close connections
   */
  cleanup(): void {
    if (this.wsConnection) {
      this.wsConnection.close();
      this.wsConnection = null;
    }
  }
}

// Singleton instance for global use
export const multimodalProcessor = new MultimodalProcessor();


================================================
FILE: frontend/src/store/usePrefs.ts
================================================
import { create } from 'zustand';
import { persist, subscribeWithSelector } from 'zustand/middleware';
import { immer } from 'zustand/middleware/immer';

type Theme = 'light' | 'dark' | 'system';
type Language = 'en' | 'es' | 'fr' | 'de' | 'zh' | 'ja';

interface UserPrefsState {
  // Model preferences
  model: string;
  temperature: number;
  maxTokens: number;
  
  // UI preferences
  theme: Theme;
  language: Language;
  showCosts: boolean;
  autoSave: boolean;
  
  // Chat preferences
  streamingEnabled: boolean;
  codeHighlighting: boolean;
  autoScrollToBottom: boolean;
  
  // File upload preferences
  maxFileSize: number;
  allowedFileTypes: string[];
  
  // Advanced preferences
  enableExperimentalFeatures: boolean;
  debugMode: boolean;
  
  // Actions
  setModel: (model: string) => void;
  setTemperature: (temperature: number) => void;
  setMaxTokens: (maxTokens: number) => void;
  setTheme: (theme: Theme) => void;
  setLanguage: (language: Language) => void;
  setShowCosts: (showCosts: boolean) => void;
  setAutoSave: (autoSave: boolean) => void;
  setStreamingEnabled: (streamingEnabled: boolean) => void;
  setCodeHighlighting: (codeHighlighting: boolean) => void;
  setAutoScrollToBottom: (autoScrollToBottom: boolean) => void;
  setMaxFileSize: (maxFileSize: number) => void;
  setAllowedFileTypes: (allowedFileTypes: string[]) => void;
  setEnableExperimentalFeatures: (enableExperimentalFeatures: boolean) => void;
  setDebugMode: (debugMode: boolean) => void;
  resetToDefaults: () => void;
}

const defaultState = {
  model: 'gemini-2.5-pro',
  temperature: 0.7,
  maxTokens: 4096,
  theme: 'system' as Theme,
  language: 'en' as Language,
  showCosts: true,
  autoSave: true,
  streamingEnabled: true,
  codeHighlighting: true,
  autoScrollToBottom: true,
  maxFileSize: 100 * 1024 * 1024, // 100MB
  allowedFileTypes: [
    'text/plain',
    'text/markdown',
    'application/pdf',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    'image/jpeg',
    'image/png',
    'image/gif',
    'image/webp',
    'audio/mpeg',
    'audio/wav',
    'audio/ogg',
  ],
  enableExperimentalFeatures: false,
  debugMode: false,
};

export const usePrefsStore = create<UserPrefsState>()(
  subscribeWithSelector(
    persist(
      immer((set, get) => ({
        ...defaultState,
        
        setModel: (model) => set((state) => { state.model = model; }),
        setTemperature: (temperature) => set((state) => { state.temperature = Math.max(0, Math.min(2, temperature)); }),
        setMaxTokens: (maxTokens) => set((state) => { state.maxTokens = Math.max(1, Math.min(8192, maxTokens)); }),
        setTheme: (theme) => set((state) => { state.theme = theme; }),
        setLanguage: (language) => set((state) => { state.language = language; }),
        setShowCosts: (showCosts) => set((state) => { state.showCosts = showCosts; }),
        setAutoSave: (autoSave) => set((state) => { state.autoSave = autoSave; }),
        setStreamingEnabled: (streamingEnabled) => set((state) => { state.streamingEnabled = streamingEnabled; }),
        setCodeHighlighting: (codeHighlighting) => set((state) => { state.codeHighlighting = codeHighlighting; }),
        setAutoScrollToBottom: (autoScrollToBottom) => set((state) => { state.autoScrollToBottom = autoScrollToBottom; }),
        setMaxFileSize: (maxFileSize) => set((state) => { state.maxFileSize = Math.max(1024 * 1024, maxFileSize); }),
        setAllowedFileTypes: (allowedFileTypes) => set((state) => { state.allowedFileTypes = allowedFileTypes; }),
        setEnableExperimentalFeatures: (enableExperimentalFeatures) => set((state) => { state.enableExperimentalFeatures = enableExperimentalFeatures; }),
        setDebugMode: (debugMode) => set((state) => { state.debugMode = debugMode; }),
        
        resetToDefaults: () => set((state) => {
          Object.assign(state, defaultState);
        }),
      })),
      {
        name: 'handywriterz-user-preferences',
        version: 2,
        migrate: (persistedState: any, version: number) => {
          if (version < 2) {
            return {
              ...defaultState,
              model: persistedState?.model || defaultState.model,
            };
          }
          return persistedState;
        },
      }
    )
  )
);

// Convenience hooks for specific preferences
export const useModelPrefs = () => usePrefsStore((state) => ({
  model: state.model,
  temperature: state.temperature,
  maxTokens: state.maxTokens,
  setModel: state.setModel,
  setTemperature: state.setTemperature,
  setMaxTokens: state.setMaxTokens,
}));

export const useUIPrefs = () => usePrefsStore((state) => ({
  theme: state.theme,
  language: state.language,
  showCosts: state.showCosts,
  autoSave: state.autoSave,
  setTheme: state.setTheme,
  setLanguage: state.setLanguage,
  setShowCosts: state.setShowCosts,
  setAutoSave: state.setAutoSave,
}));

export const useChatPrefs = () => usePrefsStore((state) => ({
  streamingEnabled: state.streamingEnabled,
  codeHighlighting: state.codeHighlighting,
  autoScrollToBottom: state.autoScrollToBottom,
  setStreamingEnabled: state.setStreamingEnabled,
  setCodeHighlighting: state.setCodeHighlighting,
  setAutoScrollToBottom: state.setAutoScrollToBottom,
}));

export const useFileUploadPrefs = () => usePrefsStore((state) => ({
  maxFileSize: state.maxFileSize,
  allowedFileTypes: state.allowedFileTypes,
  setMaxFileSize: state.setMaxFileSize,
  setAllowedFileTypes: state.setAllowedFileTypes,
}));


================================================
FILE: frontend/src/types/api.ts
================================================
// API Client Types
export interface ApiClientConfig {
  baseUrl: string;
  timeout: number;
  retries: number;
  retryDelay: number;
  headers: Record<string, string>;
}

export interface ApiRequestOptions {
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
  headers?: Record<string, string>;
  body?: unknown;
  timeout?: number;
  retries?: number;
  cache?: RequestCache;
  next?: NextFetchRequestConfig;
}

export interface ApiError {
  code: string;
  message: string;
  status: number;
  details?: Record<string, unknown>;
  timestamp: string;
  requestId?: string;
}

export interface ApiSuccessResponse<T = unknown> {
  success: true;
  data: T;
  message?: string;
  timestamp: string;
  requestId?: string;
}

export interface ApiErrorResponse {
  success: false;
  error: ApiError;
  timestamp: string;
  requestId?: string;
}

export type ApiResponse<T = unknown> = ApiSuccessResponse<T> | ApiErrorResponse;

// Specific API Endpoints
export interface ChatRequest {
  prompt: string;
  mode: string;
  fileIds: string[];
  model: string;
  temperature?: number;
  maxTokens?: number;
  streamingEnabled?: boolean;
}

export interface ChatResponse {
  conversationId: string;
  message: string;
  sources: Source[];
  metadata: {
    model: string;
    tokenCount: number;
    cost: number;
    processingTime: number;
  };
}

export interface FileUploadRequest {
  file: File;
  metadata?: Record<string, unknown>;
}

export interface FileUploadResponse {
  fileId: string;
  url: string;
  metadata: {
    name: string;
    size: number;
    type: string;
    extractedText?: string;
  };
}

export interface UserProfileResponse {
  user: User;
  subscription: Subscription;
  usage: {
    tokensUsed: number;
    tokensLimit: number;
    documentsGenerated: number;
    documentsLimit: number;
  };
}

export interface ModelConfigResponse {
  models: Array<{
    id: string;
    name: string;
    provider: string;
    maxTokens: number;
    costPerToken: number;
    capabilities: string[];
    availability: 'available' | 'limited' | 'unavailable';
  }>;
}

export interface ConversationListResponse {
  conversations: Conversation[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}

export interface DocumentDownloadResponse {
  downloadUrl: string;
  expiresAt: string;
  format: string;
  size: number;
}


================================================
FILE: frontend/src/types/components.ts
================================================
import { ReactNode } from 'react';
import { VariantProps } from 'class-variance-authority';

// Base Component Props
export interface BaseProps {
  className?: string;
  children?: ReactNode;
  'data-testid'?: string;
}

// Button Component Types
export interface ButtonProps extends BaseProps {
  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';
  size?: 'default' | 'sm' | 'lg' | 'icon';
  disabled?: boolean;
  loading?: boolean;
  onClick?: () => void;
  type?: 'button' | 'submit' | 'reset';
  asChild?: boolean;
}

// Input Component Types
export interface InputProps extends BaseProps {
  type?: 'text' | 'email' | 'password' | 'number' | 'search' | 'tel' | 'url';
  placeholder?: string;
  value?: string;
  defaultValue?: string;
  onChange?: (value: string) => void;
  onFocus?: () => void;
  onBlur?: () => void;
  disabled?: boolean;
  required?: boolean;
  error?: string;
  label?: string;
  description?: string;
}

// Select Component Types
export interface SelectOption {
  value: string;
  label: string;
  disabled?: boolean;
  description?: string;
}

export interface SelectProps extends BaseProps {
  options: SelectOption[];
  value?: string;
  defaultValue?: string;
  onChange?: (value: string) => void;
  placeholder?: string;
  disabled?: boolean;
  required?: boolean;
  error?: string;
  label?: string;
  description?: string;
  multiple?: boolean;
}

// Textarea Component Types
export interface TextareaProps extends BaseProps {
  placeholder?: string;
  value?: string;
  defaultValue?: string;
  onChange?: (value: string) => void;
  onFocus?: () => void;
  onBlur?: () => void;
  disabled?: boolean;
  required?: boolean;
  error?: string;
  label?: string;
  description?: string;
  rows?: number;
  autoResize?: boolean;
  maxLength?: number;
}

// Modal Component Types
export interface ModalProps extends BaseProps {
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
  title?: string;
  description?: string;
  size?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full';
  closable?: boolean;
  overlay?: boolean;
  trigger?: ReactNode;
}

// Loading Component Types
export interface LoadingProps extends BaseProps {
  size?: 'sm' | 'md' | 'lg';
  variant?: 'spinner' | 'dots' | 'pulse' | 'skeleton';
  text?: string;
  fullscreen?: boolean;
  overlay?: boolean;
}

// Error Component Types
export interface ErrorProps extends BaseProps {
  error: Error | string;
  title?: string;
  description?: string;
  onRetry?: () => void;
  showDetails?: boolean;
  variant?: 'default' | 'destructive' | 'warning';
}

// Toast Component Types
export interface ToastProps {
  id: string;
  title?: string;
  description?: string;
  variant?: 'default' | 'destructive' | 'success' | 'warning' | 'info';
  duration?: number;
  action?: {
    label: string;
    onClick: () => void;
  };
  onClose?: () => void;
}

// Tooltip Component Types
export interface TooltipProps extends BaseProps {
  content: ReactNode;
  side?: 'top' | 'right' | 'bottom' | 'left';
  align?: 'start' | 'center' | 'end';
  delay?: number;
  disabled?: boolean;
  trigger?: ReactNode;
}

// Card Component Types
export interface CardProps extends BaseProps {
  variant?: 'default' | 'elevated' | 'outline' | 'ghost';
  padding?: 'none' | 'sm' | 'md' | 'lg';
  header?: ReactNode;
  footer?: ReactNode;
  loading?: boolean;
  error?: string;
}

// Badge Component Types
export interface BadgeProps extends BaseProps {
  variant?: 'default' | 'secondary' | 'destructive' | 'outline' | 'success' | 'warning' | 'info';
  size?: 'sm' | 'md' | 'lg';
  dot?: boolean;
  count?: number;
}

// Avatar Component Types
export interface AvatarProps extends BaseProps {
  src?: string;
  alt?: string;
  fallback?: string;
  size?: 'sm' | 'md' | 'lg' | 'xl';
  variant?: 'circular' | 'rounded' | 'square';
  status?: 'online' | 'offline' | 'away' | 'busy';
}

// Navigation Component Types
export interface NavigationItem {
  id: string;
  label: string;
  href?: string;
  icon?: ReactNode;
  badge?: string | number;
  disabled?: boolean;
  children?: NavigationItem[];
}

export interface NavigationProps extends BaseProps {
  items: NavigationItem[];
  activeId?: string;
  onNavigate?: (item: NavigationItem) => void;
  collapsible?: boolean;
  collapsed?: boolean;
  onCollapseChange?: (collapsed: boolean) => void;
}

// Table Component Types
export interface TableColumn<T = unknown> {
  id: string;
  label: string;
  sortable?: boolean;
  width?: string | number;
  minWidth?: string | number;
  maxWidth?: string | number;
  align?: 'left' | 'center' | 'right';
  render?: (value: unknown, row: T, index: number) => ReactNode;
  accessor?: keyof T | ((row: T) => unknown);
}

export interface TableProps<T = unknown> extends BaseProps {
  columns: TableColumn<T>[];
  data: T[];
  loading?: boolean;
  error?: string;
  emptyMessage?: string;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
  onSort?: (column: string, order: 'asc' | 'desc') => void;
  pagination?: {
    page: number;
    limit: number;
    total: number;
    onPageChange: (page: number) => void;
    onLimitChange: (limit: number) => void;
  };
  selection?: {
    selectedRows: string[];
    onSelectionChange: (selectedRows: string[]) => void;
    getRowId: (row: T) => string;
  };
}

// Form Component Types
export interface FormFieldProps extends BaseProps {
  name: string;
  label?: string;
  description?: string;
  required?: boolean;
  error?: string;
  disabled?: boolean;
}

export interface FormProps extends BaseProps {
  onSubmit?: (data: Record<string, unknown>) => void | Promise<void>;
  onReset?: () => void;
  loading?: boolean;
  disabled?: boolean;
  schema?: any; // Zod schema
  defaultValues?: Record<string, unknown>;
}

// Chat Component Types
export interface ChatMessageProps extends BaseProps {
  message: ChatMessage;
  isOwn?: boolean;
  showAvatar?: boolean;
  showTimestamp?: boolean;
  onEdit?: (messageId: string, content: string) => void;
  onDelete?: (messageId: string) => void;
  onReply?: (messageId: string) => void;
}

export interface ChatInputProps extends BaseProps {
  value?: string;
  onChange?: (value: string) => void;
  onSubmit?: (message: string) => void;
  onFileUpload?: (files: File[]) => void;
  loading?: boolean;
  disabled?: boolean;
  placeholder?: string;
  maxLength?: number;
  allowFileUpload?: boolean;
  allowVoiceInput?: boolean;
  autoFocus?: boolean;
}

// File Upload Component Types
export interface FileUploadProps extends BaseProps {
  accept?: string;
  multiple?: boolean;
  maxSize?: number;
  maxFiles?: number;
  onUpload?: (files: File[]) => void;
  onProgress?: (progress: number) => void;
  onError?: (error: string) => void;
  onComplete?: (files: FileUpload[]) => void;
  disabled?: boolean;
  dragAndDrop?: boolean;
  preview?: boolean;
}

// Search Component Types
export interface SearchProps extends BaseProps {
  value?: string;
  onChange?: (value: string) => void;
  onSearch?: (query: string) => void;
  placeholder?: string;
  suggestions?: string[];
  loading?: boolean;
  disabled?: boolean;
  debounceMs?: number;
  showClearButton?: boolean;
}

// Data Visualization Component Types
export interface ChartProps extends BaseProps {
  data: unknown[];
  type: 'line' | 'bar' | 'pie' | 'doughnut' | 'radar' | 'scatter';
  options?: Record<string, unknown>;
  loading?: boolean;
  error?: string;
  height?: number;
  width?: number;
}

// Advanced Component Types
export interface VirtualizedListProps<T = unknown> extends BaseProps {
  items: T[];
  itemHeight: number;
  renderItem: (item: T, index: number) => ReactNode;
  overscan?: number;
  loading?: boolean;
  error?: string;
  emptyMessage?: string;
  onEndReached?: () => void;
  onRefresh?: () => void;
}

export interface InfiniteScrollProps extends BaseProps {
  hasMore: boolean;
  loading: boolean;
  onLoadMore: () => void;
  loader?: ReactNode;
  endMessage?: ReactNode;
  threshold?: number;
}

// Layout Component Types
export interface LayoutProps extends BaseProps {
  sidebar?: ReactNode;
  header?: ReactNode;
  footer?: ReactNode;
  sidebarCollapsed?: boolean;
  onSidebarToggle?: () => void;
}

export interface GridProps extends BaseProps {
  columns?: number | Record<string, number>;
  gap?: number | string;
  align?: 'start' | 'center' | 'end' | 'stretch';
  justify?: 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly';
}

export interface StackProps extends BaseProps {
  direction?: 'horizontal' | 'vertical';
  spacing?: number | string;
  align?: 'start' | 'center' | 'end' | 'stretch';
  justify?: 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly';
  wrap?: boolean;
}


================================================
FILE: frontend/src/types/hooks.ts
================================================
import { MutableRefObject } from 'react';

// Hook Return Types
export interface UseAsyncState<T> {
  data: T | null;
  loading: boolean;
  error: Error | null;
  execute: (...args: unknown[]) => Promise<T>;
  reset: () => void;
}

export interface UseAsyncOptions {
  immediate?: boolean;
  onSuccess?: (data: unknown) => void;
  onError?: (error: Error) => void;
  retries?: number;
  retryDelay?: number;
}

export interface UseApiState<T> {
  data: T | null;
  loading: boolean;
  error: Error | null;
  refetch: () => Promise<void>;
  mutate: (data: T | ((prev: T | null) => T)) => void;
}

export interface UseApiOptions<T> {
  immediate?: boolean;
  onSuccess?: (data: T) => void;
  onError?: (error: Error) => void;
  retries?: number;
  retryDelay?: number;
  staleTime?: number;
  cacheTime?: number;
  refetchOnWindowFocus?: boolean;
  refetchOnMount?: boolean;
}

export interface UseLocalStorageState<T> {
  value: T;
  setValue: (value: T | ((prev: T) => T)) => void;
  removeValue: () => void;
}

export interface UseLocalStorageOptions<T> {
  serializer?: {
    read: (value: string) => T;
    write: (value: T) => string;
  };
  onError?: (error: Error) => void;
}

export interface UseSessionStorageState<T> {
  value: T;
  setValue: (value: T | ((prev: T) => T)) => void;
  removeValue: () => void;
}

export interface UseDebounceOptions {
  leading?: boolean;
  trailing?: boolean;
  maxWait?: number;
}

export interface UseThrottleOptions {
  leading?: boolean;
  trailing?: boolean;
}

export interface UseIntersectionObserverOptions {
  threshold?: number | number[];
  root?: Element | null;
  rootMargin?: string;
  triggerOnce?: boolean;
}

export interface UseIntersectionObserverState {
  isIntersecting: boolean;
  entry: IntersectionObserverEntry | null;
  ref: MutableRefObject<Element | null>;
}

export interface UseMediaQueryState {
  matches: boolean;
  media: string;
}

export interface UseElementSizeState {
  width: number;
  height: number;
  ref: MutableRefObject<Element | null>;
}

export interface UseScrollState {
  x: number;
  y: number;
  isScrolling: boolean;
  direction: {
    x: 'left' | 'right' | null;
    y: 'up' | 'down' | null;
  };
}

export interface UseClipboardState {
  value: string;
  copy: (text: string) => Promise<void>;
  copied: boolean;
  error: Error | null;
}

export interface UseClipboardOptions {
  timeout?: number;
  onSuccess?: () => void;
  onError?: (error: Error) => void;
}

export interface UseGeolocationState {
  position: GeolocationPosition | null;
  error: GeolocationPositionError | null;
  loading: boolean;
  getCurrentPosition: () => Promise<GeolocationPosition>;
}

export interface UseGeolocationOptions {
  enableHighAccuracy?: boolean;
  timeout?: number;
  maximumAge?: number;
}

export interface UseNetworkState {
  online: boolean;
  effectiveType: string;
  saveData: boolean;
  downlink: number;
  rtt: number;
}

export interface UseBatteryState {
  charging: boolean;
  chargingTime: number;
  dischargingTime: number;
  level: number;
  supported: boolean;
}

export interface UseKeyboardState {
  pressed: Set<string>;
  isPressed: (key: string) => boolean;
  combinations: Map<string, boolean>;
  isCombinationPressed: (combination: string) => boolean;
}

export interface UseKeyboardOptions {
  preventDefault?: boolean;
  stopPropagation?: boolean;
  target?: Element | Window;
}

export interface UseHoverState {
  isHovered: boolean;
  ref: MutableRefObject<Element | null>;
}

export interface UseFocusState {
  isFocused: boolean;
  ref: MutableRefObject<Element | null>;
}

export interface UseClickAwayState {
  ref: MutableRefObject<Element | null>;
}

export interface UseFormState<T> {
  values: T;
  errors: Partial<Record<keyof T, string>>;
  touched: Partial<Record<keyof T, boolean>>;
  isValid: boolean;
  isSubmitting: boolean;
  isDirty: boolean;
  setValue: (field: keyof T, value: T[keyof T]) => void;
  setError: (field: keyof T, error: string) => void;
  setTouched: (field: keyof T, touched: boolean) => void;
  handleSubmit: (onSubmit: (values: T) => void | Promise<void>) => (event: React.FormEvent) => void;
  reset: () => void;
}

export interface UseFormOptions<T> {
  initialValues: T;
  validate?: (values: T) => Partial<Record<keyof T, string>>;
  onSubmit?: (values: T) => void | Promise<void>;
  validateOnChange?: boolean;
  validateOnBlur?: boolean;
}

export interface UseSearchState<T> {
  query: string;
  results: T[];
  loading: boolean;
  error: Error | null;
  setQuery: (query: string) => void;
  search: (query: string) => Promise<T[]>;
  reset: () => void;
}

export interface UseSearchOptions<T> {
  searchFn: (query: string) => Promise<T[]>;
  debounceMs?: number;
  minQueryLength?: number;
  maxResults?: number;
  cacheResults?: boolean;
}

export interface UsePaginationState {
  page: number;
  limit: number;
  total: number;
  totalPages: number;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
  setPage: (page: number) => void;
  setLimit: (limit: number) => void;
  nextPage: () => void;
  previousPage: () => void;
  firstPage: () => void;
  lastPage: () => void;
}

export interface UsePaginationOptions {
  initialPage?: number;
  initialLimit?: number;
  total: number;
  onPageChange?: (page: number) => void;
  onLimitChange?: (limit: number) => void;
}

export interface UseInfiniteScrollState<T> {
  items: T[];
  hasMore: boolean;
  loading: boolean;
  error: Error | null;
  loadMore: () => Promise<void>;
  reset: () => void;
}

export interface UseInfiniteScrollOptions<T> {
  fetchFn: (page: number, limit: number) => Promise<{ items: T[]; hasMore: boolean }>;
  limit?: number;
  threshold?: number;
  onError?: (error: Error) => void;
}

export interface UseWebSocketState {
  readyState: number;
  lastMessage: MessageEvent | null;
  connectionStatus: 'Connecting' | 'Open' | 'Closing' | 'Closed' | 'Uninstantiated';
  send: (message: string | ArrayBuffer | Blob) => void;
  connect: () => void;
  disconnect: () => void;
}

export interface UseWebSocketOptions {
  onOpen?: (event: Event) => void;
  onClose?: (event: CloseEvent) => void;
  onMessage?: (event: MessageEvent) => void;
  onError?: (event: Event) => void;
  reconnect?: boolean;
  reconnectInterval?: number;
  reconnectAttempts?: number;
}

export interface UseFileUploadState {
  files: File[];
  uploading: boolean;
  progress: number;
  error: Error | null;
  uploadedFiles: FileUpload[];
  addFiles: (files: File[]) => void;
  removeFile: (index: number) => void;
  upload: () => Promise<void>;
  reset: () => void;
}

export interface UseFileUploadOptions {
  uploadFn: (files: File[], onProgress?: (progress: number) => void) => Promise<FileUpload[]>;
  maxSize?: number;
  maxFiles?: number;
  accept?: string;
  onSuccess?: (files: FileUpload[]) => void;
  onError?: (error: Error) => void;
}

export interface UseAudioRecordingState {
  recording: boolean;
  paused: boolean;
  duration: number;
  audioBlob: Blob | null;
  audioUrl: string | null;
  startRecording: () => Promise<void>;
  stopRecording: () => void;
  pauseRecording: () => void;
  resumeRecording: () => void;
  reset: () => void;
}

export interface UseAudioRecordingOptions {
  onStart?: () => void;
  onStop?: (blob: Blob) => void;
  onError?: (error: Error) => void;
  maxDuration?: number;
  mimeType?: string;
}

export interface UseScreenCaptureState {
  capturing: boolean;
  stream: MediaStream | null;
  error: Error | null;
  startCapture: () => Promise<void>;
  stopCapture: () => void;
}

export interface UseScreenCaptureOptions {
  onStart?: (stream: MediaStream) => void;
  onStop?: () => void;
  onError?: (error: Error) => void;
  video?: boolean;
  audio?: boolean;
}

export interface UseNotificationState {
  permission: NotificationPermission;
  notify: (title: string, options?: NotificationOptions) => Promise<void>;
  requestPermission: () => Promise<NotificationPermission>;
}

export interface UseNotificationOptions {
  onShow?: (notification: Notification) => void;
  onClick?: (notification: Notification) => void;
  onClose?: (notification: Notification) => void;
  onError?: (error: Error) => void;
}


================================================
FILE: frontend/src/types/index.ts
================================================
// Core API Types
export interface ApiResponse<T = unknown> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
  timestamp: string;
}

export interface PaginatedResponse<T> extends ApiResponse<T[]> {
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
  };
}

// User and Authentication Types
export interface User {
  id: string;
  email: string;
  username: string;
  avatar?: string;
  walletAddress?: string;
  createdAt: string;
  updatedAt: string;
  subscription?: Subscription;
  preferences: UserPreferences;
}

export interface Subscription {
  id: string;
  plan: 'free' | 'pro' | 'enterprise';
  status: 'active' | 'inactive' | 'cancelled' | 'past_due';
  currentPeriodEnd: string;
  cancelAtPeriodEnd: boolean;
  usage: {
    tokensUsed: number;
    tokensLimit: number;
    documentsGenerated: number;
    documentsLimit: number;
  };
}

export interface UserPreferences {
  model: string;
  temperature: number;
  maxTokens: number;
  theme: 'light' | 'dark' | 'system';
  language: string;
  notifications: {
    email: boolean;
    browser: boolean;
    marketing: boolean;
  };
}

// Chat and Conversation Types
export interface ChatMessage {
  id: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
  timestamp: string;
  metadata?: {
    model?: string;
    tokenCount?: number;
    cost?: number;
    processingTime?: number;
  };
}

// LangGraph-compatible Message type
export interface Message {
  id?: string;
  content: string;
  type: "human" | "ai" | "system";
  timestamp?: string;
  additional_kwargs?: Record<string, any>;
}

export interface Conversation {
  id: string;
  title: string;
  messages: ChatMessage[];
  status: 'active' | 'completed' | 'failed' | 'cancelled';
  createdAt: string;
  updatedAt: string;
  metadata: {
    model: string;
    mode: DocumentMode;
    totalTokens: number;
    totalCost: number;
    processingTime: number;
  };
}

export type DocumentMode = 
  | 'general'
  | 'essay'
  | 'report'
  | 'dissertation'
  | 'case_study'
  | 'case_scenario'
  | 'critical_review'
  | 'database_search'
  | 'reflection'
  | 'document_analysis'
  | 'presentation'
  | 'poster'
  | 'exam_prep';

// File Upload Types
export interface FileUpload {
  id: string;
  name: string;
  type: string;
  size: number;
  url: string;
  status: 'uploading' | 'processing' | 'completed' | 'failed';
  progress: number;
  metadata?: {
    pages?: number;
    wordCount?: number;
    extractedText?: string;
    embedding?: number[];
  };
  createdAt: string;
}

export interface FileUploadProgress {
  fileId: string;
  progress: number;
  status: FileUpload['status'];
  error?: string;
}

// Research and Source Types
export interface Source {
  id: string;
  title: string;
  url: string;
  type: 'academic' | 'web' | 'book' | 'journal' | 'news' | 'other';
  authors?: string[];
  publicationDate?: string;
  summary: string;
  relevanceScore: number;
  credibilityScore: number;
  metadata?: {
    doi?: string;
    isbn?: string;
    journal?: string;
    volume?: string;
    issue?: string;
    pages?: string;
  };
}

export interface ResearchQuery {
  query: string;
  filters?: {
    dateRange?: {
      start?: string;
      end?: string;
    };
    sourceTypes?: Source['type'][];
    minCredibilityScore?: number;
    languages?: string[];
  };
  limit?: number;
}

// Document Generation Types
export interface DocumentGeneration {
  id: string;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  progress: number;
  stages: GenerationStage[];
  result?: GeneratedDocument;
  error?: string;
  createdAt: string;
  updatedAt: string;
}

export interface GenerationStage {
  name: string;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  progress: number;
  startTime?: string;
  endTime?: string;
  details?: string;
}

export interface GeneratedDocument {
  id: string;
  title: string;
  content: string;
  format: 'markdown' | 'html' | 'docx' | 'pdf';
  wordCount: number;
  metadata: {
    mode: DocumentMode;
    sources: Source[];
    qualityScore: number;
    plagiarismScore: number;
    readabilityScore: number;
    citations: Citation[];
  };
  downloadUrls: {
    docx?: string;
    pdf?: string;
    html?: string;
    markdown?: string;
  };
}

export interface Citation {
  id: string;
  sourceId: string;
  text: string;
  pageNumber?: number;
  style: 'APA' | 'MLA' | 'Chicago' | 'Harvard' | 'IEEE';
  inText: string;
  bibliography: string;
}

// Agent Activity Types
export interface AgentActivity {
  id: string;
  agentName: string;
  action: string;
  status: 'started' | 'in_progress' | 'completed' | 'failed';
  progress: number;
  startTime: string;
  endTime?: string;
  details?: string;
  metadata?: Record<string, unknown>;
}

// Error Types
export interface AppError {
  code: string;
  message: string;
  details?: Record<string, unknown>;
  timestamp: string;
  stack?: string;
}

export interface ValidationError {
  field: string;
  message: string;
  code: string;
}

// WebSocket Types
export interface WebSocketMessage<T = unknown> {
  type: string;
  data: T;
  timestamp: string;
  id?: string;
}

export interface StreamingResponse {
  type: 'content' | 'agent_activity' | 'cost_update' | 'error' | 'complete';
  data: unknown;
  conversationId: string;
  timestamp: string;
}

// Form Types
export interface ChatFormData {
  prompt: string;
  mode: DocumentMode;
  fileIds: string[];
  model: string;
  temperature: number;
  maxTokens: number;
}

export interface SettingsFormData {
  model: string;
  temperature: number;
  maxTokens: number;
  theme: 'light' | 'dark' | 'system';
  language: string;
  notifications: {
    email: boolean;
    browser: boolean;
    marketing: boolean;
  };
}

// Utility Types
export type Status = 'idle' | 'loading' | 'success' | 'error';

export type AsyncState<T> = {
  data: T | null;
  status: Status;
  error: string | null;
};

export type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;

export type RequiredKeys<T, K extends keyof T> = T & Required<Pick<T, K>>;

// Component Props Types
export interface BaseComponentProps {
  className?: string;
  children?: React.ReactNode;
}

export interface LoadingProps extends BaseComponentProps {
  size?: 'sm' | 'md' | 'lg';
  variant?: 'spinner' | 'dots' | 'pulse';
  text?: string;
}

export interface ErrorProps extends BaseComponentProps {
  error: Error | string;
  onRetry?: () => void;
  showDetails?: boolean;
}

// Advanced Type Helpers
export type DeepPartial<T> = {
  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};

export type Prettify<T> = {
  [K in keyof T]: T[K];
} & {};

export type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;

export type IsEqual<X, Y> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? true : false;

export type IsAny<T> = 0 extends 1 & T ? true : false;

export type IsNever<T> = [T] extends [never] ? true : false;

export type IsUnion<T> = IsNever<T> extends true ? false : T extends any ? IsEqual<T, any> extends true ? false : true : false;

// Event Types
export interface CustomEvent<T = unknown> {
  type: string;
  data: T;
  timestamp: string;
  source?: string;
}

export type EventHandler<T = unknown> = (event: CustomEvent<T>) => void;

// Types are exported individually above


================================================
FILE: frontend/src/types/multimodal.ts
================================================
/**
 * TypeScript types for advanced multimodal content processing
 * Supports audio, video, documents, and structured data
 */

export interface MultimediaInsight {
  type: 'speaker_identification' | 'key_quote' | 'technical_concept' | 'statistical_finding' | 'visual_element';
  content: string;
  confidence: number;
  timestamp?: number; // For audio/video content
  pageNumber?: number; // For document content
  metadata: {
    speaker?: string;
    expertise_area?: string;
    citation_count?: number;
    academic_relevance?: number;
  };
}

export interface ProcessedContent {
  fileId: string;
  fileName: string;
  fileType: 'audio' | 'video' | 'pdf' | 'docx' | 'excel' | 'text' | 'youtube';
  processingStatus: 'completed' | 'processing' | 'error';
  
  // Core content
  chunks: ContentChunk[];
  
  // Extracted insights
  insights: MultimediaInsight[];
  
  // Processing metadata
  processingTime: number;
  tokensGenerated: number;
  qualityScore: number;
  
  // Type-specific content
  audioContent?: AudioProcessingResult;
  videoContent?: VideoProcessingResult;
  documentContent?: DocumentProcessingResult;
  dataContent?: DataProcessingResult;
  
  // Academic integration
  citations: ExtractedCitation[];
  keyFindings: string[];
  academicRelevance: number;
  
  // Integration readiness
  contextIntegrationScore: number;
  embeddings: number[];
}

export interface ContentChunk {
  chunkId: string;
  content: string;
  wordCount: number;
  semanticType: 'introduction' | 'methodology' | 'findings' | 'discussion' | 'conclusion' | 'citation' | 'data';
  importance: number; // 0-1 relevance score
  citations: string[];
  timestamp?: number; // For audio/video
  pageNumber?: number; // For documents
  embeddings: number[];
}

export interface AudioProcessingResult {
  transcription: string;
  speakerSegments: SpeakerSegment[];
  keyQuotes: KeyQuote[];
  audioQuality: number;
  duration: number;
  processingEngine: 'whisper-large-v3' | 'whisper-large-v2';
}

export interface SpeakerSegment {
  speakerId: string;
  speakerName?: string;
  startTime: number;
  endTime: number;
  text: string;
  confidence: number;
  expertiseArea?: string;
  credibilityScore?: number;
}

export interface KeyQuote {
  text: string;
  speaker: string;
  timestamp: number;
  academicRelevance: number;
  citationPotential: number;
  context: string;
}

export interface VideoProcessingResult {
  audioTranscription: AudioProcessingResult;
  visualAnalysis: VisualAnalysisResult;
  slides: ExtractedSlide[];
  charts: ExtractedChart[];
  keyFrames: KeyFrame[];
  duration: number;
  resolution: string;
}

export interface VisualAnalysisResult {
  slideCount: number;
  chartCount: number;
  textExtractions: TextExtraction[];
  academicContent: AcademicVisualContent[];
  geminiAnalysis: string;
}

export interface ExtractedSlide {
  slideNumber: number;
  timestamp: number;
  title?: string;
  content: string;
  visualElements: VisualElement[];
  academicValue: number;
}

export interface ExtractedChart {
  chartType: 'bar' | 'line' | 'pie' | 'scatter' | 'table' | 'flow' | 'other';
  timestamp: number;
  title: string;
  data: ChartDataPoint[];
  insights: string[];
  statisticalSignificance?: number;
}

export interface ChartDataPoint {
  label: string;
  value: number | string;
  category?: string;
}

export interface KeyFrame {
  timestamp: number;
  description: string;
  academicRelevance: number;
  visualElements: VisualElement[];
}

export interface VisualElement {
  type: 'text' | 'chart' | 'diagram' | 'equation' | 'table';
  boundingBox: { x: number; y: number; width: number; height: number };
  content: string;
  confidence: number;
}

export interface TextExtraction {
  text: string;
  confidence: number;
  boundingBox: { x: number; y: number; width: number; height: number };
  fontSize?: number;
  fontWeight?: string;
}

export interface AcademicVisualContent {
  type: 'research_finding' | 'methodology_diagram' | 'statistical_chart' | 'theoretical_model';
  content: string;
  academicValue: number;
  citationPotential: number;
}

export interface DocumentProcessingResult {
  pageCount: number;
  wordCount: number;
  citationCount: number;
  sections: DocumentSection[];
  extractedImages: ExtractedImage[];
  references: ExtractedCitation[];
  agenticDocAnalysis: AgenticDocResult;
}

export interface DocumentSection {
  sectionType: 'title' | 'abstract' | 'introduction' | 'methodology' | 'results' | 'discussion' | 'conclusion' | 'references';
  title: string;
  content: string;
  pageNumbers: number[];
  wordCount: number;
  citationCount: number;
  academicQuality: number;
}

export interface ExtractedImage {
  imageId: string;
  pageNumber: number;
  caption?: string;
  description: string;
  type: 'chart' | 'diagram' | 'photo' | 'equation' | 'table';
  academicRelevance: number;
}

export interface ExtractedCitation {
  citationId: string;
  citationText: string;
  authors: string[];
  title: string;
  journal?: string;
  year: number;
  doi?: string;
  citationStyle: 'APA' | 'MLA' | 'Chicago' | 'Harvard' | 'IEEE';
  pageNumbers: number[];
  contextSentences: string[];
  academicCredibility: number;
}

export interface AgenticDocResult {
  semanticStructure: SemanticStructure;
  researchQuality: number;
  citationAccuracy: number;
  methodologicalSoundness: number;
  originalityScore: number;
  keyContributions: string[];
}

export interface SemanticStructure {
  hierarchicalSections: HierarchicalSection[];
  argumentFlow: ArgumentConnection[];
  evidenceChain: EvidenceLink[];
  conceptualFramework: ConceptualNode[];
}

export interface HierarchicalSection {
  level: number;
  title: string;
  content: string;
  subsections: HierarchicalSection[];
  academicFunction: string;
}

export interface ArgumentConnection {
  fromSection: string;
  toSection: string;
  connectionType: 'support' | 'contrast' | 'extension' | 'application';
  strength: number;
}

export interface EvidenceLink {
  claim: string;
  evidence: string[];
  evidenceType: 'empirical' | 'theoretical' | 'anecdotal' | 'statistical';
  strength: number;
}

export interface ConceptualNode {
  concept: string;
  definition: string;
  relationships: ConceptRelationship[];
  academicDiscipline: string[];
}

export interface ConceptRelationship {
  relatedConcept: string;
  relationshipType: 'is-a' | 'part-of' | 'causes' | 'enables' | 'contradicts';
  strength: number;
}

export interface DataProcessingResult {
  rowCount: number;
  columnCount: number;
  dataTypes: DataColumnInfo[];
  statisticalSummary: StatisticalSummary;
  correlations: CorrelationAnalysis[];
  patterns: DataPattern[];
  visualizations: GeneratedVisualization[];
  economicInsights?: EconomicAnalysis;
}

export interface DataColumnInfo {
  columnName: string;
  dataType: 'numeric' | 'categorical' | 'datetime' | 'text';
  nullCount: number;
  uniqueCount: number;
  sample: any[];
}

export interface StatisticalSummary {
  numericColumns: NumericSummary[];
  categoricalColumns: CategoricalSummary[];
  overallDataQuality: number;
}

export interface NumericSummary {
  columnName: string;
  mean: number;
  median: number;
  stdDev: number;
  min: number;
  max: number;
  quartiles: [number, number, number];
  outliers: number[];
}

export interface CategoricalSummary {
  columnName: string;
  categories: CategoryInfo[];
  mostCommon: string;
  diversity: number;
}

export interface CategoryInfo {
  category: string;
  count: number;
  percentage: number;
}

export interface CorrelationAnalysis {
  column1: string;
  column2: string;
  correlationType: 'pearson' | 'spearman' | 'kendall';
  coefficient: number;
  significance: number;
  interpretation: string;
}

export interface DataPattern {
  patternType: 'trend' | 'seasonality' | 'outlier_cluster' | 'distribution_shift';
  description: string;
  significance: number;
  affectedColumns: string[];
  statisticalEvidence: any;
}

export interface GeneratedVisualization {
  chartType: 'histogram' | 'scatter' | 'line' | 'bar' | 'box' | 'heatmap';
  title: string;
  description: string;
  imageUrl?: string;
  academicValue: number;
  insights: string[];
}

export interface EconomicAnalysis {
  costBenefitMetrics: CostBenefitMetric[];
  roiCalculations: ROICalculation[];
  economicInsights: string[];
  financialProjections: FinancialProjection[];
}

export interface CostBenefitMetric {
  metric: string;
  cost: number;
  benefit: number;
  netValue: number;
  currency: string;
  timeframe: string;
}

export interface ROICalculation {
  scenario: string;
  investment: number;
  returns: number;
  roi: number;
  paybackPeriod: number;
  netPresentValue: number;
}

export interface FinancialProjection {
  year: number;
  projectedValue: number;
  confidence: number;
  assumptions: string[];
}

export interface FileProcessingEvent {
  eventType: 'processing_started' | 'chunk_completed' | 'insight_extracted' | 'processing_completed' | 'processing_error';
  fileId: string;
  fileName: string;
  progress: number;
  stage: string;
  data?: any;
  timestamp: number;
  estimatedCompletion?: number;
}

export interface ContextAssemblyResult {
  assembledContext: string;
  tokenCount: number;
  contextSections: ContextSection[];
  priorityScores: PriorityScore[];
  optimizationReport: OptimizationReport;
}

export interface ContextSection {
  sourceFileId: string;
  sectionType: 'audio_insight' | 'video_analysis' | 'document_chunk' | 'data_finding';
  content: string;
  relevanceScore: number;
  tokenCount: number;
}

export interface PriorityScore {
  fileId: string;
  fileName: string;
  overallScore: number;
  relevanceFactors: RelevanceFactor[];
}

export interface RelevanceFactor {
  factor: 'semantic_similarity' | 'academic_credibility' | 'temporal_relevance' | 'citation_potential';
  score: number;
  weight: number;
}

export interface OptimizationReport {
  originalTokenCount: number;
  optimizedTokenCount: number;
  compressionRatio: number;
  informationRetention: number;
  optimizationTechniques: string[];
}


================================================
FILE: frontend/tests/e2e/chat.spec.ts
================================================
import { test, expect } from '@playwright/test';

const CHAT_URL = '/chat';

// Helper to wait for initial assistant stream text to appear in chat pane
async function expectStreamedMessage(page) {
  // Adjust selector names if your UI differs
  const assistantMessage = page.getByTestId('assistant-message').first().or(page.locator('[data-role="assistant"]')).first();
  await expect(assistantMessage).toBeVisible({ timeout: 30000 });
}

test.describe('Claude.md Journeys - Chat End-to-End', () => {
  test.beforeEach(async ({ page, baseURL }) => {
    await page.goto(`${baseURL ?? 'http://localhost:3000'}${CHAT_URL}`);
    // Sidebar and ChatPane basic smoke
    await expect(page).toHaveURL(/\/chat$/);
  });

  test('1) New chat: prompt-only -> POST /api/chat -> WS stream', async ({ page }) => {
    // New chat button in sidebar
    const newChat = page.getByRole('button', { name: /new chat/i }).or(page.getByTestId('new-chat'));
    await newChat.click().catch(() => {}); // no-op if not present

    // Type prompt
    const promptBox = page.getByPlaceholder(/message/i).or(page.getByRole('textbox'));
    await promptBox.fill('Summarize the importance of RAG with citations.');

    // Send
    const sendBtn = page.getByRole('button', { name: /send/i }).or(page.getByTestId('send-button'));
    await sendBtn.click();

    // Expect streamed content in UI (first assistant message)
    await expectStreamedMessage(page);
  });

  test('2) Upload files + prompt -> POST /api/files -> POST /api/chat -> WS stream', async ({ page }) => {
    // Attach small sample file(s). Adjust selector to your uploader dropzone/input.
    const fileInput = page.locator('input[type="file"]').first().or(page.getByTestId('file-input'));
    await fileInput.setInputFiles([
      { name: 'sample.txt', mimeType: 'text/plain', buffer: Buffer.from('This is a sample context file.') },
    ]);

    // Verify thumbnail/progress visible if UI surfaces it (best-effort)
    const uploader = page.getByTestId('uploader').or(page.getByText(/upload/i));
    await uploader.waitFor({ state: 'visible', timeout: 5000 }).catch(() => {});

    // Enter prompt referencing file
    const promptBox = page.getByPlaceholder(/message/i).or(page.getByRole('textbox'));
    await promptBox.fill('Use uploaded context to outline 3 key points.');

    // Send
    const sendBtn = page.getByRole('button', { name: /send/i }).or(page.getByTestId('send-button'));
    await sendBtn.click();

    // Expect streamed assistant response
    await expectStreamedMessage(page);
  });

  test('3) Role routing: Researcher -> Perplexity, General -> OpenRouter default', async ({ page }) => {
    // If role selector exists, switch role. Update selectors if your UI differs.
    const roleSelect = page.getByLabel(/role/i).or(page.getByTestId('role-select'));
    if (await roleSelect.isVisible().catch(() => false)) {
      await roleSelect.selectOption(/researcher/i);
    }

    const promptBox = page.getByPlaceholder(/message/i).or(page.getByRole('textbox'));
    await promptBox.fill('Find latest 3 AI governance reports and summarize.');

    const sendBtn = page.getByRole('button', { name: /send/i }).or(page.getByTestId('send-button'));
    await sendBtn.click();

    await expectStreamedMessage(page);

    // Switch to general and test again
    if (await roleSelect.isVisible().catch(() => false)) {
      await roleSelect.selectOption(/general/i);
      await promptBox.fill('Explain retrieval augmented generation in 2 sentences.');
      await sendBtn.click();
      await expectStreamedMessage(page);
    }
  });

  test('4) Download menu presence (DOCX / PDF / PPT / ZIP) after response', async ({ page }) => {
    // Trigger a simple chat
    const promptBox = page.getByPlaceholder(/message/i).or(page.getByRole('textbox'));
    await promptBox.fill('Generate a short academic abstract.');
    const sendBtn = page.getByRole('button', { name: /send/i }).or(page.getByTestId('send-button'));
    await sendBtn.click();

    await expectStreamedMessage(page);

    // Download options; adapt selectors to your DownloadMenu
    const downloadMenu = page.getByTestId('download-menu').or(page.getByRole('button', { name: /download/i }));
    await downloadMenu.click().catch(() => {});
    const docx = page.getByRole('menuitem', { name: /docx/i }).or(page.getByText(/docx/i));
    const pdf = page.getByRole('menuitem', { name: /pdf/i }).or(page.getByText(/pdf/i));
    await expect(docx.or(pdf)).toBeVisible({ timeout: 5000 });
  });

  test('5) Wallet / Dynamic.xyz button visibility', async ({ page }) => {
    const walletBtn = page.getByRole('button', { name: /wallet|login|get started/i })
      .or(page.getByTestId('wallet-button'));
    await expect(walletBtn).toBeVisible();
  });

  test('6) Error fallback: invalid model or missing key -> user-facing error with retry', async ({ page }) => {
    // If the UI allows selecting a provider/model, pick a likely-invalid combination
    const providerSelect = page.getByLabel(/provider/i).or(page.getByTestId('provider-select'));
    if (await providerSelect.isVisible().catch(() => false)) {
      await providerSelect.selectOption('openrouter').catch(() => {});
    }

    const promptBox = page.getByPlaceholder(/message/i).or(page.getByRole('textbox'));
    await promptBox.fill('Trigger a model error for testing.');

    const sendBtn = page.getByRole('button', { name: /send/i }).or(page.getByTestId('send-button'));
    await sendBtn.click();

    // Expect either stream or a handled error banner/toast
    const errorToast = page.getByRole('alert').or(page.getByTestId('error-banner'));
    await expect(errorToast).toBeVisible({ timeout: 15000 }).catch(async () => {
      // If no error shown, expect streamed message instead (fallback worked)
      await expectStreamedMessage(page);
    });
  });
});



================================================
FILE: frontend/tests/e2e/user-journey.spec.ts
================================================
import { test, expect } from '@playwright/test';

// Comprehensive E2E test suite for HandyWriterz user journeys
test.describe('HandyWriterz User Journey Tests', () => {
  
  // Test configuration
  const BACKEND_URL = process.env.PLAYWRIGHT_API_URL || 'http://localhost:8001';
  const FRONTEND_URL = process.env.PLAYWRIGHT_BASE_URL || 'http://localhost:3001';
  
  test.beforeEach(async ({ page }) => {
    // Set up page with proper viewport
    await page.setViewportSize({ width: 1280, height: 720 });
    
    // Mock Dynamic.xyz authentication for testing
    await page.addInitScript(() => {
      window.localStorage.setItem('dynamic_auth_token', 'test_token_12345');
      window.localStorage.setItem('auth_token', 'test_jwt_token');
    });
  });

  test('Homepage loads and displays key elements', async ({ page }) => {
    await page.goto(FRONTEND_URL);
    
    // Check page loads successfully
    await expect(page).toHaveTitle(/HandyWriterz/);
    
    // Check key elements are present
    await expect(page.locator('h1')).toContainText(/HandyWriterz|AI|Academic/);
    await expect(page.locator('nav')).toBeVisible();
    
    // Check navigation links
    const chatLink = page.locator('a[href*="chat"]');
    if (await chatLink.count() > 0) {
      await expect(chatLink).toBeVisible();
    }
  });

  test('Chat interface functionality', async ({ page }) => {
    await page.goto(`${FRONTEND_URL}/chat`);
    
    // Wait for chat interface to load
    await page.waitForSelector('textarea, input[type="text"]', { timeout: 10000 });
    
    // Check for chat input elements
    const textInput = page.locator('textarea, input[type="text"]').first();
    await expect(textInput).toBeVisible();
    
    // Check for send button
    const sendButton = page.locator('button[type="submit"], button:has-text("Send"), button:has-text("↑")');
    if (await sendButton.count() > 0) {
      await expect(sendButton.first()).toBeVisible();
    }
    
    // Test typing in chat input
    await textInput.fill('Hello, this is a test message');
    await expect(textInput).toHaveValue('Hello, this is a test message');
    
    // Test file upload functionality
    const fileInput = page.locator('input[type="file"]');
    if (await fileInput.count() > 0) {
      await expect(fileInput.first()).toBeVisible();
    }
  });

  test('Settings page navigation and functionality', async ({ page }) => {
    await page.goto(`${FRONTEND_URL}/settings`);
    
    // Check settings page loads
    await expect(page.locator('h1')).toContainText(/Settings/);
    
    // Check settings navigation
    const billingLink = page.locator('a[href*="billing"]');
    if (await billingLink.count() > 0) {
      await billingLink.click();
      await expect(page).toHaveURL(/billing/);
      await expect(page.locator('h1')).toContainText(/Billing/);
    }
    
    // Check general settings
    await page.goto(`${FRONTEND_URL}/settings/general`);
    await expect(page.locator('h1')).toContainText(/General|Settings/);
  });

  test('Billing page and pricing tiers', async ({ page }) => {
    await page.goto(`${FRONTEND_URL}/settings/billing`);
    
    // Check billing page loads
    await expect(page.locator('h1')).toContainText(/Billing/);
    
    // Check for upgrade button
    const upgradeButton = page.locator('button:has-text("Upgrade"), button:has-text("Plan")');
    if (await upgradeButton.count() > 0) {
      await upgradeButton.first().click();
      
      // Check if payment dialog opens
      await page.waitForTimeout(1000);
      const paymentDialog = page.locator('[role="dialog"], .payment-dialog');
      if (await paymentDialog.count() > 0) {
        await expect(paymentDialog.first()).toBeVisible();
        
        // Check for pricing tiers
        const pricingTiers = page.locator('text=/Free|Basic|Pro|Enterprise/');
        await expect(pricingTiers.first()).toBeVisible();
        
        // Close dialog
        const closeButton = page.locator('button:has-text("Cancel"), button:has-text("Close"), [aria-label="Close"]');
        if (await closeButton.count() > 0) {
          await closeButton.first().click();
        }
      }
    }
  });

  test('Theme toggle functionality', async ({ page }) => {
    await page.goto(`${FRONTEND_URL}/settings`);
    
    // Look for theme toggle
    const themeToggle = page.locator('button:has-text("Dark"), button:has-text("Light"), button:has-text("Theme"), [aria-label*="theme"]');
    
    if (await themeToggle.count() > 0) {
      // Get initial theme
      const body = page.locator('body');
      const initialClass = await body.getAttribute('class');
      
      // Toggle theme
      await themeToggle.first().click();
      await page.waitForTimeout(500);
      
      // Check theme changed
      const newClass = await body.getAttribute('class');
      expect(newClass).not.toBe(initialClass);
    }
  });

  test('File upload functionality', async ({ page }) => {
    await page.goto(`${FRONTEND_URL}/chat`);
    
    // Look for file upload area
    const fileInput = page.locator('input[type="file"]');
    if (await fileInput.count() > 0) {
      // Create a test file
      const testFileContent = 'This is a test document for HandyWriterz processing.';
      
      // Upload test file
      await fileInput.first().setInputFiles({
        name: 'test-document.txt',
        mimeType: 'text/plain',
        buffer: Buffer.from(testFileContent)
      });
      
      // Check for file upload feedback
      await page.waitForTimeout(1000);
      const uploadFeedback = page.locator('text=/uploaded|selected|added/i');
      if (await uploadFeedback.count() > 0) {
        await expect(uploadFeedback.first()).toBeVisible();
      }
    }
  });

  test('API health check', async ({ page }) => {
    // Test backend API directly
    const response = await page.request.get(`${BACKEND_URL}/health`);
    expect(response.ok()).toBeTruthy();
    
    const healthData = await response.json();
    expect(healthData).toHaveProperty('status');
  });

  test('Payment flow simulation - Paystack', async ({ page }) => {
    await page.goto(`${FRONTEND_URL}/settings/billing`);
    
    // Click upgrade button
    const upgradeButton = page.locator('button:has-text("Upgrade")');
    if (await upgradeButton.count() > 0) {
      await upgradeButton.first().click();
      
      // Select a plan (Basic)
      const basicPlan = page.locator('button:has-text("Basic"), button:has-text("$19")');
      if (await basicPlan.count() > 0) {
        await basicPlan.first().click();
        
        // This would normally redirect to Paystack
        // In test environment, we just verify the process starts
        await page.waitForTimeout(2000);
        
        // Check if redirected or payment URL generated
        const currentUrl = page.url();
        console.log('Payment flow initiated, URL:', currentUrl);
      }
    }
  });

  test('Payment flow simulation - Coinbase Commerce', async ({ page }) => {
    await page.goto(`${FRONTEND_URL}/settings/billing`);
    
    // Click upgrade button
    const upgradeButton = page.locator('button:has-text("Upgrade")');
    if (await upgradeButton.count() > 0) {
      await upgradeButton.first().click();
      
      // Select crypto payment method
      const cryptoButton = page.locator('button:has-text("Crypto"), button:has-text("USDC")');
      if (await cryptoButton.count() > 0) {
        await cryptoButton.first().click();
        
        // Select a plan
        const proPlan = page.locator('button:has-text("Pro"), button:has-text("$49")');
        if (await proPlan.count() > 0) {
          await proPlan.first().click();
          
          // This would normally redirect to Coinbase Commerce
          await page.waitForTimeout(2000);
          
          const currentUrl = page.url();
          console.log('Crypto payment flow initiated, URL:', currentUrl);
        }
      }
    }
  });

  test('Responsive design - Mobile view', async ({ page }) => {
    // Set mobile viewport
    await page.setViewportSize({ width: 375, height: 667 });
    
    await page.goto(FRONTEND_URL);
    
    // Check mobile navigation
    const mobileMenu = page.locator('button[aria-label*="menu"], button:has-text("☰")');
    if (await mobileMenu.count() > 0) {
      await mobileMenu.first().click();
      await page.waitForTimeout(500);
    }
    
    // Check chat interface on mobile
    await page.goto(`${FRONTEND_URL}/chat`);
    const chatInput = page.locator('textarea, input[type="text"]');
    if (await chatInput.count() > 0) {
      await expect(chatInput.first()).toBeVisible();
    }
  });

  test('Error handling and edge cases', async ({ page }) => {
    // Test 404 page
    await page.goto(`${FRONTEND_URL}/nonexistent-page`);
    // Should either show 404 or redirect to homepage
    
    // Test API error handling
    await page.goto(`${FRONTEND_URL}/chat`);
    
    // Mock network failure
    await page.route('**/api/**', route => {
      route.abort('failed');
    });
    
    // Try to interact with API
    const textInput = page.locator('textarea, input[type="text"]').first();
    if (await textInput.count() > 0) {
      await textInput.fill('Test message');
      const sendButton = page.locator('button[type="submit"], button:has-text("Send")');
      if (await sendButton.count() > 0) {
        await sendButton.first().click();
        
        // Check for error message
        await page.waitForTimeout(2000);
        const errorMessage = page.locator('text=/error|failed|try again/i');
        // Error handling should be graceful
      }
    }
  });

  test('Performance and loading times', async ({ page }) => {
    const startTime = Date.now();
    
    await page.goto(FRONTEND_URL);
    await page.waitForLoadState('networkidle');
    
    const loadTime = Date.now() - startTime;
    console.log(`Page load time: ${loadTime}ms`);
    
    // Page should load within reasonable time
    expect(loadTime).toBeLessThan(10000); // 10 seconds max
    
    // Check for loading states
    const loadingIndicators = page.locator('text=/loading|spinner/i');
    // Loading indicators should eventually disappear
  });

  test('Authentication state handling', async ({ page }) => {
    // Test unauthenticated state
    await page.addInitScript(() => {
      window.localStorage.clear();
    });
    
    await page.goto(`${FRONTEND_URL}/chat`);
    
    // Should either redirect to login or show login prompt
    await page.waitForTimeout(2000);
    
    const loginElements = page.locator('button:has-text("Login"), button:has-text("Connect"), text=/sign in|log in/i');
    // Should have some authentication mechanism visible
  });
});

// API Integration Tests
test.describe('API Integration Tests', () => {
  const BACKEND_URL = process.env.PLAYWRIGHT_API_URL || 'http://localhost:8001';
  
  test('Backend health endpoint', async ({ request }) => {
    const response = await request.get(`${BACKEND_URL}/health`);
    expect(response.ok()).toBeTruthy();
    
    const data = await response.json();
    expect(data).toHaveProperty('status');
  });
  
  test('API documentation endpoint', async ({ request }) => {
    const response = await request.get(`${BACKEND_URL}/docs`);
    expect(response.ok()).toBeTruthy();
  });
  
  test('Billing endpoints', async ({ request }) => {
    // Test pricing tiers endpoint
    const tiersResponse = await request.get(`${BACKEND_URL}/api/billing/tiers`);
    if (tiersResponse.ok()) {
      const tiers = await tiersResponse.json();
      expect(tiers).toHaveProperty('tiers');
    }
  });
  
  test('File upload endpoint', async ({ request }) => {
    // Test file upload
    const response = await request.post(`${BACKEND_URL}/api/files`, {
      multipart: {
        file: {
          name: 'test.txt',
          mimeType: 'text/plain',
          buffer: Buffer.from('Test file content')
        }
      }
    });
    
    // Should handle file upload (may require auth)
    // Response should be 200, 401, or 403 but not 500
    expect([200, 401, 403].includes(response.status())).toBeTruthy();
  });
});

