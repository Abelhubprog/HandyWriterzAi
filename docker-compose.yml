version: '3.8'

networks:
  handywriterz:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  uploads_data:

services:
  # PostgreSQL Database with pgvector extension
  db:
    image: pgvector/pgvector:pg15
    container_name: handywriterz-db
    environment:
      POSTGRES_DB: handywriterz
      POSTGRES_USER: handywriterz
      POSTGRES_PASSWORD: handywriterz_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U handywriterz -d handywriterz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - handywriterz
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    container_name: handywriterz-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - handywriterz
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # HandyWriterz Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: handywriterz-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://handywriterz:handywriterz_pass@db:5432/handywriterz
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - WORKERS=4
    volumes:
      - uploads_data:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - handywriterz
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Frontend Service (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: handywriterz-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - handywriterz
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
